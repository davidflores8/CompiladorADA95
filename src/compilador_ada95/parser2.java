
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\014\000\002\014" +
    "\014\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\005\000" +
    "\002\024\004\000\002\024\004\000\002\024\002\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\012\004" +
    "\000\002\013\010\000\002\013\007\000\002\013\003\000" +
    "\002\031\006\000\002\031\006\000\002\031\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\022\014\000\002\023\014\000\002" +
    "\023\006\000\002\023\004\000\002\003\006\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\025\014\000\002\004\003\000" +
    "\002\004\005\000\002\004\004\000\002\004\004\000\002" +
    "\004\002\000\002\010\005\000\002\010\005\000\002\005" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\003" +
    "\000\002\005\005\000\002\005\003\000\002\005\005\000" +
    "\002\036\007\000\002\017\003\000\002\037\002\000\002" +
    "\017\006\000\002\017\002\000\002\006\007\000\002\006" +
    "\007\000\002\007\007\000\002\026\014\000\002\011\021" +
    "\000\002\030\011\000\002\027\010\000\002\020\002\000" +
    "\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\025\005\001\002\000\004\002\325\001" +
    "\002\000\004\020\006\001\002\000\004\044\010\001\002" +
    "\000\004\026\030\001\002\000\006\020\013\045\011\001" +
    "\002\000\006\026\uffec\042\uffec\001\002\000\006\026\uffef" +
    "\042\uffef\001\002\000\004\052\014\001\002\000\010\034" +
    "\020\035\017\036\016\001\002\000\010\005\022\006\021" +
    "\007\024\001\002\000\010\005\ufff0\006\ufff0\007\ufff0\001" +
    "\002\000\010\005\ufff1\006\ufff1\007\ufff1\001\002\000\010" +
    "\005\ufff2\006\ufff2\007\ufff2\001\002\000\010\026\ufff3\045" +
    "\ufff3\046\ufff3\001\002\000\010\026\ufff5\045\ufff5\046\ufff5" +
    "\001\002\000\006\045\025\046\026\001\002\000\010\026" +
    "\ufff4\045\ufff4\046\ufff4\001\002\000\006\026\uffed\042\uffed" +
    "\001\002\000\006\020\013\045\011\001\002\000\006\026" +
    "\uffee\042\uffee\001\002\000\012\020\037\025\034\027\uffce" +
    "\041\035\001\002\000\004\027\320\001\002\000\006\027" +
    "\uffd2\046\316\001\002\000\012\020\037\025\034\027\uffce" +
    "\041\035\001\002\000\004\020\304\001\002\000\004\020" +
    "\057\001\002\000\012\020\037\025\034\027\uffce\041\035" +
    "\001\002\000\006\047\041\052\040\001\002\000\010\005" +
    "\044\006\043\007\046\001\002\000\004\020\037\001\002" +
    "\000\006\027\uffcd\046\uffcd\001\002\000\010\004\053\027" +
    "\uffcb\046\uffcb\001\002\000\010\004\051\027\uffc8\046\uffc8" +
    "\001\002\000\006\027\uffcc\046\uffcc\001\002\000\010\004" +
    "\047\027\uffc6\046\uffc6\001\002\000\004\033\050\001\002" +
    "\000\006\027\uffc5\046\uffc5\001\002\000\004\022\052\001" +
    "\002\000\006\027\uffc7\046\uffc7\001\002\000\006\050\054" +
    "\051\055\001\002\000\006\027\uffc9\046\uffc9\001\002\000" +
    "\006\027\uffca\046\uffca\001\002\000\004\027\uffd0\001\002" +
    "\000\004\044\010\001\002\000\004\042\061\001\002\000" +
    "\010\005\022\006\021\007\024\001\002\000\004\026\063" +
    "\001\002\000\012\020\037\025\034\027\uffce\041\035\001" +
    "\002\000\004\027\065\001\002\000\022\010\072\013\075" +
    "\015\103\020\074\031\077\032\071\042\ufff6\055\076\001" +
    "\002\000\036\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\020\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\037" +
    "\uffb8\042\uffb8\055\uffb8\001\002\000\036\010\072\011\ufff6" +
    "\012\ufff6\013\075\014\ufff6\015\103\020\074\024\ufff6\030" +
    "\ufff6\031\077\032\071\037\ufff6\042\ufff6\055\076\001\002" +
    "\000\036\010\072\011\ufff6\012\ufff6\013\075\014\ufff6\015" +
    "\103\020\074\024\ufff6\030\ufff6\031\077\032\071\037\ufff6" +
    "\042\ufff6\055\076\001\002\000\004\044\274\001\002\000" +
    "\004\044\243\001\002\000\036\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\020\uffb8\024\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\037\uffb8\042\uffb8\055\uffb8\001\002\000\006" +
    "\004\236\044\147\001\002\000\022\010\uffb8\013\uffb8\015" +
    "\uffb8\020\uffb8\031\uffb8\032\uffb8\037\uffb8\055\uffb8\001\002" +
    "\000\004\020\uffb8\001\002\000\004\044\202\001\002\000" +
    "\036\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\020\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\037\uffb8\042" +
    "\uffb8\055\uffb8\001\002\000\036\010\072\011\ufff6\012\ufff6" +
    "\013\075\014\ufff6\015\103\020\074\024\ufff6\030\ufff6\031" +
    "\077\032\071\037\ufff6\042\ufff6\055\076\001\002\000\036" +
    "\010\072\011\ufff6\012\ufff6\013\075\014\ufff6\015\103\020" +
    "\074\024\ufff6\030\ufff6\031\077\032\071\037\ufff6\042\ufff6" +
    "\055\076\001\002\000\004\044\115\001\002\000\036\010" +
    "\072\011\ufff6\012\ufff6\013\075\014\ufff6\015\103\020\074" +
    "\024\ufff6\030\ufff6\031\077\032\071\037\ufff6\042\ufff6\055" +
    "\076\001\002\000\004\042\106\001\002\000\004\020\107" +
    "\001\002\000\004\046\110\001\002\000\004\030\111\001" +
    "\002\000\004\020\112\001\002\000\004\046\113\001\002" +
    "\000\012\020\uffbb\025\uffbb\027\uffbb\041\uffbb\001\002\000" +
    "\020\011\ufff7\012\ufff7\014\ufff7\024\ufff7\030\ufff7\037\ufff7" +
    "\042\ufff7\001\002\000\020\020\uffb8\022\uffb8\033\uffb8\043" +
    "\uffb8\044\uffb8\050\uffb8\051\uffb8\001\002\000\020\020\123" +
    "\022\127\033\124\043\130\044\117\050\125\051\122\001" +
    "\002\000\020\020\123\022\127\033\124\043\130\044\117" +
    "\050\125\051\122\001\002\000\012\004\170\016\154\017" +
    "\156\021\171\001\002\000\024\004\uffdf\016\163\017\164" +
    "\021\uffdf\045\uffdf\046\uffdf\047\uffdf\053\uffdf\054\uffdf\001" +
    "\002\000\024\004\uffe2\016\uffe2\017\uffe2\021\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\053\uffe2\054\uffe2\001\002\000\026\004" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\044\147\045\uffe1\046\uffe1" +
    "\047\uffe1\053\uffe1\054\uffe1\001\002\000\024\004\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\045\uffe3\046\uffe3\047\uffe3\053\uffe3" +
    "\054\uffe3\001\002\000\024\004\uffe4\016\uffe4\017\uffe4\021" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\053\uffe4\054\uffe4\001\002" +
    "\000\012\045\uffe9\046\uffe9\053\142\054\141\001\002\000" +
    "\024\004\uffe5\016\uffe5\017\uffe5\021\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\053\uffe5\054\uffe5\001\002\000\024\004\uffe0\016" +
    "\uffe0\017\uffe0\021\uffe0\045\uffe0\046\uffe0\047\uffe0\053\uffe0" +
    "\054\uffe0\001\002\000\024\004\uffde\016\uffde\017\uffde\021" +
    "\uffde\045\uffde\046\uffde\047\uffde\053\uffde\054\uffde\001\002" +
    "\000\004\045\133\001\002\000\004\013\134\001\002\000" +
    "\022\010\uffb8\013\uffb8\014\uffb8\015\uffb8\020\uffb8\031\uffb8" +
    "\032\uffb8\055\uffb8\001\002\000\022\010\072\013\075\014" +
    "\ufff6\015\103\020\074\031\077\032\071\055\076\001\002" +
    "\000\004\014\137\001\002\000\004\046\140\001\002\000" +
    "\036\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\020\uffd3\024\uffd3\030\uffd3\031\uffd3\032\uffd3\037\uffd3\042" +
    "\uffd3\055\uffd3\001\002\000\020\020\uffb8\022\uffb8\033\uffb8" +
    "\043\uffb8\044\uffb8\050\uffb8\051\uffb8\001\002\000\020\020" +
    "\uffb8\022\uffb8\033\uffb8\043\uffb8\044\uffb8\050\uffb8\051\uffb8" +
    "\001\002\000\020\020\123\022\127\033\124\043\130\044" +
    "\117\050\125\051\122\001\002\000\006\045\uffeb\046\uffeb" +
    "\001\002\000\020\020\123\022\127\033\124\043\130\044" +
    "\117\050\125\051\122\001\002\000\006\045\uffea\046\uffea" +
    "\001\002\000\022\020\123\022\127\033\124\043\130\044" +
    "\117\045\uffc0\050\125\051\122\001\002\000\012\016\154" +
    "\017\156\045\uffc3\047\uffc2\001\002\000\004\045\152\001" +
    "\002\000\004\046\153\001\002\000\060\004\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\024\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\037\uffc4\042\uffc4\045\uffc4\046\uffc4\047\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\001\002\000\020\020\123\022\127\033\124" +
    "\043\130\044\117\050\125\051\122\001\002\000\004\047" +
    "\160\001\002\000\020\020\123\022\127\033\124\043\130" +
    "\044\117\050\125\051\122\001\002\000\024\004\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\045\uffd4\046\uffd4\047\uffd4\053\uffd4" +
    "\054\uffd4\001\002\000\022\020\123\022\127\033\124\043" +
    "\130\044\117\045\uffc0\050\125\051\122\001\002\000\004" +
    "\045\uffc1\001\002\000\024\004\uffd5\016\uffd5\017\156\021" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\053\uffd5\054\uffd5\001\002" +
    "\000\020\020\123\022\127\033\124\043\130\044\117\050" +
    "\125\051\122\001\002\000\020\020\123\022\127\033\124" +
    "\043\130\044\117\050\125\051\122\001\002\000\024\004" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\053\uffd7\054\uffd7\001\002\000\024\004\uffd8\016\uffd8\017" +
    "\156\021\uffd8\045\uffd8\046\uffd8\047\uffd8\053\uffd8\054\uffd8" +
    "\001\002\000\020\020\123\022\127\033\124\043\130\044" +
    "\117\050\125\051\122\001\002\000\020\020\uffe6\022\uffe6" +
    "\033\uffe6\043\uffe6\044\uffe6\050\uffe6\051\uffe6\001\002\000" +
    "\020\020\uffe7\022\uffe7\033\uffe7\043\uffe7\044\uffe7\050\uffe7" +
    "\051\uffe7\001\002\000\016\016\154\017\156\045\uffe8\046" +
    "\uffe8\053\uffe8\054\uffe8\001\002\000\006\016\154\017\156" +
    "\001\002\000\010\016\163\017\164\045\175\001\002\000" +
    "\024\004\uffd6\016\uffd6\017\uffd6\021\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\053\uffd6\054\uffd6\001\002\000\020\011\ufffc\012" +
    "\ufffc\014\ufffc\024\ufffc\030\ufffc\037\ufffc\042\ufffc\001\002" +
    "\000\020\011\ufffa\012\ufffa\014\ufffa\024\ufffa\030\ufffa\037" +
    "\ufffa\042\ufffa\001\002\000\036\010\072\011\ufff6\012\ufff6" +
    "\013\075\014\ufff6\015\103\020\074\024\ufff6\030\ufff6\031" +
    "\077\032\071\037\ufff6\042\ufff6\055\076\001\002\000\020" +
    "\011\ufffe\012\ufffe\014\ufffe\024\ufffe\030\ufffe\037\ufffe\042" +
    "\ufffe\001\002\000\006\020\204\043\203\001\002\000\004" +
    "\045\207\001\002\000\004\045\205\001\002\000\004\046" +
    "\206\001\002\000\036\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\020\uffbe\024\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\037\uffbe\042\uffbe\055\uffbe\001\002\000\004\046\210" +
    "\001\002\000\036\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\020\uffbf\024\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\037\uffbf\042\uffbf\055\uffbf\001\002\000\004\020\213\001" +
    "\002\000\004\013\221\001\002\000\004\034\214\001\002" +
    "\000\004\020\215\001\002\000\004\056\216\001\002\000" +
    "\004\056\217\001\002\000\004\022\220\001\002\000\004" +
    "\013\uffb9\001\002\000\022\010\072\013\075\014\ufff6\015" +
    "\103\020\074\031\077\032\071\055\076\001\002\000\004" +
    "\014\223\001\002\000\004\046\224\001\002\000\036\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\020\uffba" +
    "\024\uffba\030\uffba\031\uffba\032\uffba\037\uffba\042\uffba\055" +
    "\uffba\001\002\000\022\010\072\013\075\015\103\020\074" +
    "\031\077\032\071\037\ufff6\055\076\001\002\000\004\037" +
    "\227\001\002\000\004\040\230\001\002\000\020\020\uffb8" +
    "\022\uffb8\033\uffb8\043\uffb8\044\uffb8\050\uffb8\051\uffb8\001" +
    "\002\000\020\020\123\022\127\033\124\043\130\044\117" +
    "\050\125\051\122\001\002\000\004\046\233\001\002\000" +
    "\004\014\234\001\002\000\004\046\235\001\002\000\036" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\020" +
    "\uffbc\024\uffbc\030\uffbc\031\uffbc\032\uffbc\037\uffbc\042\uffbc" +
    "\055\uffbc\001\002\000\020\020\123\022\127\033\124\043" +
    "\130\044\117\050\125\051\122\001\002\000\010\016\154" +
    "\017\156\046\240\001\002\000\036\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\024\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\037\uffd9\042\uffd9\055\uffd9\001\002\000" +
    "\036\010\072\011\ufff6\012\ufff6\013\075\014\ufff6\015\103" +
    "\020\074\024\ufff6\030\ufff6\031\077\032\071\037\ufff6\042" +
    "\ufff6\055\076\001\002\000\020\011\ufff9\012\ufff9\014\ufff9" +
    "\024\ufff9\030\ufff9\037\ufff9\042\ufff9\001\002\000\020\020" +
    "\123\022\127\033\124\043\130\044\117\050\125\051\122" +
    "\001\002\000\004\045\245\001\002\000\004\023\246\001" +
    "\002\000\026\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8" +
    "\020\uffb8\024\uffb8\031\uffb8\032\uffb8\055\uffb8\001\002\000" +
    "\026\010\072\011\ufff6\012\ufff6\013\075\015\103\020\074" +
    "\024\ufff6\031\077\032\071\055\076\001\002\000\010\011" +
    "\uffb7\012\uffb7\024\uffb7\001\002\000\010\011\uffb8\012\uffb8" +
    "\024\uffb8\001\002\000\010\011\256\012\253\024\254\001" +
    "\002\000\004\044\263\001\002\000\004\046\262\001\002" +
    "\000\036\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\020\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd\037\uffdd" +
    "\042\uffdd\055\uffdd\001\002\000\026\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\015\uffb8\020\uffb8\024\uffb8\031\uffb8\032\uffb8" +
    "\055\uffb8\001\002\000\026\010\072\011\ufff6\012\ufff6\013" +
    "\075\015\103\020\074\024\ufff6\031\077\032\071\055\076" +
    "\001\002\000\010\011\256\012\253\024\254\001\002\000" +
    "\036\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\020\uffdb\024\uffdb\030\uffdb\031\uffdb\032\uffdb\037\uffdb\042" +
    "\uffdb\055\uffdb\001\002\000\036\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\020\uffda\024\uffda\030\uffda\031" +
    "\uffda\032\uffda\037\uffda\042\uffda\055\uffda\001\002\000\020" +
    "\020\123\022\127\033\124\043\130\044\117\050\125\051" +
    "\122\001\002\000\004\045\265\001\002\000\004\023\266" +
    "\001\002\000\026\010\uffb8\011\uffb8\012\uffb8\013\uffb8\015" +
    "\uffb8\020\uffb8\024\uffb8\031\uffb8\032\uffb8\055\uffb8\001\002" +
    "\000\026\010\072\011\ufff6\012\ufff6\013\075\015\103\020" +
    "\074\024\ufff6\031\077\032\071\055\076\001\002\000\010" +
    "\011\uffb7\012\uffb7\024\uffb7\001\002\000\010\011\uffb8\012" +
    "\uffb8\024\uffb8\001\002\000\010\011\256\012\253\024\254" +
    "\001\002\000\036\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\020\uffdc\024\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\037\uffdc\042\uffdc\055\uffdc\001\002\000\004\020\275\001" +
    "\002\000\004\045\276\001\002\000\004\046\277\001\002" +
    "\000\036\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\020\uffbd\024\uffbd\030\uffbd\031\uffbd\032\uffbd\037\uffbd" +
    "\042\uffbd\055\uffbd\001\002\000\020\011\ufffb\012\ufffb\014" +
    "\ufffb\024\ufffb\030\ufffb\037\ufffb\042\ufffb\001\002\000\020" +
    "\011\ufff8\012\ufff8\014\ufff8\024\ufff8\030\ufff8\037\ufff8\042" +
    "\ufff8\001\002\000\036\010\072\011\ufff6\012\ufff6\013\075" +
    "\014\ufff6\015\103\020\074\024\ufff6\030\ufff6\031\077\032" +
    "\071\037\ufff6\042\ufff6\055\076\001\002\000\020\011\ufffd" +
    "\012\ufffd\014\ufffd\024\ufffd\030\ufffd\037\ufffd\042\ufffd\001" +
    "\002\000\004\044\010\001\002\000\004\026\306\001\002" +
    "\000\012\020\037\025\034\027\uffce\041\035\001\002\000" +
    "\004\027\310\001\002\000\022\010\072\013\075\015\103" +
    "\020\074\030\ufff6\031\077\032\071\055\076\001\002\000" +
    "\004\030\312\001\002\000\004\020\313\001\002\000\004" +
    "\046\314\001\002\000\012\020\uffff\025\uffff\027\uffff\041" +
    "\uffff\001\002\000\004\027\uffcf\001\002\000\012\020\037" +
    "\025\034\027\uffce\041\035\001\002\000\004\027\uffd1\001" +
    "\002\000\022\010\072\013\075\015\103\020\074\030\ufff6" +
    "\031\077\032\071\055\076\001\002\000\004\030\322\001" +
    "\002\000\004\020\323\001\002\000\004\046\324\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\006\001\001\000\002\001\001" +
    "\000\004\013\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\014\001\001\000\004" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\026\001\001\000\002\001\001\000\012\004\030\010\031" +
    "\011\035\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\314\010\031\011\035\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\055\010" +
    "\031\011\035\014\032\001\001\000\002\001\001\000\004" +
    "\005\044\001\001\000\004\010\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\057\001\001\000\002\001\001\000\004\016\061\001\001" +
    "\000\002\001\001\000\012\004\063\010\031\011\035\014" +
    "\032\001\001\000\002\001\001\000\024\003\101\006\067" +
    "\007\100\022\077\024\104\025\065\026\072\030\066\036" +
    "\103\001\001\000\004\020\301\001\001\000\024\003\101" +
    "\006\067\007\100\022\077\024\300\025\065\026\072\030" +
    "\066\036\103\001\001\000\024\003\101\006\067\007\100" +
    "\022\077\024\277\025\065\026\072\030\066\036\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\240" +
    "\001\001\000\002\001\001\000\004\020\224\001\001\000" +
    "\004\020\210\001\001\000\002\001\001\000\004\020\177" +
    "\001\001\000\024\003\101\006\067\007\100\022\077\024" +
    "\176\025\065\026\072\030\066\036\103\001\001\000\024" +
    "\003\101\006\067\007\100\022\077\024\175\025\065\026" +
    "\072\030\066\036\103\001\001\000\002\001\001\000\024" +
    "\003\101\006\067\007\100\022\077\024\113\025\065\026" +
    "\072\030\066\036\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\115\001\001\000\014\031\131\032\125\034" +
    "\117\035\120\036\130\001\001\000\010\034\172\035\173" +
    "\036\130\001\001\000\004\033\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\134\001\001\000\024\003\101\006" +
    "\067\007\100\022\077\024\135\025\065\026\072\030\066" +
    "\036\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\144\001\001\000\004\020\142" +
    "\001\001\000\014\031\143\032\125\034\117\035\120\036" +
    "\130\001\001\000\002\001\001\000\014\031\145\032\125" +
    "\034\117\035\120\036\130\001\001\000\002\001\001\000" +
    "\012\017\150\034\147\035\120\036\130\001\001\000\004" +
    "\037\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\161\035\120\036\130\001\001" +
    "\000\002\001\001\000\010\034\156\035\120\036\130\001" +
    "\001\000\002\001\001\000\012\017\160\034\147\035\120" +
    "\036\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\165\035\120\036\130\001\001\000\010\034\164" +
    "\035\120\036\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\171\035\120\036\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\101\006\067\007\100\022" +
    "\077\024\200\025\065\026\072\030\066\036\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\101\006\067\007\100\022\077\024\221" +
    "\025\065\026\072\030\066\036\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\101" +
    "\006\067\007\100\022\077\024\225\025\065\026\072\030" +
    "\066\036\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\230\001\001\000\014\031\231\032\125\034" +
    "\117\035\120\036\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\236\035\120\036\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\101\006\067\007\100\022\077\024" +
    "\241\025\065\026\072\030\066\036\103\001\001\000\002" +
    "\001\001\000\014\031\243\032\125\034\117\035\120\036" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\246\001\001\000\024\003\101\006\067\007\100\022" +
    "\077\024\247\025\065\026\072\030\066\036\103\001\001" +
    "\000\004\021\250\001\001\000\004\020\251\001\001\000" +
    "\004\023\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\256\001\001\000\024\003" +
    "\101\006\067\007\100\022\077\024\257\025\065\026\072" +
    "\030\066\036\103\001\001\000\004\023\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\263\032\125" +
    "\034\117\035\120\036\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\266\001\001\000\024\003\101" +
    "\006\067\007\100\022\077\024\267\025\065\026\072\030" +
    "\066\036\103\001\001\000\004\021\270\001\001\000\004" +
    "\020\271\001\001\000\004\023\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\101\006\067\007\100\022\077\024\302\025\065" +
    "\026\072\030\066\036\103\001\001\000\002\001\001\000" +
    "\004\012\304\001\001\000\002\001\001\000\012\004\306" +
    "\010\031\011\035\014\032\001\001\000\002\001\001\000" +
    "\024\003\101\006\067\007\100\022\077\024\310\025\065" +
    "\026\072\030\066\036\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\316\010\031\011\035\014\032\001" +
    "\001\000\002\001\001\000\024\003\101\006\067\007\100" +
    "\022\077\024\320\025\065\026\072\030\066\036\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ArrayList errores = new ArrayList();
    Nodo arbol;
    Cuadruplo cuadruplos = new Cuadruplo();
    public int cantTemp = 0;

    String tipoCall="";


    String id_for="";

    public void setErrores(ArrayList errores){
        this.errores = errores;
    }


    public void setArbol(Nodo arbol){
        this.arbol = arbol;
    }

    public String nuevoTemp(){
        String temp = "t"+ Integer.toString(cantTemp);
        cantTemp++;
        return temp;
    }   

    public ArrayList<Integer> creaLista(int indice){
        ArrayList<Integer> retVal = new ArrayList<>();
        retVal.add(indice);
        return retVal;
    }

    public ArrayList<Integer> fusiona(ArrayList<Integer> lista1, ArrayList<Integer> lista2){
        ArrayList<Integer> retVal = new ArrayList<>();
        if (lista1 != null){
            for(int i = 0; i < lista1.size();i++){
                retVal.add(lista1.get(i));
            }
        }       
        if (lista2 != null){
            for(int i = 0; i < lista2.size();i++){
                retVal.add(lista2.get(i));
            }
        }   
     
        return retVal;
        
    }

    public boolean evaluarExiste(Nodo nodo, String nombre){
    
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            evaluarExiste(nodo.getHijos().get(i), nombre);
            if(nodo.getHijos().get(i).getEtiqueta().equals(nombre)){
                return true;
            }
            
        }
        return false;
       
    }

     public boolean evaluarTipo(Nodo nodo, String nombre, String tipo){
    
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            evaluarTipo(nodo.getHijos().get(i), nombre, tipo);
            if(nodo.getHijos().get(i).getTipo().equals(tipo) && nodo.getHijos().get(i).getEtiqueta().equals(nombre)){
                return true;
            }
        }
        return false;
        
    }


     public int cantidadVecesExiste(Nodo nodo, String nombre, int contador){
    
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            cantidadVecesExiste(nodo.getHijos().get(i), nombre, contador);
            if(nodo.getHijos().get(i).getEtiqueta().equals(nombre)){
                contador++;
            }
        }
        return contador;
    }

    public String obtenerTipo(Nodo nodo, String nombre){
        
        String tipo= "";
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            evaluarTipo(nodo.getHijos().get(i), nombre, tipo);
            if(nodo.getHijos().get(i).getEtiqueta().equalsIgnoreCase(nombre)){
                tipo =  nodo.getHijos().get(i).getTipo();
            }
        }
        return tipo;
        
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 
                System.out.println("-------Cuadruplos---------");           
                cuadruplos.imprimirCuadruplos();
                
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= DECISION M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> d = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    cuadruplos.completa(d,m.getNum());
                    RESULT = d; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= WHILE M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> w = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    cuadruplos.completa(w,m.getNum());
                    RESULT = w; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= ASIGNACIONES STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= PUT STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= GET STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= LOOP M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                 
                        cuadruplos.completa(l,m.getNum());
                        RESULT = l;  
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= FOR STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= CALL STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		 


                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= 
            {
              ArrayList<Integer> RESULT =null;
		  
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONDICION ::= CONDICIONP TK_AND M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		         
                Condiciones retorno = null;
                if (c != null && c1 != null){
                    cuadruplos.completa(c.getListaVerdadera(),m.getNum());
                    ArrayList<Integer> listaFalsa = fusiona(c.getListaFalsa(),c1.getListaFalsa());                    
                    retorno = new Condiciones(c1.getListaVerdadera(),listaFalsa);
                }
                RESULT = retorno;                    
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICION ::= CONDICIONP TK_OR M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                Condiciones retorno = null;
                if (c != null && c1 != null){
                    cuadruplos.completa(c.getListaFalsa(),m.getNum());
                    ArrayList<Integer> listaVerdadera = fusiona(c.getListaVerdadera(),c1.getListaVerdadera());
                    retorno = new Condiciones(listaVerdadera,c1.getListaFalsa());
                }                                       
                RESULT = retorno;
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICION ::= CONDICIONP 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                RESULT = c;
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Condiciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    Condiciones e;
                    if (o.equals("=")){
                        if(v.getTipo().equals(v2.getTipo())){
                            //cuadruplos
                            e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                            cuadruplos.addCuadruplo("IF=",v.getValor(),v2.getValor(),"");
                            cuadruplos.addCuadruplo("GOTO","");
                        }
                        else{
                             e = null;
                            errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getTipo() + " no es del mismo tipo que " + v2.getTipo());
                        }
                     
                    } else {
                        if (v.getTipo().equals("INTEGER") && v2.getTipo().equals("INTEGER")){
                            //cuadruplos
                            e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                            cuadruplos.addCuadruplo("IF"+o,v.getValor(),v2.getValor(),"");
                            cuadruplos.addCuadruplo("GOTO","");
                        } else {
                            e = null;
                            if (!v.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (vleft + 1) + " Columna: " + (vright + 1) + " " + v.getValor() + " no es INTEGER");
                            }
                            if (!v2.getTipo().equals("INTEGER")){
                                errores.add("Error: Linea: "+ (v2left + 1) + " Columna: " + (v2right + 1) + " " + v2.getValor() + " no es INTEGER");
                            }
                        }                          
                    }
                    RESULT = e;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONP",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCONDICION ::= TK_OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT = o.toString(); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPCONDICION ::= TK_IGUAL 
            {
              String RESULT =null;
		 RESULT= "="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= TK_DIGITO 
            {
              Objeto2 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = new Objeto2("INTEGER",i);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= TK_TRUE 
            {
              Objeto2 RESULT =null;
		
            RESULT = new Objeto2("BOOLEAN","TRUE");
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= TK_DIGITOFLOAT 
            {
              Objeto2 RESULT =null;
		int digleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String dig = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = new Objeto2("FLOAT",dig);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= TK_FALSE 
            {
              Objeto2 RESULT =null;
		
            RESULT = new Objeto2("BOOLEAN","FALSE");
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= TK_ID 
            {
              Objeto2 RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            Boolean existe = evaluarTipo(arbol, d.toString(), "INTEGER");
            if(existe){
                RESULT = new Objeto2("INTEGER",d.toString());
            }
            else{
                errores.add("Error: Linea: "+ (dleft + 1) + " Columna: " + (dright + 1) + " no existe "+ d + " con el tipo deseado");
                RESULT = new Objeto2("ERROR", d.toString());
            }
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= TK_STRING 
            {
              Objeto2 RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = new Objeto2("STRING",s);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= OPARIT 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = o;
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= CALL 
            {
              Objeto2 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 c = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            cuadruplos.addCuadruplo("CALL", c.getValor());

        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECISION ::= TK_IF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN M STATEMENTS N M DECISION_PRIME 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                  
                ArrayList<Integer> retorno = null;
                if (c != null){
                    ArrayList<Integer> siguiente = new ArrayList<>();                     
                    cuadruplos.completa(c.getListaVerdadera(), m.getNum());
                    if (s2 != null){
                        cuadruplos.completa(c.getListaFalsa(), m2.getNum());
                        siguiente = fusiona(n,fusiona(s,s2));
                    } else {
                        siguiente = fusiona(c.getListaFalsa(),s);
                    }
                    retorno = siguiente;                   
                }            
                RESULT = retorno;                        

            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN M STATEMENTS N M DECISION_PRIME 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
                        ArrayList<Integer> retorno = null;
                        if (c != null){
                            ArrayList<Integer> siguiente = new ArrayList<>();                     
                            cuadruplos.completa(c.getListaVerdadera(), m.getNum());  
                            System.out.println();
                            if (s2 != null){                        
                                cuadruplos.completa(c.getListaFalsa(), m2.getNum());
                                siguiente = fusiona(n,fusiona(s,s2));
                            } else {
                                siguiente = fusiona(c.getListaFalsa(),s);
                            }
                            retorno = siguiente;
                            
                        }                    
                        RESULT = retorno;

                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECISION_PRIME ::= TK_ELSE M STATEMENTS DECISION_PRIME 
            {
              ArrayList<Integer> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        ArrayList<Integer> siguiente = new ArrayList<>(); 
                        siguiente = fusiona(s,s2);
                        RESULT = siguiente;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		
                        RESULT= null; 
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACIONES ::= TK_ID TK_IGUAL VALOR TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPARIT ::= OPARIT TK_OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                String tipo = "INTEGER";
                String temp = nuevoTemp();
                cuadruplos.addCuadruplo(oPa,v.getValor(),o.getValor(),temp);
                RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPARIT ::= OPARIT TK_MULTI VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                String tipo;
                String temp = nuevoTemp();
                tipo = "INTEGER";
                cuadruplos.addCuadruplo(oM,v.getValor(),o.getValor(),temp);
                RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPARIT ::= TK_PARENTESISI OPARIT TK_PARENTESISD 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                RESULT = o;
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPARIT ::= VALOR TK_OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
               String tipo;
               String temp = nuevoTemp();
               tipo = "INTEGER";                       
               cuadruplos.addCuadruplo(oPa,v.getValor(),v2.getValor(),temp);
               RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPARIT ::= VALOR TK_MULTI VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
               String tipo;
               String temp = nuevoTemp();
               tipo = "INTEGER";                       
               cuadruplos.addCuadruplo(oM,v.getValor(),v2.getValor(),temp);
               RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE ::= TK_WHILE TK_PARENTESISI M CONDICION TK_PARENTESISD TK_LOOP M STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Marcador m1 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            ArrayList<Integer> retorno = null;
             if (c != null){
                ArrayList<Integer> siguiente = new ArrayList<>();                     
                cuadruplos.completa(c.getListaVerdadera(), m2.getNum());  
                siguiente = c.getListaFalsa();
                String num = Integer.toString(m1.getNum());
                cuadruplos.addCuadruplo("GOTO",num);
                cuadruplos.completa(s,m1.getNum());
                retorno = siguiente;                   
        }              
            RESULT  = retorno;
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("WHILE",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONES ::= ID 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACIONES ::= FUNCTION DECLARACIONES 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACIONES ::= PROCEDURE_P DECLARACIONES 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACIONES ::= 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ID ::= TK_ID TK_COMA ID 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ID",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= TK_INTEGER 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS ::= TK_FLOAT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CALL ::= TK_ID TK_PARENTESISI LISTA_ARGS TK_PARENTESISD TK_PUNTOCOMA 
            {
              Objeto2 RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		
        tipoCall =" ";
        cuadruplos.addCuadruplo("CALL", d.toString());
        RESULT = new Objeto2(tipoCall, d.toString());
    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CALL",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_ARGS ::= VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            if(!v.getTipo().equalsIgnoreCase("INTEGER")){
                errores.add("ERROR: "+v.getValor()+ " No es de tipo integer en el argumento de la funcion");
            }
            else if (cantidadVecesExiste(arbol, v.getValor(), 0)>1){
                errores.add("ERROR: "+v.getValor()+ " ha sido declarado mas de una vez");
            }
            else {
                cuadruplos.addCuadruplo("PARAM",v.getValor());
                tipoCall+=v.getTipo()+" ";
            }
        
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
  
                if(!v.getTipo().equalsIgnoreCase("INTEGER")){
                    errores.add("ERROR: "+v.getValor()+ " No es de tipo integer en el argumento de la funcion");
                }
                else if (cantidadVecesExiste(arbol, v.getValor(), 0)>1){
                    errores.add("ERROR: "+v.getValor()+ " ha sido declarado mas de una vez");
                }
                else {
                    cuadruplos.addCuadruplo("PARAM",v.getValor());
                    tipoCall+=v.getTipo()+", ";
                }
        
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_ARGS ::= VALOR NT$0 TK_COMA LISTA_ARGS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_ARGS ::= 
            {
              Nodo RESULT =null;
		 System.out.println("Este es tipo call"+tipoCall); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            cuadruplos.addCuadruplo("PUT","STRING",s);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PUT",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PUT ::= TK_PUT TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            cuadruplos.addCuadruplo("PUT","ID", id.toString());
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PUT",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            cuadruplos.addCuadruplo("GET","ID", d.toString());
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("GET",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOOP ::= TK_LOOP M STATEMENTS TK_EXIT TK_WHEN M CONDICION TK_PUNTOCOMA TK_ENDLOOP TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)).right;
		Marcador m1 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		       
            ArrayList<Integer> retorno = null;
             if (c != null){
                ArrayList<Integer> siguiente = new ArrayList<>();                     
                cuadruplos.completa(c.getListaFalsa(), m1.getNum());  
                siguiente = c.getListaVerdadera();
                cuadruplos.completa(c.getListaVerdadera(),m2.getNum());
                retorno = siguiente;   
            }
            RESULT = retorno;
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("LOOP",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-14)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= TK_FOR M CONDICION_FOR TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		ArrayList<Integer> c = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> p = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            ArrayList<Integer> siguiente = new ArrayList<>(); 
            cuadruplos.completa(p, cuadruplos.siguienteCuad());
            cuadruplos.addCuadruplo("+",id_for,"1",id_for);
            String num = Integer.toString(m.getNum());
            cuadruplos.addCuadruplo("GOTO",num);
            siguiente=c;
            RESULT = siguiente;

        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FOR",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICION_FOR ::= TK_ID TK_IN TK_ID TK_PUNTO TK_PUNTO TK_DIGITO 
            {
              ArrayList<Integer> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
        ArrayList<Integer> siguiente = new ArrayList<>(); 
        cuadruplos.addCuadruplo("=", id1.toString(), id2.toString());
        siguiente = creaLista(cuadruplos.siguienteCuad());
        cuadruplos.addCuadruplo("IF_FOR>", id1.toString(), d.toString(), Integer.toString(cuadruplos.siguienteCuad()+1));
        id_for = id1.toString();
        RESULT = siguiente;

    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION_FOR",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M ::= 
            {
              Marcador RESULT =null;
		 RESULT = new Marcador(cuadruplos.siguienteCuad(),0); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("M",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		  ArrayList<Integer> retVal = creaLista(cuadruplos.siguienteCuad());  
                    cuadruplos.addCuadruplo("GOTO","-");
                    RESULT = retVal; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("N",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
