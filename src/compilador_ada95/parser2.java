
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parser2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\014\000\002\015" +
    "\014\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\005\000" +
    "\002\024\004\000\002\024\002\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\013\004\000\002\014\010" +
    "\000\002\014\007\000\002\014\003\000\002\027\006\000" +
    "\002\027\006\000\002\027\003\000\002\030\005\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\022\014\000\002\023\014\000" +
    "\002\023\006\000\002\023\004\000\002\003\006\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\025\014\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\002\000\002\011\005\000\002\011\005\000\002" +
    "\006\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\003\000\002\006\005\000\002\006\003\000\002\006\005" +
    "\000\002\007\007\000\002\007\007\000\002\010\007\000" +
    "\002\026\014\000\002\012\021\000\002\004\012\000\002" +
    "\020\002\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\025\005\001\002\000\004\002\304\001" +
    "\002\000\004\020\006\001\002\000\004\044\010\001\002" +
    "\000\004\026\030\001\002\000\006\020\013\045\011\001" +
    "\002\000\006\026\uffed\042\uffed\001\002\000\006\026\ufff0" +
    "\042\ufff0\001\002\000\004\052\014\001\002\000\010\034" +
    "\020\035\017\036\016\001\002\000\010\005\022\006\021" +
    "\007\023\001\002\000\010\005\ufff1\006\ufff1\007\ufff1\001" +
    "\002\000\010\005\ufff2\006\ufff2\007\ufff2\001\002\000\010" +
    "\005\ufff3\006\ufff3\007\ufff3\001\002\000\010\026\ufff4\045" +
    "\ufff4\046\ufff4\001\002\000\010\026\ufff6\045\ufff6\046\ufff6" +
    "\001\002\000\010\026\ufff5\045\ufff5\046\ufff5\001\002\000" +
    "\006\045\025\046\026\001\002\000\006\026\uffee\042\uffee" +
    "\001\002\000\006\020\013\045\011\001\002\000\006\026" +
    "\uffef\042\uffef\001\002\000\012\020\037\025\034\027\uffd1" +
    "\041\035\001\002\000\004\027\277\001\002\000\006\027" +
    "\uffd5\046\275\001\002\000\012\020\037\025\034\027\uffd1" +
    "\041\035\001\002\000\004\020\263\001\002\000\004\020" +
    "\057\001\002\000\012\020\037\025\034\027\uffd1\041\035" +
    "\001\002\000\006\047\041\052\040\001\002\000\010\005" +
    "\044\006\043\007\046\001\002\000\004\020\037\001\002" +
    "\000\006\027\uffd0\046\uffd0\001\002\000\010\004\053\027" +
    "\uffce\046\uffce\001\002\000\010\004\051\027\uffcb\046\uffcb" +
    "\001\002\000\006\027\uffcf\046\uffcf\001\002\000\010\004" +
    "\047\027\uffc9\046\uffc9\001\002\000\004\033\050\001\002" +
    "\000\006\027\uffc8\046\uffc8\001\002\000\004\022\052\001" +
    "\002\000\006\027\uffca\046\uffca\001\002\000\006\050\054" +
    "\051\055\001\002\000\006\027\uffcc\046\uffcc\001\002\000" +
    "\006\027\uffcd\046\uffcd\001\002\000\004\027\uffd3\001\002" +
    "\000\004\044\010\001\002\000\004\042\061\001\002\000" +
    "\010\005\022\006\021\007\023\001\002\000\004\026\063" +
    "\001\002\000\012\020\037\025\034\027\uffd1\041\035\001" +
    "\002\000\004\027\065\001\002\000\022\010\072\013\075" +
    "\015\103\020\074\031\100\032\071\042\ufff7\055\077\001" +
    "\002\000\036\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\020\uffc1\024\uffc1\030\uffc1\031\uffc1\032\uffc1\037" +
    "\uffc1\042\uffc1\055\uffc1\001\002\000\036\010\072\011\ufff7" +
    "\012\ufff7\013\075\014\ufff7\015\103\020\074\024\ufff7\030" +
    "\ufff7\031\100\032\071\037\ufff7\042\ufff7\055\077\001\002" +
    "\000\036\010\072\011\ufff7\012\ufff7\013\075\014\ufff7\015" +
    "\103\020\074\024\ufff7\030\ufff7\031\100\032\071\037\ufff7" +
    "\042\ufff7\055\077\001\002\000\004\044\253\001\002\000" +
    "\004\044\222\001\002\000\036\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\020\uffc1\024\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\037\uffc1\042\uffc1\055\uffc1\001\002\000\004" +
    "\004\215\001\002\000\022\010\uffc1\013\uffc1\015\uffc1\020" +
    "\uffc1\031\uffc1\032\uffc1\037\uffc1\055\uffc1\001\002\000\036" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020" +
    "\uffc1\024\uffc1\030\uffc1\031\uffc1\032\uffc1\037\uffc1\042\uffc1" +
    "\055\uffc1\001\002\000\004\044\173\001\002\000\004\044" +
    "\164\001\002\000\036\010\072\011\ufff7\012\ufff7\013\075" +
    "\014\ufff7\015\103\020\074\024\ufff7\030\ufff7\031\100\032" +
    "\071\037\ufff7\042\ufff7\055\077\001\002\000\036\010\072" +
    "\011\ufff7\012\ufff7\013\075\014\ufff7\015\103\020\074\024" +
    "\ufff7\030\ufff7\031\100\032\071\037\ufff7\042\ufff7\055\077" +
    "\001\002\000\004\044\113\001\002\000\004\042\105\001" +
    "\002\000\004\020\106\001\002\000\004\046\107\001\002" +
    "\000\004\030\110\001\002\000\004\020\111\001\002\000" +
    "\004\046\112\001\002\000\012\020\uffc3\025\uffc3\027\uffc3" +
    "\041\uffc3\001\002\000\016\020\uffc1\022\uffc1\043\uffc1\044" +
    "\uffc1\050\uffc1\051\uffc1\001\002\000\016\020\121\022\124" +
    "\043\125\044\115\050\122\051\120\001\002\000\016\020" +
    "\121\022\124\043\125\044\115\050\122\051\120\001\002" +
    "\000\012\004\154\016\146\017\147\021\155\001\002\000" +
    "\022\004\uffe1\016\143\017\144\021\uffe1\045\uffe1\046\uffe1" +
    "\053\uffe1\054\uffe1\001\002\000\022\004\uffe4\016\uffe4\017" +
    "\uffe4\021\uffe4\045\uffe4\046\uffe4\053\uffe4\054\uffe4\001\002" +
    "\000\022\004\uffe3\016\uffe3\017\uffe3\021\uffe3\045\uffe3\046" +
    "\uffe3\053\uffe3\054\uffe3\001\002\000\022\004\uffe5\016\uffe5" +
    "\017\uffe5\021\uffe5\045\uffe5\046\uffe5\053\uffe5\054\uffe5\001" +
    "\002\000\012\045\uffea\046\uffea\053\136\054\135\001\002" +
    "\000\022\004\uffe6\016\uffe6\017\uffe6\021\uffe6\045\uffe6\046" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\022\004\uffe2\016\uffe2" +
    "\017\uffe2\021\uffe2\045\uffe2\046\uffe2\053\uffe2\054\uffe2\001" +
    "\002\000\004\045\127\001\002\000\004\013\130\001\002" +
    "\000\022\010\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1\031" +
    "\uffc1\032\uffc1\055\uffc1\001\002\000\022\010\072\013\075" +
    "\014\ufff7\015\103\020\074\031\100\032\071\055\077\001" +
    "\002\000\004\014\133\001\002\000\004\046\134\001\002" +
    "\000\036\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\020\uffd6\024\uffd6\030\uffd6\031\uffd6\032\uffd6\037\uffd6" +
    "\042\uffd6\055\uffd6\001\002\000\016\020\uffc1\022\uffc1\043" +
    "\uffc1\044\uffc1\050\uffc1\051\uffc1\001\002\000\016\020\uffc1" +
    "\022\uffc1\043\uffc1\044\uffc1\050\uffc1\051\uffc1\001\002\000" +
    "\016\020\121\022\124\043\125\044\115\050\122\051\120" +
    "\001\002\000\006\045\uffec\046\uffec\001\002\000\016\020" +
    "\121\022\124\043\125\044\115\050\122\051\120\001\002" +
    "\000\006\045\uffeb\046\uffeb\001\002\000\016\020\121\022" +
    "\124\043\125\044\115\050\122\051\120\001\002\000\016" +
    "\020\121\022\124\043\125\044\115\050\122\051\120\001" +
    "\002\000\022\004\uffda\016\uffda\017\uffda\021\uffda\045\uffda" +
    "\046\uffda\053\uffda\054\uffda\001\002\000\016\020\121\022" +
    "\124\043\125\044\115\050\122\051\120\001\002\000\016" +
    "\020\121\022\124\043\125\044\115\050\122\051\120\001" +
    "\002\000\022\004\uffd7\016\uffd7\017\uffd7\021\uffd7\045\uffd7" +
    "\046\uffd7\053\uffd7\054\uffd7\001\002\000\022\004\uffd8\016" +
    "\uffd8\017\147\021\uffd8\045\uffd8\046\uffd8\053\uffd8\054\uffd8" +
    "\001\002\000\022\004\uffdb\016\uffdb\017\147\021\uffdb\045" +
    "\uffdb\046\uffdb\053\uffdb\054\uffdb\001\002\000\016\020\121" +
    "\022\124\043\125\044\115\050\122\051\120\001\002\000" +
    "\016\020\uffe7\022\uffe7\043\uffe7\044\uffe7\050\uffe7\051\uffe7" +
    "\001\002\000\016\020\uffe8\022\uffe8\043\uffe8\044\uffe8\050" +
    "\uffe8\051\uffe8\001\002\000\016\016\146\017\147\045\uffe9" +
    "\046\uffe9\053\uffe9\054\uffe9\001\002\000\006\016\146\017" +
    "\147\001\002\000\010\016\143\017\144\045\161\001\002" +
    "\000\022\004\uffd9\016\uffd9\017\uffd9\021\uffd9\045\uffd9\046" +
    "\uffd9\053\uffd9\054\uffd9\001\002\000\020\011\ufffc\012\ufffc" +
    "\014\ufffc\024\ufffc\030\ufffc\037\ufffc\042\ufffc\001\002\000" +
    "\020\011\ufffa\012\ufffa\014\ufffa\024\ufffa\030\ufffa\037\ufffa" +
    "\042\ufffa\001\002\000\006\020\166\043\165\001\002\000" +
    "\004\045\171\001\002\000\004\045\167\001\002\000\004" +
    "\046\170\001\002\000\036\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\020\uffc6\024\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\037\uffc6\042\uffc6\055\uffc6\001\002\000\004\046" +
    "\172\001\002\000\036\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\020\uffc7\024\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\037\uffc7\042\uffc7\055\uffc7\001\002\000\016\020\121" +
    "\022\124\043\125\044\115\050\122\051\120\001\002\000" +
    "\004\045\175\001\002\000\004\013\176\001\002\000\022" +
    "\010\072\013\075\014\ufff7\015\103\020\074\031\100\032" +
    "\071\055\077\001\002\000\004\014\200\001\002\000\004" +
    "\046\201\001\002\000\036\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\020\uffc2\024\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\037\uffc2\042\uffc2\055\uffc2\001\002\000\036\010" +
    "\072\011\ufff7\012\ufff7\013\075\014\ufff7\015\103\020\074" +
    "\024\ufff7\030\ufff7\031\100\032\071\037\ufff7\042\ufff7\055" +
    "\077\001\002\000\020\011\ufffe\012\ufffe\014\ufffe\024\ufffe" +
    "\030\ufffe\037\ufffe\042\ufffe\001\002\000\022\010\072\013" +
    "\075\015\103\020\074\031\100\032\071\037\ufff7\055\077" +
    "\001\002\000\004\037\206\001\002\000\004\040\207\001" +
    "\002\000\016\020\uffc1\022\uffc1\043\uffc1\044\uffc1\050\uffc1" +
    "\051\uffc1\001\002\000\016\020\121\022\124\043\125\044" +
    "\115\050\122\051\120\001\002\000\004\046\212\001\002" +
    "\000\004\014\213\001\002\000\004\046\214\001\002\000" +
    "\036\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\020\uffc4\024\uffc4\030\uffc4\031\uffc4\032\uffc4\037\uffc4\042" +
    "\uffc4\055\uffc4\001\002\000\016\020\121\022\124\043\125" +
    "\044\115\050\122\051\120\001\002\000\010\016\146\017" +
    "\147\046\217\001\002\000\036\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\020\uffdc\024\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\037\uffdc\042\uffdc\055\uffdc\001\002\000\036" +
    "\010\072\011\ufff7\012\ufff7\013\075\014\ufff7\015\103\020" +
    "\074\024\ufff7\030\ufff7\031\100\032\071\037\ufff7\042\ufff7" +
    "\055\077\001\002\000\020\011\ufff9\012\ufff9\014\ufff9\024" +
    "\ufff9\030\ufff9\037\ufff9\042\ufff9\001\002\000\016\020\121" +
    "\022\124\043\125\044\115\050\122\051\120\001\002\000" +
    "\004\045\224\001\002\000\004\023\225\001\002\000\026" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\020\uffc1\024" +
    "\uffc1\031\uffc1\032\uffc1\055\uffc1\001\002\000\026\010\072" +
    "\011\ufff7\012\ufff7\013\075\015\103\020\074\024\ufff7\031" +
    "\100\032\071\055\077\001\002\000\010\011\uffc0\012\uffc0" +
    "\024\uffc0\001\002\000\010\011\uffc1\012\uffc1\024\uffc1\001" +
    "\002\000\010\011\235\012\232\024\233\001\002\000\004" +
    "\044\242\001\002\000\004\046\241\001\002\000\036\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0" +
    "\024\uffe0\030\uffe0\031\uffe0\032\uffe0\037\uffe0\042\uffe0\055" +
    "\uffe0\001\002\000\026\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\015\uffc1\020\uffc1\024\uffc1\031\uffc1\032\uffc1\055\uffc1\001" +
    "\002\000\026\010\072\011\ufff7\012\ufff7\013\075\015\103" +
    "\020\074\024\ufff7\031\100\032\071\055\077\001\002\000" +
    "\010\011\235\012\232\024\233\001\002\000\036\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\020\uffde\024" +
    "\uffde\030\uffde\031\uffde\032\uffde\037\uffde\042\uffde\055\uffde" +
    "\001\002\000\036\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\020\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\037\uffdd\042\uffdd\055\uffdd\001\002\000\016\020\121\022" +
    "\124\043\125\044\115\050\122\051\120\001\002\000\004" +
    "\045\244\001\002\000\004\023\245\001\002\000\026\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\020\uffc1\024\uffc1" +
    "\031\uffc1\032\uffc1\055\uffc1\001\002\000\026\010\072\011" +
    "\ufff7\012\ufff7\013\075\015\103\020\074\024\ufff7\031\100" +
    "\032\071\055\077\001\002\000\010\011\uffc0\012\uffc0\024" +
    "\uffc0\001\002\000\010\011\uffc1\012\uffc1\024\uffc1\001\002" +
    "\000\010\011\235\012\232\024\233\001\002\000\036\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf" +
    "\024\uffdf\030\uffdf\031\uffdf\032\uffdf\037\uffdf\042\uffdf\055" +
    "\uffdf\001\002\000\004\020\254\001\002\000\004\045\255" +
    "\001\002\000\004\046\256\001\002\000\036\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\024\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\037\uffc5\042\uffc5\055\uffc5\001" +
    "\002\000\020\011\ufff8\012\ufff8\014\ufff8\024\ufff8\030\ufff8" +
    "\037\ufff8\042\ufff8\001\002\000\020\011\ufffb\012\ufffb\014" +
    "\ufffb\024\ufffb\030\ufffb\037\ufffb\042\ufffb\001\002\000\036" +
    "\010\072\011\ufff7\012\ufff7\013\075\014\ufff7\015\103\020" +
    "\074\024\ufff7\030\ufff7\031\100\032\071\037\ufff7\042\ufff7" +
    "\055\077\001\002\000\020\011\ufffd\012\ufffd\014\ufffd\024" +
    "\ufffd\030\ufffd\037\ufffd\042\ufffd\001\002\000\004\044\010" +
    "\001\002\000\004\026\265\001\002\000\012\020\037\025" +
    "\034\027\uffd1\041\035\001\002\000\004\027\267\001\002" +
    "\000\022\010\072\013\075\015\103\020\074\030\ufff7\031" +
    "\100\032\071\055\077\001\002\000\004\030\271\001\002" +
    "\000\004\020\272\001\002\000\004\046\273\001\002\000" +
    "\012\020\uffff\025\uffff\027\uffff\041\uffff\001\002\000\004" +
    "\027\uffd2\001\002\000\012\020\037\025\034\027\uffd1\041" +
    "\035\001\002\000\004\027\uffd4\001\002\000\022\010\072" +
    "\013\075\015\103\020\074\030\ufff7\031\100\032\071\055" +
    "\077\001\002\000\004\030\301\001\002\000\004\020\302" +
    "\001\002\000\004\046\303\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\006\001\001\000\002\001\001" +
    "\000\004\014\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\014\001\001\000\004" +
    "\017\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\026\001\001\000\002\001\001\000\012\005\030\011\031" +
    "\012\035\015\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\273\011\031\012\035\015\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\055\011" +
    "\031\012\035\015\032\001\001\000\002\001\001\000\004" +
    "\006\044\001\001\000\004\011\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\057\001\001\000\002\001\001\000\004\017\061\001\001" +
    "\000\002\001\001\000\012\005\063\011\031\012\035\015" +
    "\032\001\001\000\002\001\001\000\022\003\101\004\067" +
    "\007\066\010\100\022\075\024\103\025\065\026\072\001" +
    "\001\000\004\020\260\001\001\000\022\003\101\004\067" +
    "\007\066\010\100\022\075\024\257\025\065\026\072\001" +
    "\001\000\022\003\101\004\067\007\066\010\100\022\075" +
    "\024\256\025\065\026\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\217\001\001\000\002\001\001" +
    "\000\004\020\203\001\001\000\004\020\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\101\004\067" +
    "\007\066\010\100\022\075\024\162\025\065\026\072\001" +
    "\001\000\022\003\101\004\067\007\066\010\100\022\075" +
    "\024\161\025\065\026\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\113\001\001\000\012\027\125\030\122" +
    "\032\115\033\116\001\001\000\006\032\156\033\157\001" +
    "\001\000\004\031\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\130\001\001\000\022\003" +
    "\101\004\067\007\066\010\100\022\075\024\131\025\065" +
    "\026\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\140\001\001\000\004\020\136" +
    "\001\001\000\012\027\137\030\122\032\115\033\116\001" +
    "\001\000\002\001\001\000\012\027\141\030\122\032\115" +
    "\033\116\001\001\000\002\001\001\000\006\032\151\033" +
    "\116\001\001\000\006\032\144\033\116\001\001\000\002" +
    "\001\001\000\006\032\150\033\116\001\001\000\006\032" +
    "\147\033\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\155\033\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\027\173\030\122" +
    "\032\115\033\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\101\004\067\007\066\010\100\022\075" +
    "\024\176\025\065\026\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\101\004\067" +
    "\007\066\010\100\022\075\024\202\025\065\026\072\001" +
    "\001\000\002\001\001\000\022\003\101\004\067\007\066" +
    "\010\100\022\075\024\204\025\065\026\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\207\001\001" +
    "\000\012\027\210\030\122\032\115\033\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\215\033\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\101\004\067\007\066" +
    "\010\100\022\075\024\220\025\065\026\072\001\001\000" +
    "\002\001\001\000\012\027\222\030\122\032\115\033\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\225\001\001\000\022\003\101\004\067\007\066\010\100" +
    "\022\075\024\226\025\065\026\072\001\001\000\004\021" +
    "\227\001\001\000\004\020\230\001\001\000\004\023\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\235\001\001\000\022\003\101\004\067" +
    "\007\066\010\100\022\075\024\236\025\065\026\072\001" +
    "\001\000\004\023\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\242\030\122\032\115\033\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\245" +
    "\001\001\000\022\003\101\004\067\007\066\010\100\022" +
    "\075\024\246\025\065\026\072\001\001\000\004\021\247" +
    "\001\001\000\004\020\250\001\001\000\004\023\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\101\004\067\007\066\010\100" +
    "\022\075\024\261\025\065\026\072\001\001\000\002\001" +
    "\001\000\004\013\263\001\001\000\002\001\001\000\012" +
    "\005\265\011\031\012\035\015\032\001\001\000\002\001" +
    "\001\000\022\003\101\004\067\007\066\010\100\022\075" +
    "\024\267\025\065\026\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\275\011\031\012\035\015\032\001" +
    "\001\000\002\001\001\000\022\003\101\004\067\007\066" +
    "\010\100\022\075\024\277\025\065\026\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ArrayList errores = new ArrayList();
    Nodo arbol;
    Cuadruplo cuadruplos = new Cuadruplo();
    public int cantTemp = 0;


    public void setErrores(ArrayList errores){
        this.errores = errores;
    }


    public void setArbol(Nodo arbol){
        this.arbol = arbol;
    }

    public String nuevoTemp(){
        String temp = "t"+ Integer.toString(cantTemp);
        cantTemp++;
        return temp;
    }   

    public ArrayList<Integer> creaLista(int indice){
        ArrayList<Integer> retVal = new ArrayList<>();
        retVal.add(indice);
        return retVal;
    }

    public ArrayList<Integer> fusiona(ArrayList<Integer> lista1, ArrayList<Integer> lista2){
        ArrayList<Integer> retVal = new ArrayList<>();
        if (lista1 != null){
            for(int i = 0; i < lista1.size();i++){
                retVal.add(lista1.get(i));
            }
        }       
        if (lista2 != null){
            for(int i = 0; i < lista2.size();i++){
                retVal.add(lista2.get(i));
            }
        }   
     
        return retVal;
        
    }

    public boolean existe(Nodo nodo, String nombre, Boolean estado){
    
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            existe(nodo.getHijos().get(i), nombre, estado);
            if(nodo.getHijos().get(i).getEtiqueta().equals(nombre)){
                estado=true;
            }
        }
        return estado;
    }

     public boolean tipoAdecuado(Nodo nodo, String nombre, Boolean estado){
    
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            existe(nodo.getHijos().get(i), nombre, estado);
            if(nodo.getHijos().get(i).getEtiqueta().equals(nombre) && nodo.getHijos().get(i).getTipo().equals("Integer") ){
                estado=true;
            }
        }
        return estado;
    }


     public int existe(Nodo nodo, String nombre, int contador){
    
        for (int i = 0; i <nodo.getHijos().size(); i++) {
            existe(nodo.getHijos().get(i), nombre, contador);
            if(nodo.getHijos().get(i).getEtiqueta().equals(nombre)){
                contador++;
            }
        }
        return contador;
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		
                System.out.println("-------Cuadruplos---------");           
                cuadruplos.imprimirCuadruplos();
                
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= DECISION M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> d = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    cuadruplos.completa(d,m.getNum());
                    RESULT = d; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENTS ::= WHILE M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> w = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                    cuadruplos.completa(w,m.getNum());
                    RESULT = w; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENTS ::= ASIGNACIONES STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENTS ::= PUT STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= GET STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		 RESULT = null; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= LOOP M STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		                 
                        cuadruplos.completa(l,m.getNum());
                        RESULT = l;  
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= FOR STATEMENTS 
            {
              ArrayList<Integer> RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= 
            {
              ArrayList<Integer> RESULT =null;
		 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("STATEMENTS",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONDICION ::= CONDICIONP TK_AND M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              
                Condiciones retorno = null;
                if (c != null && c1 != null){
                    cuadruplos.completa(c.getListaVerdadera(),m.getNum());
                    ArrayList<Integer> listaFalsa = fusiona(c.getListaFalsa(),c1.getListaFalsa());                    
                    retorno = new Condiciones(c1.getListaVerdadera(),listaFalsa);
                }
                RESULT = retorno;                    
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONDICION ::= CONDICIONP TK_OR M CONDICION 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c1 = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 
                Condiciones retorno = null;
                if (c != null && c1 != null){
                    cuadruplos.completa(c.getListaFalsa(),m.getNum());
                    ArrayList<Integer> listaVerdadera = fusiona(c.getListaVerdadera(),c1.getListaVerdadera());
                    retorno = new Condiciones(listaVerdadera,c1.getListaFalsa());
                }                                       
                RESULT = retorno;
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICION ::= CONDICIONP 
            {
              Condiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                RESULT = c;
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Condiciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    Condiciones e;
                    if (o.equals("=")){
                        //cuadruplos
                        e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                        cuadruplos.addCuadruplo("IF=",v.getValor(),v2.getValor(),"");
                        cuadruplos.addCuadruplo("GOTO","");
                     
                    } else {
                        //cuadruplos
                        e = new Condiciones(creaLista(cuadruplos.siguienteCuad()), creaLista(cuadruplos.siguienteCuad() + 1));
                        cuadruplos.addCuadruplo("IF"+o,v.getValor(),v2.getValor(),"");
                        cuadruplos.addCuadruplo("GOTO","");                           
                    }
                    RESULT = e;
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("CONDICIONP",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCONDICION ::= TK_OPREL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		 RESULT=o.toString(); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCONDICION ::= TK_IGUAL 
            {
              String RESULT =null;
		 RESULT="="; 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPCONDICION",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= TK_DIGITO 
            {
              Objeto2 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = new Objeto2("INTEGER",i);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= TK_TRUE 
            {
              Objeto2 RESULT =null;
		
            RESULT = new Objeto2("BOOLEAN","TRUE");
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= TK_FALSE 
            {
              Objeto2 RESULT =null;
		
            RESULT = new Objeto2("BOOLEAN","FALSE");
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= TK_ID 
            {
              Objeto2 RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = new Objeto2("INTEGER",d);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= TK_STRING 
            {
              Objeto2 RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = new Objeto2("STRING",s);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= OPARIT 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
            RESULT = o;
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECISION ::= TK_IF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN M STATEMENTS N M DECISION_PRIME 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                  
                ArrayList<Integer> retorno = null;
                if (c != null){
                    ArrayList<Integer> siguiente = new ArrayList<>();                     
                    cuadruplos.completa(c.getListaVerdadera(), m.getNum());
                    if (s2 != null){
                        cuadruplos.completa(c.getListaFalsa(), m2.getNum());
                        siguiente = fusiona(n,fusiona(s,s2));
                    } else {
                        siguiente = fusiona(c.getListaFalsa(),s);
                    }
                    retorno = siguiente;                   
                }            
                RESULT = retorno;                        

            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN M STATEMENTS N M DECISION_PRIME 
            {
              ArrayList<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> n = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                    
                        ArrayList<Integer> retorno = null;
                        if (c != null){
                            ArrayList<Integer> siguiente = new ArrayList<>();                     
                            cuadruplos.completa(c.getListaVerdadera(), m.getNum());  
                            System.out.println();
                            if (s2 != null){                        
                                cuadruplos.completa(c.getListaFalsa(), m2.getNum());
                                siguiente = fusiona(n,fusiona(s,s2));
                            } else {
                                
                                siguiente = fusiona(c.getListaFalsa(),s);
                            }
                            retorno = siguiente;
                            
                        }                    
                        RESULT = retorno;

                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECISION_PRIME ::= TK_ELSE M STATEMENTS DECISION_PRIME 
            {
              ArrayList<Integer> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Marcador m = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		ArrayList<Integer> s2 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                        ArrayList<Integer> siguiente = new ArrayList<>(); 
                        siguiente = fusiona(s,s2);
                        RESULT = siguiente;
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		
                        RESULT= null; 
                    
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACIONES ::= TK_ID TK_IGUAL VALOR TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPARIT ::= OPARIT TK_OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                String tipo = "INTEGER";
                String temp = nuevoTemp();
                cuadruplos.addCuadruplo(oPa,v.getValor(),o.getValor(),temp);
                RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPARIT ::= OPARIT TK_MULTI VALOR 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
                String tipo;
                String temp = nuevoTemp();
                tipo = "INTEGER";
                cuadruplos.addCuadruplo(oM,v.getValor(),o.getValor(),temp);
                RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPARIT ::= TK_PARENTESISI OPARIT TK_PARENTESISD 
            {
              Objeto2 RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Objeto2 o = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
                RESULT = o;
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPARIT ::= VALOR TK_OPADICION VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oPaleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oParight = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oPa = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
               String tipo;
               String temp = nuevoTemp();
               tipo = "INTEGER";                       
               cuadruplos.addCuadruplo(oPa,v.getValor(),v2.getValor(),temp);
               RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPARIT ::= VALOR TK_MULTI VALOR 
            {
              Objeto2 RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Objeto2 v = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int oMleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int oMright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String oM = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Objeto2 v2 = (Objeto2)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
               String tipo;
               String temp = nuevoTemp();
               tipo = "INTEGER";                       
               cuadruplos.addCuadruplo(oM,v.getValor(),v2.getValor(),temp);
               RESULT = new Objeto2(tipo,temp);
            
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("OPARIT",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= TK_WHILE TK_PARENTESISI M CONDICION TK_PARENTESISD TK_LOOP M STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Marcador m1 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-6)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            ArrayList<Integer> retorno = null;
             if (c != null){
                ArrayList<Integer> siguiente = new ArrayList<>();                     
                cuadruplos.completa(c.getListaVerdadera(), m2.getNum());  
                siguiente = c.getListaFalsa();
                String num = Integer.toString(m1.getNum());
                cuadruplos.addCuadruplo("GOTO",num);
                cuadruplos.completa(s,m1.getNum());
                retorno = siguiente;                   
        }              
            RESULT  = retorno;
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("WHILE",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACIONES ::= ID 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACIONES ::= FUNCTION DECLARACIONES 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONES ::= PROCEDURE_P DECLARACIONES 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACIONES ::= 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID ::= TK_ID TK_COMA ID 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= TK_INTEGER 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= TK_FLOAT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            cuadruplos.addCuadruplo("PUT","STRING",s);
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PUT ::= TK_PUT TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		
            cuadruplos.addCuadruplo("PUT","ID", id.toString());
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOOP ::= TK_LOOP M STATEMENTS TK_EXIT TK_WHEN M CONDICION TK_PUNTOCOMA TK_ENDLOOP TK_PUNTOCOMA 
            {
              ArrayList<Integer> RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-8)).right;
		Marcador m1 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		ArrayList<Integer> s = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Marcador m2 = (Marcador)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Condiciones c = (Condiciones)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		       
            ArrayList<Integer> retorno = null;
             if (c != null){
                ArrayList<Integer> siguiente = new ArrayList<>();                     
                cuadruplos.completa(c.getListaFalsa(), m1.getNum());  
                siguiente = c.getListaVerdadera();
                cuadruplos.completa(c.getListaVerdadera(),m2.getNum());
                retorno = siguiente;   
            }
            RESULT = retorno;
        
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("LOOP",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FUNCTION",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-14)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FOR ::= TK_FOR TK_PARENTESISI CONDICION TK_PARENTESISD TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // M ::= 
            {
              Marcador RESULT =null;
		 RESULT = new Marcador(cuadruplos.siguienteCuad(),0); 
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("M",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N ::= 
            {
              ArrayList<Integer> RESULT =null;
		  ArrayList<Integer> retVal = creaLista(cuadruplos.siguienteCuad());  
                    cuadruplos.addCuadruplo("GOTO","");
                    RESULT = retVal; 
                
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("N",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
