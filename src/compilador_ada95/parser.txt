package compilador_ada95;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

parser code {:

// AST
    ArrayList errores = new ArrayList();
    public Nodo raiz;    
    public int cont = 0;
    String tipoActual = " ";
    int offsetActual = 0;
    ArrayList <String> identificadores = new ArrayList();
    String tipoPrincipal=" ";
    

public void syntax_error (Symbol s){
    errores.add("Esta es Linea: " + (s.left) + " y Columna: " + (s.right));
}
public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido, por favor revise la linea: " + (s.left + 1) + " y columna: " + (s.right + 1));
    }

:} ;

terminal  TK_IGUAL, TK_INTEGER, TK_BOOLEAN, TK_FLOAT, TK_IF, TK_ELSE, TK_ELSEIF;
terminal  TK_LOOP, TK_ENDLOOP, TK_WHILE, TK_OPADICION, TK_MULTI, TK_ID, TK_OPREL, TK_DIGITO, TK_THEN, TK_ENDIF;
terminal  TK_PROCEDURE, TK_IS, TK_BEGIN, TK_END, TK_PUT, TK_GET;
terminal  TK_DIGITOFLOAT, TK_IN, TK_OUT, TK_INOUT, TK_EXIT, TK_WHEN, TK_FUNCTION, TK_RETURN, TK_STRING;
terminal  TK_PARENTESISI, TK_PARENTESISD,TK_PUNTOCOMA, TK_COMA,TK_TRUE, TK_FALSE, TK_COLON, TK_AND, TK_OR, TK_FOR;

non terminal Nodo PROCEDURE;
non terminal Nodo PROCEDURE_PRIME, EXPRESIONES, EP, DECISION, DECISION_PRIME,WHILE;
non terminal Nodo PARAMETROS, PARAMETROS_PRIME, TIPOS, PUT, GET;
non terminal Nodo ASIGNACIONES, LOOP,FUNCTION;
non terminal Nodo FOR, DECLARACIONES;
non terminal Nodo PROCEDURE_P;
non terminal ArrayList<Nodo> ID;
non terminal TIPOS_PARAMETROS, TIPOS_VARIABLES;

precedence left TK_OPADICION;
precedence left TK_MULTI;
precedence left TK_IGUAL;


start with PROCEDURE;


PROCEDURE::= TK_PROCEDURE:proc TK_ID:id PARAMETROS {: tipoPrincipal = tipoActual + " -> void"; tipoActual =" "; :} TK_IS DECLARACIONES:d TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA
            {:  
  
                Nodo nodo = new Nodo(id.toString(),0, tipoPrincipal,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.setHijos(d.getHijos());
                parser.raiz = nodo;
            :}
;

            
PROCEDURE_P::= TK_PROCEDURE TK_ID:id PARAMETROS:p TK_IS DECLARACIONES:d TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA
            {:  
                tipoActual = tipoActual + " -> void"; 
                d.setEtiqueta(tipoActual);
                Nodo nodo = new Nodo(id.toString(),parser.cont, tipoActual,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.addHijo(d);
                RESULT = nodo;
            :}
            | error TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esperaba un \"procedure\" "); :}
            | TK_PROCEDURE error PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esperaba un identificador "); :}
            | TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END error TK_PUNTOCOMA {: errores.add("Se esperaba un identificador "); :}
    
;

PROCEDURE_PRIME::= DECISION PROCEDURE_PRIME:s
                | WHILE PROCEDURE_PRIME:s 
                | ASIGNACIONES PROCEDURE_PRIME:s 
                | PUT PROCEDURE_PRIME:s
                | GET PROCEDURE_PRIME:s
                | LOOP PROCEDURE_PRIME:s
                | FOR PROCEDURE_PRIME:s
                | 
;

//Gramática de parámetros

TIPOS_VARIABLES::= TK_INTEGER:i {:
                    if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = i.toString();
                    }
                    else 
                    {
                        tipoActual = tipoActual + " x " + i.toString();
                    }
                    RESULT = i;
                :}
                | TK_FLOAT:f{:
                if(tipoActual.equalsIgnoreCase(" "))
                    {

                        tipoActual = f.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + f.toString();
                    }
                    RESULT = f;
                :}
                | TK_BOOLEAN:b{:
                if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = b.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + b.toString();
                    }
                    RESULT = b;
                :}
                | error {: errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); :}
;

TIPOS_PARAMETROS::= TK_IN
                | TK_OUT
                | TK_INOUT
                | error {: errores.add("Los tipos de parámetros permitidos son in, out e inout. "); :}
;

PARAMETROS::= TK_PARENTESISI PARAMETROS_PRIME        
             | error PARAMETROS_PRIME {: errores.add("Se esparaba un \"(\" "); :} 
             
;

PARAMETROS_PRIME::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME
                    | TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
                    | TK_PARENTESISD 
                    | error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME {: errores.add("Se esparaba un identificador "); :}
                    | TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME {: errores.add("Se esparaba un \":\" "); :}
                        
;
//Gramática para decisiones

DECISION ::=  TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME             
;

DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME
                | TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA     
                | TK_ENDIF TK_PUNTOCOMA 
;

//Gramática para asignaciones

ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA
;

//Gramática para ciclo while

WHILE ::= TK_WHILE:w TK_PARENTESISI EXPRESIONES:e TK_PARENTESISD TK_LOOP PROCEDURE_PRIME:p TK_ENDLOOP TK_PUNTOCOMA
;


//Gramática para expresiones

EXPRESIONES ::= EP
              | EP TK_OR EP
              | EP TK_AND EP
;

EP::= TK_ID TK_OPREL TK_ID
    | TK_ID TK_OPREL TK_DIGITO
    | TK_ID TK_OPREL TK_DIGITOFLOAT
    | TK_ID TK_OPREL TK_TRUE
    | TK_ID TK_OPREL TK_FALSE 
    | TK_DIGITO TK_OPREL TK_ID
    | TK_DIGITOFLOAT TK_OPREL TK_ID

;

//Gramática para declaraciones de variables

DECLARACIONES::= ID:id
                {:
                   Nodo nodo = new Nodo();
                   nodo.setHijos(id);
                   RESULT = nodo;
                :}
                | ID:id TK_PUNTOCOMA DECLARACIONES:d 
                {:
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    node.setHijos(id);
                    for(int i=0; i<d.getHijos().size();i++){
                        node.addHijo(d.getHijos().get(i));
                    }
                    RESULT = node;

                :}
                | FUNCTION:f DECLARACIONES:d
                {:
                    
                    Nodo node = new Nodo("FUNCION",parser.cont);
                    node.addHijo(f);
                    parser.cont++;
                    RESULT = node;
                :}
                | PROCEDURE_P:p {: Nodo nodoActual = p; :} DECLARACIONES:d
                {:
                    Nodo hijos = d;
                    for(int i=0; i<hijos.getHijos().size();i++)
                    {
                          p.addHijo(hijos.getHijos().get(i));
                    }
                    RESULT = p;
                :}
                | {:
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                :}

;

ID::= TK_ID:id
        {: identificadores.add(id.toString()); :} TK_COMA ID:d{:
            RESULT = d;
        :}
        | TK_ID error ID {: errores.add("Se esperaba un \",\" "); :}
        | TK_ID:id TK_COLON TIPOS:t  
        {:
            Nodo nodo = new Nodo("Variables",parser.cont);
            parser.cont++;
            identificadores.add(id.toString());
            for(int i =0; i<identificadores.size();i++)
            {
                nodo.getHijos().add(new Nodo(identificadores.get(i),parser.cont++,t.getEtiqueta(),offsetActual));
                parser.cont++;
            }
            identificadores.clear();
            RESULT = nodo.getHijos();

        :}
        | TK_ID error TIPOS {: errores.add("Se esperaba un \":\" "); :}
    
;

TIPOS::= TK_BOOLEAN:t
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        :}
        |TK_BOOLEAN:t TK_IGUAL TK_FALSE:v
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        :}
        
        |TK_BOOLEAN:t TK_IGUAL TK_TRUE:v
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        :}
        |TK_BOOLEAN error TK_TRUE {: errores.add("Se esperaba un \":=\" "); :}
        |TK_BOOLEAN error TK_FALSE {: errores.add("Se esperaba un \":=\" "); :}
        |TK_BOOLEAN TK_IGUAL error {: errores.add("Se esperaba un true o false "); :}
        |TK_INTEGER:t
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;         
        :}
        |TK_INTEGER:t TK_IGUAL TK_DIGITO
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        :}
        |TK_INTEGER error TK_DIGITO {: errores.add("Se esperaba un \":=\" "); :}
        |TK_INTEGER TK_IGUAL error {: errores.add("Se esperaba un numero "); :}
        |TK_FLOAT:t
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        :}
        |TK_FLOAT:t TK_IGUAL TK_DIGITOFLOAT
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        :}
        |TK_FLOAT error TK_DIGITOFLOAT  {: errores.add("Se esperaba un \":=\" "); :}
        |TK_FLOAT TK_IGUAL error {: errores.add("Se esperaba un numero decimal "); :}
        |error {: errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); :}


;
                
//Gramática de Put y Get

PUT::= TK_PUT:p TK_PARENTESISI TK_STRING:s TK_PARENTESISD  TK_PUNTOCOMA
    | error TK_PARENTESISI TK_STRING TK_PARENTESISD  TK_PUNTOCOMA {: errores.add("Se esperaba un \"put o un if\" "); :}
    | TK_PUT error TK_STRING TK_PARENTESISD  TK_PUNTOCOMA {: errores.add("Se esperaba un \"(\" "); :}
    | TK_PUT TK_PARENTESISI error TK_PARENTESISD  TK_PUNTOCOMA {: errores.add("Se esperaba una cadena "); :}
    | TK_PUT TK_PARENTESISI TK_STRING error  TK_PUNTOCOMA {: errores.add("Se esperaba un en el put \")\" "); :}
    | TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD  error {: errores.add("Se esperaba un \";\" "); :}
;

GET::= TK_GET:g TK_PARENTESISI TK_ID:d TK_PARENTESISD TK_PUNTOCOMA
    | error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA {: errores.add("Se esperaba un \"get\" "); :}
    | TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA {: errores.add("Se esperaba un \"(\" "); :}
    | TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA {: errores.add("Se esperaba un identificador "); :}
    | TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA {: errores.add("Se esperaba un \")\" "); :}
    | TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error {: errores.add("Se esperaba un \";\" "); :}
;
//Gramática de loop

LOOP ::= TK_ID:id1 TK_COLON TK_LOOP TK_EXIT:exit TK_ID:id2 TK_WHEN EXPRESIONES:exp TK_PUNTOCOMA PROCEDURE_PRIME:p TK_ENDLOOP TK_ID TK_PUNTOCOMA 
        |error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \":\" "); :}
        |TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"loop\" "); :}
        |TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"exit\" "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"when\" "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error {: errores.add("Se esparaba un \";\" "); :}
;
//Gramática de functions

FUNCTION ::= TK_FUNCTION TK_ID:id PARAMETROS:par TK_RETURN TIPOS_VARIABLES:tv TK_IS DECLARACIONES:dec TK_BEGIN PROCEDURE_PRIME:proc TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {:
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(par);
                Nodo retorno = new Nodo("RETURN",parser.cont);
                parser.cont++;
                retorno.addHijo(new Nodo(tv.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(retorno);
                //nodo.addHijo(dec);
                nodo.addHijo(proc);
                RESULT = nodo;
            :}
            | error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"function\" "); :}
            | TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador, begin o return"); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador"); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \";\" "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"end\" "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error {: errores.add("Se esparaba un \";\" "); :}

;
//Gramatica del For 

FOR::= TK_FOR  TK_ID:id1 TK_IN TK_ID:id2 TK_LOOP PROCEDURE_PRIME:p TK_ENDLOOP TK_PUNTOCOMA
        |TK_FOR  TK_DIGITO:d1 TK_IN TK_ID:id2 TK_LOOP PROCEDURE_PRIME:p TK_ENDLOOP TK_PUNTOCOMA
        |TK_FOR  TK_ID:id1 TK_IN TK_DIGITO:d2 TK_LOOP PROCEDURE_PRIME:p TK_ENDLOOP TK_PUNTOCOMA
        | error TK_ID TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA {: errores.add("Se esparaba un \"for\" "); :}
        | TK_FOR error TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA {: errores.add("Se esparaba un \"numero o un identificador\" "); :}
        | TK_FOR TK_ID TK_IN error TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA {: errores.add("Se esparaba un \"numero o un identificador\" "); :}
        | TK_FOR TK_ID TK_IN TK_DIGITO error PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA {: errores.add("Se esparaba un \"loop\" "); :}


;
