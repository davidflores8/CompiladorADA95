package compilador_ada95;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

parser code {:

   ArrayList errores = new ArrayList();

    public Nodo raiz;    
    public int cont = 0;

public void syntax_error (Symbol s){
  //  System.out.println("-----------------------");
   // System.out.println("Error de sintaxis");
   // System.out.println("Linea " +s.left);
   // System.out.println("Columna " +s.right);
   // System.out.println("Valor " +s.value);
    errores.add("Syntax error: " +  s.value + " Linea: " + (s.left) + " Columna: " + (s.right));
}

:} ;

terminal  TK_IGUAL, TK_INTEGER, TK_BOOLEAN, TK_FLOAT, TK_IF, TK_ELSE, TK_ELSEIF;
terminal  TK_LOOP, TK_ENDLOOP, TK_WHILE, TK_OPADICION, TK_MULTI, TK_ID, TK_OPREL, TK_DIGITO, TK_THEN, TK_ENDIF;
terminal  TK_PROCEDURE, TK_IS, TK_BEGIN, TK_END, TK_PUT, TK_GET;
terminal  TK_DIGITOFLOAT, TK_IN, TK_OUT, TK_INOUT, TK_EXIT, TK_WHEN, TK_FUNCTION, TK_RETURN, TK_STRING;
terminal  TK_PARENTESISI, TK_PARENTESISD,TK_PUNTOCOMA, TK_COMA,TK_TRUE, TK_FALSE, TK_COLON, TK_AND, TK_OR;

non terminal PROCEDURE;
non terminal PROCEDURE_PRIME;
non terminal Nodo PARAMETROS, PARAMETROS_PRIME, DECLARACIONES, TIPOS, ID;
non terminal WHILE, DECISION, DECISION_PRIME, ASIGNACIONES, LOOP;
non terminal FUNCTION, EXPRESIONES, EP, PUT, GET;
non terminal TIPOS_PARAMETROS, TIPOS_VARIABLES;

precedence left TK_OPADICION;
precedence left TK_MULTI;

start with PROCEDURE;


PROCEDURE::= TK_PROCEDURE:proc TK_ID:id PARAMETROS:p TK_IS DECLARACIONES:d TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA
            {:     
                System.out.println("Esto es procedure");
                Nodo node = new Nodo("INICIO",parser.cont);
                parser.cont++;
                Nodo nodo = new Nodo("PROCEDURE",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo (id.toString(), parser.cont));
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(d);
                node.addHijo(nodo);
                parser.raiz = node;
    
            :}
            | error TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esperaba un \"procedure\" "); :}
            | TK_PROCEDURE error PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esperaba un identificador "); :}
            | TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END error TK_PUNTOCOMA {: errores.add("Se esperaba un identificador "); :}
            | TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID error {: errores.add("Se esperaba un \";\" "); :}
            
; 

PROCEDURE_PRIME::= DECISION PROCEDURE_PRIME
                | WHILE PROCEDURE_PRIME
                | ASIGNACIONES PROCEDURE_PRIME
                | PROCEDURE PROCEDURE_PRIME
                | PUT PROCEDURE_PRIME
                | GET PROCEDURE_PRIME
                | LOOP PROCEDURE_PRIME
                | FUNCTION PROCEDURE_PRIME
                | 
;

//Gramática de parámetros

TIPOS_VARIABLES::= TK_INTEGER:i {:
                    RESULT = i;
                :}
                | TK_FLOAT:f{:
                    RESULT = f;
                :}
                | TK_BOOLEAN:b{:
                    RESULT = b;
                :}
                | error {: errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); :}
;

TIPOS_PARAMETROS::= TK_IN:ti {:
                    RESULT = ti;
                :}
                | TK_OUT:to {:
                    RESULT = to;
                :}
                | TK_INOUT:tio {:
                    RESULT = tio;
                :}
                | error {: errores.add("Los tipos de parámetros permitidos son in, out e inout. "); :}
;

PARAMETROS::= TK_PARENTESISI PARAMETROS_PRIME:p
                {:
                    //System.out.println("Esto es parametros");
                    //Nodo node = new Nodo ("PARAMETROS",parser.cont);
                    //parser.cont++;
                    //node.addHijo(p);
                    RESULT = p;
                :}
        
             | error PARAMETROS_PRIME {: errores.add("Se esparaba un \"(\" "); :} 
;

PARAMETROS_PRIME::= TK_ID:id TK_COLON TIPOS_PARAMETROS:tp TIPOS_VARIABLES:tv TK_PUNTOCOMA PARAMETROS_PRIME:pm {:

                        Nodo node = new Nodo ("PARAMETROS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tp.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tv.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(pm);
                        RESULT = node;
                    :}
                    | TK_ID:id TK_COLON TIPOS_PARAMETROS:tp TIPOS_VARIABLES:tv TK_PARENTESISD {:

                        Nodo node = new Nodo ("PARAMETROS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tp.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tv.toString(), parser.cont));
                        parser.cont++;
                        RESULT = node;
                    :}
                    | error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME {: errores.add("Se esparaba un identificador "); :}
                    | TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME {: errores.add("Se esparaba un \":\" "); :}
                        
;



//Gramática para decisiones

DECISION ::=  TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME;

DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME
            | TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            | TK_ENDIF TK_PUNTOCOMA 
;

//Gramática para asignaciones

ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA
;

//Gramática para ciclo while

WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA;


//Gramática para expresiones

EXPRESIONES ::= EP
              | EP TK_OR EP
              | EP TK_AND EP
;

EP::= TK_ID TK_OPREL TK_ID 
    | TK_ID TK_OPREL TK_DIGITO 
    | TK_ID TK_OPREL TK_DIGITOFLOAT 
    | TK_ID TK_OPREL TK_TRUE 
    | TK_ID TK_OPREL TK_FALSE 
    | TK_DIGITO TK_OPREL TK_ID
    | TK_DIGITOFLOAT TK_OPREL TK_ID
;

//Gramática para declaraciones de variables

DECLARACIONES::= ID:id
                {:
                  RESULT = id;
                :}
                | ID:id TK_PUNTOCOMA DECLARACIONES:d 
                {:
                    Nodo node = new Nodo("DECLARACIONES",parser.cont);
                    parser.cont++;
                    node.addHijo(id);
                    node.addHijo(d);
                    RESULT = node;

                :}
                | {:
                    Nodo node = new Nodo("DECLARACIONES",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                :}

;

ID::= TK_ID:id TK_COMA ID:d{:
        Nodo nodo = new Nodo("ID",parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        d.addHijo(nodo);
        RESULT = d;
    :}
    | TK_ID error ID {: errores.add("Se esperaba un \",\" "); :}
    | TK_ID:id TK_COLON TIPOS:t  {:
        Nodo nodo = new Nodo("Variables",parser.cont);
        parser.cont++;
        nodo.addHijo(t);
        Nodo node = new Nodo("ID",parser.cont);
        parser.cont++;
        node.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(node);
        RESULT = nodo;
    
    :}
    | TK_ID error TIPOS {: errores.add("Se esperaba un \":\" "); :}
    
;

TIPOS::= TK_BOOLEAN:t
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        :}
        |TK_BOOLEAN:t TK_IGUAL TK_FALSE:v
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(v.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo;          
        :}
        
        |TK_BOOLEAN:t TK_IGUAL TK_TRUE:v
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(v.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo; 
        :}
        |TK_BOOLEAN error TK_TRUE {: errores.add("Se esperaba un \":=\" "); :}
        |TK_BOOLEAN error TK_FALSE {: errores.add("Se esperaba un \":=\" "); :}
        |TK_BOOLEAN TK_IGUAL error {: errores.add("Se esperaba un true o false "); :}
        |TK_INTEGER:t
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;         
        :}
        |TK_INTEGER:t TK_IGUAL TK_DIGITO:d
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(d.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo; 
        :}
        |TK_INTEGER error TK_DIGITO {: errores.add("Se esperaba un \":=\" "); :}
        |TK_INTEGER TK_IGUAL error {: errores.add("Se esperaba un numero "); :}
        |TK_FLOAT:t
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        :}
        |TK_FLOAT:t TK_IGUAL TK_DIGITOFLOAT:d
        {:
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(d.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo; 
        :}
        |TK_FLOAT error TK_DIGITOFLOAT  {: errores.add("Se esperaba un \":=\" "); :}
        |TK_FLOAT TK_IGUAL error {: errores.add("Se esperaba un numero decimal "); :}
        |error {: errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); :}


;
                
//Gramática de Put y Get

PUT::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD  TK_PUNTOCOMA
    | error TK_PARENTESISI TK_STRING TK_PARENTESISD  TK_PUNTOCOMA {: errores.add("Se esperaba un \"put\" "); :}
    | TK_PUT error TK_STRING TK_PARENTESISD  TK_PUNTOCOMA {: errores.add("Se esperaba un \"(\" "); :}
    | TK_PUT TK_PARENTESISI error TK_PARENTESISD  TK_PUNTOCOMA {: errores.add("Se esperaba una cadena "); :}
    | TK_PUT TK_PARENTESISI TK_STRING error  TK_PUNTOCOMA {: errores.add("Se esperaba un \")\" "); :}
    | TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD  error {: errores.add("Se esperaba un \";\" "); :}
;

GET::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA
    | error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA {: errores.add("Se esperaba un \"get\" "); :}
    | TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA {: errores.add("Se esperaba un \"(\" "); :}
    | TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA {: errores.add("Se esperaba un identificador "); :}
    | TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA {: errores.add("Se esperaba un \")\" "); :}
    | TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error {: errores.add("Se esperaba un \";\" "); :}
;




//Gramática de loop

LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA
        |error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \":\" "); :}
        |TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"loop\" "); :}
        |TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"exit\" "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"when\" "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error {: errores.add("Se esparaba un \";\" "); :}

;

//Gramática de functions

FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA
            | error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"function\" "); :}
            | TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \";\" "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"end\" "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error {: errores.add("Se esparaba un \";\" "); :}

;