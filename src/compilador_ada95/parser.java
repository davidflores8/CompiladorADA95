
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\014\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\002\000\002" +
    "\005\011\000\002\006\011\000\002\006\006\000\002\006" +
    "\004\000\002\007\006\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\004\012\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\011\004\000\002\012\005\000\002\012\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\015\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\011\000\002\017\007\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\020\004\000\002\023" +
    "\007\000\002\023\004\000\002\023\003\000\002\010\016" +
    "\000\002\024\021" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\032\005\001\002\000\004\002\252\001" +
    "\002\000\004\011\006\001\002\000\004\007\010\001\002" +
    "\000\004\033\030\001\002\000\010\010\011\011\013\017" +
    "\014\001\002\000\006\033\uffc9\055\uffc9\001\002\000\006" +
    "\033\uffcc\055\uffcc\001\002\000\004\040\016\001\002\000" +
    "\010\010\011\011\013\017\014\001\002\000\006\033\uffca" +
    "\055\uffca\001\002\000\010\046\022\047\021\050\020\001" +
    "\002\000\010\021\024\022\023\023\025\001\002\000\010" +
    "\021\uffcd\022\uffcd\023\uffcd\001\002\000\010\021\uffce\022" +
    "\uffce\023\uffce\001\002\000\010\021\uffcf\022\uffcf\023\uffcf" +
    "\001\002\000\010\010\uffd0\011\uffd0\017\uffd0\001\002\000" +
    "\010\010\uffd2\011\uffd2\017\uffd2\001\002\000\010\010\uffd1" +
    "\011\uffd1\017\uffd1\001\002\000\010\010\011\011\013\017" +
    "\014\001\002\000\006\033\uffcb\055\uffcb\001\002\000\022" +
    "\004\046\011\047\027\036\032\005\034\ufff6\043\051\044" +
    "\042\054\043\001\002\000\036\004\046\005\ufff6\006\ufff6" +
    "\011\047\016\ufff6\026\ufff6\027\036\032\005\034\ufff6\035" +
    "\ufff6\043\051\044\042\054\043\055\ufff6\001\002\000\036" +
    "\004\046\005\ufff6\006\ufff6\011\047\016\ufff6\026\ufff6\027" +
    "\036\032\005\034\ufff6\035\ufff6\043\051\044\042\054\043" +
    "\055\ufff6\001\002\000\036\004\046\005\ufff6\006\ufff6\011" +
    "\047\016\ufff6\026\ufff6\027\036\032\005\034\ufff6\035\ufff6" +
    "\043\051\044\042\054\043\055\ufff6\001\002\000\036\004" +
    "\046\005\ufff6\006\ufff6\011\047\016\ufff6\026\ufff6\027\036" +
    "\032\005\034\ufff6\035\ufff6\043\051\044\042\054\043\055" +
    "\ufff6\001\002\000\036\004\046\005\ufff6\006\ufff6\011\047" +
    "\016\ufff6\026\ufff6\027\036\032\005\034\ufff6\035\ufff6\043" +
    "\051\044\042\054\043\055\ufff6\001\002\000\004\007\236" +
    "\001\002\000\004\017\235\001\002\000\036\004\046\005" +
    "\ufff6\006\ufff6\011\047\016\ufff6\026\ufff6\027\036\032\005" +
    "\034\ufff6\035\ufff6\043\051\044\042\054\043\055\ufff6\001" +
    "\002\000\036\004\046\005\ufff6\006\ufff6\011\047\016\ufff6" +
    "\026\ufff6\027\036\032\005\034\ufff6\035\ufff6\043\051\044" +
    "\042\054\043\055\ufff6\001\002\000\004\007\227\001\002" +
    "\000\004\011\211\001\002\000\036\004\046\005\ufff6\006" +
    "\ufff6\011\047\016\ufff6\026\ufff6\027\036\032\005\034\ufff6" +
    "\035\ufff6\043\051\044\042\054\043\055\ufff6\001\002\000" +
    "\004\034\203\001\002\000\004\007\160\001\002\000\010" +
    "\020\061\024\063\040\062\001\002\000\036\004\046\005" +
    "\ufff6\006\ufff6\011\047\016\ufff6\026\ufff6\027\036\032\005" +
    "\034\ufff6\035\ufff6\043\051\044\042\054\043\055\ufff6\001" +
    "\002\000\004\007\052\001\002\000\004\051\053\001\002" +
    "\000\004\011\054\001\002\000\004\051\055\001\002\000" +
    "\004\010\056\001\002\000\004\017\057\001\002\000\036" +
    "\004\uffd4\005\uffd4\006\uffd4\011\uffd4\016\uffd4\026\uffd4\027" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\043\uffd4\044\uffd4\054\uffd4" +
    "\055\uffd4\001\002\000\020\005\ufff9\006\ufff9\016\ufff9\026" +
    "\ufff9\034\ufff9\035\ufff9\055\ufff9\001\002\000\012\011\141" +
    "\013\140\036\136\037\137\001\002\000\012\021\070\022" +
    "\067\023\072\025\102\001\002\000\004\011\065\001\002" +
    "\000\004\017\uffdd\001\002\000\006\024\063\040\066\001" +
    "\002\000\010\021\070\022\067\023\072\001\002\000\010" +
    "\017\uffdb\020\077\033\uffdb\001\002\000\010\017\uffd8\020" +
    "\075\033\uffd8\001\002\000\004\017\uffdc\001\002\000\010" +
    "\017\uffd6\020\073\033\uffd6\001\002\000\004\045\074\001" +
    "\002\000\006\017\uffd5\033\uffd5\001\002\000\004\013\076" +
    "\001\002\000\006\017\uffd7\033\uffd7\001\002\000\006\036" +
    "\100\037\101\001\002\000\006\017\uffd9\033\uffd9\001\002" +
    "\000\006\017\uffda\033\uffda\001\002\000\004\052\103\001" +
    "\002\000\004\011\104\001\002\000\004\053\105\001\002" +
    "\000\010\011\112\013\110\045\107\001\002\000\012\010" +
    "\uffe8\017\uffe8\041\133\042\132\001\002\000\004\012\130" +
    "\001\002\000\004\012\126\001\002\000\004\017\121\001" +
    "\002\000\004\012\113\001\002\000\014\011\120\013\116" +
    "\036\114\037\117\045\115\001\002\000\012\010\uffe2\017" +
    "\uffe2\041\uffe2\042\uffe2\001\002\000\012\010\uffe3\017\uffe3" +
    "\041\uffe3\042\uffe3\001\002\000\012\010\uffe4\017\uffe4\041" +
    "\uffe4\042\uffe4\001\002\000\012\010\uffe1\017\uffe1\041\uffe1" +
    "\042\uffe1\001\002\000\012\010\uffe5\017\uffe5\041\uffe5\042" +
    "\uffe5\001\002\000\022\004\046\011\047\026\ufff6\027\036" +
    "\032\005\043\051\044\042\054\043\001\002\000\004\026" +
    "\123\001\002\000\004\011\124\001\002\000\004\017\125" +
    "\001\002\000\036\004\uffc8\005\uffc8\006\uffc8\011\uffc8\016" +
    "\uffc8\026\uffc8\027\uffc8\032\uffc8\034\uffc8\035\uffc8\043\uffc8" +
    "\044\uffc8\054\uffc8\055\uffc8\001\002\000\004\011\127\001" +
    "\002\000\012\010\uffe0\017\uffe0\041\uffe0\042\uffe0\001\002" +
    "\000\004\011\131\001\002\000\012\010\uffdf\017\uffdf\041" +
    "\uffdf\042\uffdf\001\002\000\010\011\112\013\110\045\107" +
    "\001\002\000\010\011\112\013\110\045\107\001\002\000" +
    "\006\010\uffe6\017\uffe6\001\002\000\006\010\uffe7\017\uffe7" +
    "\001\002\000\004\017\157\001\002\000\004\017\156\001" +
    "\002\000\004\017\155\001\002\000\010\017\144\030\142" +
    "\031\143\001\002\000\006\011\152\013\151\001\002\000" +
    "\006\011\146\013\145\001\002\000\036\004\ufff1\005\ufff1" +
    "\006\ufff1\011\ufff1\016\ufff1\026\ufff1\027\ufff1\032\ufff1\034" +
    "\ufff1\035\ufff1\043\ufff1\044\ufff1\054\ufff1\055\ufff1\001\002" +
    "\000\004\017\150\001\002\000\004\017\147\001\002\000" +
    "\036\004\uffee\005\uffee\006\uffee\011\uffee\016\uffee\026\uffee" +
    "\027\uffee\032\uffee\034\uffee\035\uffee\043\uffee\044\uffee\054" +
    "\uffee\055\uffee\001\002\000\036\004\uffed\005\uffed\006\uffed" +
    "\011\uffed\016\uffed\026\uffed\027\uffed\032\uffed\034\uffed\035" +
    "\uffed\043\uffed\044\uffed\054\uffed\055\uffed\001\002\000\004" +
    "\017\154\001\002\000\004\017\153\001\002\000\036\004" +
    "\ufff0\005\ufff0\006\ufff0\011\ufff0\016\ufff0\026\ufff0\027\ufff0" +
    "\032\ufff0\034\ufff0\035\ufff0\043\ufff0\044\ufff0\054\ufff0\055" +
    "\ufff0\001\002\000\036\004\uffef\005\uffef\006\uffef\011\uffef" +
    "\016\uffef\026\uffef\027\uffef\032\uffef\034\uffef\035\uffef\043" +
    "\uffef\044\uffef\054\uffef\055\uffef\001\002\000\036\004\uffec" +
    "\005\uffec\006\uffec\011\uffec\016\uffec\026\uffec\027\uffec\032" +
    "\uffec\034\uffec\035\uffec\043\uffec\044\uffec\054\uffec\055\uffec" +
    "\001\002\000\036\004\uffea\005\uffea\006\uffea\011\uffea\016" +
    "\uffea\026\uffea\027\uffea\032\uffea\034\uffea\035\uffea\043\uffea" +
    "\044\uffea\054\uffea\055\uffea\001\002\000\036\004\uffeb\005" +
    "\uffeb\006\uffeb\011\uffeb\016\uffeb\026\uffeb\027\uffeb\032\uffeb" +
    "\034\uffeb\035\uffeb\043\uffeb\044\uffeb\054\uffeb\055\uffeb\001" +
    "\002\000\010\011\112\013\110\045\107\001\002\000\004" +
    "\010\162\001\002\000\004\015\163\001\002\000\026\004" +
    "\046\005\ufff6\006\ufff6\011\047\016\ufff6\027\036\032\005" +
    "\043\051\044\042\054\043\001\002\000\010\005\170\006" +
    "\165\016\166\001\002\000\004\007\175\001\002\000\004" +
    "\017\174\001\002\000\036\004\ufff5\005\ufff5\006\ufff5\011" +
    "\ufff5\016\ufff5\026\ufff5\027\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\043\ufff5\044\ufff5\054\ufff5\055\ufff5\001\002\000\022\004" +
    "\046\011\047\016\ufff6\027\036\032\005\043\051\044\042" +
    "\054\043\001\002\000\004\016\172\001\002\000\004\017" +
    "\173\001\002\000\036\004\ufff3\005\ufff3\006\ufff3\011\ufff3" +
    "\016\ufff3\026\ufff3\027\ufff3\032\ufff3\034\ufff3\035\ufff3\043" +
    "\ufff3\044\ufff3\054\ufff3\055\ufff3\001\002\000\036\004\ufff2" +
    "\005\ufff2\006\ufff2\011\ufff2\016\ufff2\026\ufff2\027\ufff2\032" +
    "\ufff2\034\ufff2\035\ufff2\043\ufff2\044\ufff2\054\ufff2\055\ufff2" +
    "\001\002\000\010\011\112\013\110\045\107\001\002\000" +
    "\004\010\177\001\002\000\004\015\200\001\002\000\026" +
    "\004\046\005\ufff6\006\ufff6\011\047\016\ufff6\027\036\032" +
    "\005\043\051\044\042\054\043\001\002\000\010\005\170" +
    "\006\165\016\166\001\002\000\036\004\ufff4\005\ufff4\006" +
    "\ufff4\011\ufff4\016\ufff4\026\ufff4\027\ufff4\032\ufff4\034\ufff4" +
    "\035\ufff4\043\ufff4\044\ufff4\054\ufff4\055\ufff4\001\002\000" +
    "\022\004\046\011\047\027\036\032\005\035\ufff6\043\051" +
    "\044\042\054\043\001\002\000\004\035\205\001\002\000" +
    "\004\011\206\001\002\000\004\017\207\001\002\000\040" +
    "\002\000\004\000\005\000\006\000\011\000\016\000\026" +
    "\000\027\000\032\000\034\000\035\000\043\000\044\000" +
    "\054\000\055\000\001\002\000\020\005\ufffe\006\ufffe\016" +
    "\ufffe\026\ufffe\034\ufffe\035\ufffe\055\ufffe\001\002\000\004" +
    "\007\010\001\002\000\004\055\213\001\002\000\010\021" +
    "\070\022\067\023\072\001\002\000\004\033\215\001\002" +
    "\000\022\004\046\011\047\027\036\032\005\034\ufff6\043" +
    "\051\044\042\054\043\001\002\000\004\034\217\001\002" +
    "\000\022\004\046\011\047\027\036\032\005\043\051\044" +
    "\042\054\043\055\ufff6\001\002\000\004\055\221\001\002" +
    "\000\004\011\222\001\002\000\004\017\223\001\002\000" +
    "\004\035\224\001\002\000\004\011\225\001\002\000\004" +
    "\017\226\001\002\000\036\004\uffc7\005\uffc7\006\uffc7\011" +
    "\uffc7\016\uffc7\026\uffc7\027\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\043\uffc7\044\uffc7\054\uffc7\055\uffc7\001\002\000\004\011" +
    "\230\001\002\000\004\010\231\001\002\000\004\017\232" +
    "\001\002\000\036\004\uffd3\005\uffd3\006\uffd3\011\uffd3\016" +
    "\uffd3\026\uffd3\027\uffd3\032\uffd3\034\uffd3\035\uffd3\043\uffd3" +
    "\044\uffd3\054\uffd3\055\uffd3\001\002\000\020\005\ufffc\006" +
    "\ufffc\016\ufffc\026\ufffc\034\ufffc\035\ufffc\055\ufffc\001\002" +
    "\000\020\005\ufffa\006\ufffa\016\ufffa\026\ufffa\034\ufffa\035" +
    "\ufffa\055\ufffa\001\002\000\036\004\uffde\005\uffde\006\uffde" +
    "\011\uffde\016\uffde\026\uffde\027\uffde\032\uffde\034\uffde\035" +
    "\uffde\043\uffde\044\uffde\054\uffde\055\uffde\001\002\000\010" +
    "\011\112\013\110\045\107\001\002\000\004\010\240\001" +
    "\002\000\004\025\241\001\002\000\022\004\046\011\047" +
    "\026\ufff6\027\036\032\005\043\051\044\042\054\043\001" +
    "\002\000\004\026\243\001\002\000\004\017\244\001\002" +
    "\000\036\004\uffe9\005\uffe9\006\uffe9\011\uffe9\016\uffe9\026" +
    "\uffe9\027\uffe9\032\uffe9\034\uffe9\035\uffe9\043\uffe9\044\uffe9" +
    "\054\uffe9\055\uffe9\001\002\000\020\005\ufff7\006\ufff7\016" +
    "\ufff7\026\ufff7\034\ufff7\035\ufff7\055\ufff7\001\002\000\020" +
    "\005\ufff8\006\ufff8\016\ufff8\026\ufff8\034\ufff8\035\ufff8\055" +
    "\ufff8\001\002\000\020\005\ufffd\006\ufffd\016\ufffd\026\ufffd" +
    "\034\ufffd\035\ufffd\055\ufffd\001\002\000\020\005\uffff\006" +
    "\uffff\016\uffff\026\uffff\034\uffff\035\uffff\055\uffff\001\002" +
    "\000\020\005\ufffb\006\ufffb\016\ufffb\026\ufffb\034\ufffb\035" +
    "\ufffb\055\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\006\001\001\000\002\001\001" +
    "\000\004\023\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\014\001\001\000\002" +
    "\001\001\000\004\021\016\001\001\000\004\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\026\001\001\000\002\001\001\000\030\002\030" +
    "\003\044\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\030\002\030" +
    "\003\250\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\030\002\030" +
    "\003\247\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\030\002\030" +
    "\003\246\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\030\002\030" +
    "\003\245\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\030\002\030" +
    "\003\244\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\030\003\233\004\032\005" +
    "\031\007\040\010\033\011\043\012\036\016\037\017\047" +
    "\024\034\001\001\000\030\002\030\003\232\004\032\005" +
    "\031\007\040\010\033\011\043\012\036\016\037\017\047" +
    "\024\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\030\003\207\004\032\005\031\007\040\010\033" +
    "\011\043\012\036\016\037\017\047\024\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\030\003\057\004\032\005\031\007\040\010\033\011" +
    "\043\012\036\016\037\017\047\024\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\070\001" +
    "\001\000\004\012\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\110\014\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\030\003\121\004\032\005\031\007\040\010\033" +
    "\011\043\012\036\016\037\017\047\024\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\134\001\001\000\004" +
    "\014\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\160\014\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\030" +
    "\003\163\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\004\006\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\030\003\170\004\032\005\031\007\040" +
    "\010\033\011\043\012\036\016\037\017\047\024\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\175\014\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\030\003\200" +
    "\004\032\005\031\007\040\010\033\011\043\012\036\016" +
    "\037\017\047\024\034\001\001\000\004\006\201\001\001" +
    "\000\002\001\001\000\030\002\030\003\203\004\032\005" +
    "\031\007\040\010\033\011\043\012\036\016\037\017\047" +
    "\024\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\211\001\001\000\002\001\001\000\004\015\213\001" +
    "\001\000\002\001\001\000\030\002\030\003\215\004\032" +
    "\005\031\007\040\010\033\011\043\012\036\016\037\017" +
    "\047\024\034\001\001\000\002\001\001\000\030\002\030" +
    "\003\217\004\032\005\031\007\040\010\033\011\043\012" +
    "\036\016\037\017\047\024\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\236\014\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\030\003\241\004\032\005\031" +
    "\007\040\010\033\011\043\012\036\016\037\017\047\024" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   ArrayList erroresSintacticos = new ArrayList();

public void syntax_error (Symbol s){
    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS PROCEDURE_PRIME TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_PRIME ::= DECLARACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_PRIME ::= PROCEDURE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= LOOP PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_PRIME ::= FUNCTION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDURE_PRIME ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESIONES ::= EP TK_OR EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESIONES ::= EP TK_AND EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EP ::= TK_ID TK_OPREL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EP ::= TK_ID TK_OPREL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EP ::= TK_ID TK_OPREL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EP ::= TK_DIGITOFLOAT TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES ::= ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ID ::= TK_ID TK_COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PUT ::= TK_PUT TK_PARENTESISI TK_COMILLA TK_ID TK_COMILLA TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS_PRIME ::= TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS TK_IS PROCEDURE_PRIME TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
