
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\035\002\000\002\002" +
    "\015\000\002\022\014\000\002\022\014\000\002\022\014" +
    "\000\002\022\014\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\002\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\020\004\000\002" +
    "\020\004\000\002\021\010\000\002\021\007\000\002\021" +
    "\003\000\002\021\010\000\002\021\010\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\005\000" +
    "\002\034\003\000\002\034\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\011\011\000\002\012\011" +
    "\000\002\012\006\000\002\012\004\000\002\003\006\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\013\012\000\002\005" +
    "\003\000\002\005\005\000\002\036\002\000\002\005\005" +
    "\000\002\037\002\000\002\005\005\000\002\005\002\000" +
    "\002\040\002\000\002\025\006\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\006\002\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\005\000\002\006\003\000\002\006" +
    "\005\000\002\006\003\000\002\023\007\000\002\024\003" +
    "\000\002\024\005\000\002\024\002\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\010" +
    "\007\000\002\010\007\000\002\010\007\000\002\010\007" +
    "\000\002\010\007\000\002\010\007\000\002\016\012\000" +
    "\002\016\016\000\002\016\016\000\002\016\016\000\002" +
    "\016\016\000\002\016\016\000\002\016\016\000\002\016" +
    "\016\000\002\016\016\000\002\017\021\000\002\017\021" +
    "\000\002\017\021\000\002\017\021\000\002\017\021\000" +
    "\002\017\021\000\002\017\021\000\002\017\021\000\002" +
    "\004\010\000\002\026\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\004\025\005\001\002\000\004\002\u0182\001" +
    "\002\000\004\020\006\001\002\000\006\003\007\044\011" +
    "\001\002\000\010\003\013\020\015\045\012\001\002\000" +
    "\004\026\000\001\002\000\010\003\013\020\015\045\012" +
    "\001\002\000\006\026\uffe5\042\uffe5\001\002\000\004\052" +
    "\041\001\002\000\006\026\uffe9\042\uffe9\001\002\000\006" +
    "\003\016\052\017\001\002\000\012\003\021\034\024\035" +
    "\023\036\022\001\002\000\012\003\021\034\024\035\023" +
    "\036\022\001\002\000\012\003\027\005\026\006\025\007" +
    "\030\001\002\000\012\003\uffea\005\uffea\006\uffea\007\uffea" +
    "\001\002\000\012\003\uffeb\005\uffeb\006\uffeb\007\uffeb\001" +
    "\002\000\012\003\uffec\005\uffec\006\uffec\007\uffec\001\002" +
    "\000\012\003\uffed\005\uffed\006\uffed\007\uffed\001\002\000" +
    "\010\026\uffef\045\uffef\046\uffef\001\002\000\010\026\ufff1" +
    "\045\ufff1\046\ufff1\001\002\000\010\026\uffee\045\uffee\046" +
    "\uffee\001\002\000\010\026\ufff0\045\ufff0\046\ufff0\001\002" +
    "\000\006\045\032\046\033\001\002\000\006\026\uffe6\042" +
    "\uffe6\001\002\000\010\003\013\020\015\045\012\001\002" +
    "\000\006\026\uffe7\042\uffe7\001\002\000\012\003\027\005" +
    "\026\006\025\007\030\001\002\000\004\046\037\001\002" +
    "\000\010\003\013\020\015\045\012\001\002\000\006\026" +
    "\uffe3\042\uffe3\001\002\000\012\003\021\034\024\035\023" +
    "\036\022\001\002\000\012\003\027\005\026\006\025\007" +
    "\030\001\002\000\004\046\044\001\002\000\010\003\013" +
    "\020\015\045\012\001\002\000\006\026\uffe4\042\uffe4\001" +
    "\002\000\004\026\047\001\002\000\014\003\052\020\056" +
    "\025\054\027\uffc5\041\055\001\002\000\004\027\u017c\001" +
    "\002\000\006\027\uffcb\046\u017a\001\002\000\004\020\u0165" +
    "\001\002\000\014\003\uffc7\020\uffc7\025\uffc7\027\uffc7\041" +
    "\uffc7\001\002\000\006\003\u014f\020\u0150\001\002\000\006" +
    "\003\117\020\120\001\002\000\010\003\063\047\uffc4\052" +
    "\064\001\002\000\014\003\uffc9\020\uffc9\025\uffc9\027\uffc9" +
    "\041\uffc9\001\002\000\014\003\052\020\056\025\054\027" +
    "\uffc5\041\055\001\002\000\004\027\uffc8\001\002\000\004" +
    "\047\115\001\002\000\020\003\066\005\067\006\065\007" +
    "\071\020\056\027\uffbf\046\uffbf\001\002\000\016\003\066" +
    "\005\067\006\065\007\071\027\uffbf\046\uffbf\001\002\000" +
    "\012\003\105\004\104\027\uffb7\046\uffb7\001\002\000\006" +
    "\027\uffb0\046\uffb0\001\002\000\012\003\077\004\100\027" +
    "\uffb2\046\uffb2\001\002\000\006\027\uffc1\046\uffc1\001\002" +
    "\000\012\003\072\004\073\027\uffb4\046\uffb4\001\002\000" +
    "\004\033\076\001\002\000\006\003\075\033\074\001\002" +
    "\000\006\027\uffb3\046\uffb3\001\002\000\006\027\uffb8\046" +
    "\uffb8\001\002\000\006\027\uffb9\046\uffb9\001\002\000\004" +
    "\022\103\001\002\000\006\003\101\022\102\001\002\000" +
    "\006\027\uffba\046\uffba\001\002\000\006\027\uffb1\046\uffb1" +
    "\001\002\000\006\027\uffbb\046\uffbb\001\002\000\010\003" +
    "\111\050\110\051\112\001\002\000\006\050\106\051\107" +
    "\001\002\000\006\027\uffbe\046\uffbe\001\002\000\006\027" +
    "\uffbd\046\uffbd\001\002\000\006\027\uffb5\046\uffb5\001\002" +
    "\000\006\027\uffbc\046\uffbc\001\002\000\006\027\uffb6\046" +
    "\uffb6\001\002\000\006\027\uffc2\046\uffc2\001\002\000\006" +
    "\027\uffc0\046\uffc0\001\002\000\004\020\056\001\002\000" +
    "\006\027\uffc3\046\uffc3\001\002\000\006\003\007\044\011" +
    "\001\002\000\006\003\007\044\011\001\002\000\004\042" +
    "\122\001\002\000\012\003\027\005\026\006\025\007\030" +
    "\001\002\000\004\026\124\001\002\000\014\003\052\020" +
    "\056\025\054\027\uffc5\041\055\001\002\000\004\027\126" +
    "\001\002\000\024\003\141\010\133\013\136\015\145\020" +
    "\135\031\142\032\132\042\ufff2\055\137\001\002\000\040" +
    "\003\141\010\133\011\ufff2\012\ufff2\013\136\014\ufff2\015" +
    "\145\020\135\024\ufff2\030\ufff2\031\142\032\132\037\ufff2" +
    "\042\ufff2\055\137\001\002\000\040\003\141\010\133\011" +
    "\ufff2\012\ufff2\013\136\014\ufff2\015\145\020\135\024\ufff2" +
    "\030\ufff2\031\142\032\132\037\ufff2\042\ufff2\055\137\001" +
    "\002\000\040\003\141\010\133\011\ufff2\012\ufff2\013\136" +
    "\014\ufff2\015\145\020\135\024\ufff2\030\ufff2\031\142\032" +
    "\132\037\ufff2\042\ufff2\055\137\001\002\000\006\003\u0131" +
    "\044\u0132\001\002\000\004\044\u011e\001\002\000\040\003" +
    "\141\010\133\011\ufff2\012\ufff2\013\136\014\ufff2\015\145" +
    "\020\135\024\ufff2\030\ufff2\031\142\032\132\037\ufff2\042" +
    "\ufff2\055\137\001\002\000\012\003\340\004\341\044\222" +
    "\052\342\001\002\000\024\003\141\010\133\013\136\015" +
    "\145\020\135\031\142\032\132\037\ufff2\055\137\001\002" +
    "\000\004\020\317\001\002\000\040\003\141\010\133\011" +
    "\ufff2\012\ufff2\013\136\014\ufff2\015\145\020\135\024\ufff2" +
    "\030\ufff2\031\142\032\132\037\ufff2\042\ufff2\055\137\001" +
    "\002\000\006\044\274\052\273\001\002\000\006\003\252" +
    "\044\253\001\002\000\040\003\141\010\133\011\ufff2\012" +
    "\ufff2\013\136\014\ufff2\015\145\020\135\024\ufff2\030\ufff2" +
    "\031\142\032\132\037\ufff2\042\ufff2\055\137\001\002\000" +
    "\040\003\141\010\133\011\ufff2\012\ufff2\013\136\014\ufff2" +
    "\015\145\020\135\024\ufff2\030\ufff2\031\142\032\132\037" +
    "\ufff2\042\ufff2\055\137\001\002\000\004\044\176\001\002" +
    "\000\040\003\141\010\133\011\ufff2\012\ufff2\013\136\014" +
    "\ufff2\015\145\020\135\024\ufff2\030\ufff2\031\142\032\132" +
    "\037\ufff2\042\ufff2\055\137\001\002\000\004\042\150\001" +
    "\002\000\006\003\151\020\152\001\002\000\004\046\171" +
    "\001\002\000\006\003\153\046\154\001\002\000\004\030" +
    "\166\001\002\000\006\003\155\030\156\001\002\000\004" +
    "\020\164\001\002\000\006\003\157\020\160\001\002\000" +
    "\004\046\163\001\002\000\006\003\161\046\162\001\002" +
    "\000\014\003\uff8e\020\uff8e\025\uff8e\027\uff8e\041\uff8e\001" +
    "\002\000\014\003\uff95\020\uff95\025\uff95\027\uff95\041\uff95" +
    "\001\002\000\014\003\uff8f\020\uff8f\025\uff8f\027\uff8f\041" +
    "\uff8f\001\002\000\004\046\165\001\002\000\014\003\uff90" +
    "\020\uff90\025\uff90\027\uff90\041\uff90\001\002\000\004\020" +
    "\167\001\002\000\004\046\170\001\002\000\014\003\uff91" +
    "\020\uff91\025\uff91\027\uff91\041\uff91\001\002\000\004\030" +
    "\172\001\002\000\004\020\173\001\002\000\004\046\174" +
    "\001\002\000\014\003\uff92\020\uff92\025\uff92\027\uff92\041" +
    "\uff92\001\002\000\020\011\ufff3\012\ufff3\014\ufff3\024\ufff3" +
    "\030\ufff3\037\ufff3\042\ufff3\001\002\000\014\020\203\022" +
    "\206\044\177\050\204\051\202\001\002\000\014\020\203" +
    "\022\206\044\177\050\204\051\202\001\002\000\012\004" +
    "\242\016\227\017\230\021\243\001\002\000\024\004\uffd8" +
    "\016\235\017\236\021\uffd8\045\uffd8\046\uffd8\047\uffd8\053" +
    "\uffd8\054\uffd8\001\002\000\024\004\uffda\016\uffda\017\uffda" +
    "\021\uffda\045\uffda\046\uffda\047\uffda\053\uffda\054\uffda\001" +
    "\002\000\026\004\uffd9\016\uffd9\017\uffd9\021\uffd9\044\222" +
    "\045\uffd9\046\uffd9\047\uffd9\053\uffd9\054\uffd9\001\002\000" +
    "\024\004\uffdb\016\uffdb\017\uffdb\021\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\053\uffdb\054\uffdb\001\002\000\012\045\uffe0\046" +
    "\uffe0\053\217\054\216\001\002\000\024\004\uffdc\016\uffdc" +
    "\017\uffdc\021\uffdc\045\uffdc\046\uffdc\047\uffdc\053\uffdc\054" +
    "\uffdc\001\002\000\024\004\uffd7\016\uffd7\017\uffd7\021\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\053\uffd7\054\uffd7\001\002\000" +
    "\004\045\211\001\002\000\004\013\212\001\002\000\024" +
    "\003\141\010\133\013\136\014\ufff2\015\145\020\135\031" +
    "\142\032\132\055\137\001\002\000\004\014\214\001\002" +
    "\000\004\046\215\001\002\000\040\003\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\020\uffcc\024\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\037\uffcc\042\uffcc\055\uffcc\001" +
    "\002\000\014\020\203\022\206\044\177\050\204\051\202" +
    "\001\002\000\014\020\203\022\206\044\177\050\204\051" +
    "\202\001\002\000\006\045\uffe2\046\uffe2\001\002\000\006" +
    "\045\uffe1\046\uffe1\001\002\000\016\020\203\022\206\044" +
    "\177\045\uffac\050\204\051\202\001\002\000\012\016\227" +
    "\017\230\045\uffae\047\231\001\002\000\004\045\225\001" +
    "\002\000\004\046\226\001\002\000\062\003\uffaf\004\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\037\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\001\002\000\014\020\203\022\206" +
    "\044\177\050\204\051\202\001\002\000\014\020\203\022" +
    "\206\044\177\050\204\051\202\001\002\000\016\020\203" +
    "\022\206\044\177\045\uffac\050\204\051\202\001\002\000" +
    "\004\045\uffad\001\002\000\024\004\uffcd\016\uffcd\017\uffcd" +
    "\021\uffcd\045\uffcd\046\uffcd\047\uffcd\053\uffcd\054\uffcd\001" +
    "\002\000\024\004\uffce\016\uffce\017\230\021\uffce\045\uffce" +
    "\046\uffce\047\uffce\053\uffce\054\uffce\001\002\000\014\020" +
    "\203\022\206\044\177\050\204\051\202\001\002\000\014" +
    "\020\203\022\206\044\177\050\204\051\202\001\002\000" +
    "\024\004\uffd0\016\uffd0\017\uffd0\021\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\053\uffd0\054\uffd0\001\002\000\024\004\uffd1\016" +
    "\uffd1\017\230\021\uffd1\045\uffd1\046\uffd1\047\uffd1\053\uffd1" +
    "\054\uffd1\001\002\000\014\020\203\022\206\044\177\050" +
    "\204\051\202\001\002\000\014\020\uffdd\022\uffdd\044\uffdd" +
    "\050\uffdd\051\uffdd\001\002\000\014\020\uffde\022\uffde\044" +
    "\uffde\050\uffde\051\uffde\001\002\000\016\016\227\017\230" +
    "\045\uffdf\046\uffdf\053\uffdf\054\uffdf\001\002\000\006\016" +
    "\227\017\230\001\002\000\010\016\235\017\236\045\247" +
    "\001\002\000\024\004\uffcf\016\uffcf\017\uffcf\021\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\053\uffcf\054\uffcf\001\002\000\020" +
    "\011\ufff6\012\ufff6\014\ufff6\024\ufff6\030\ufff6\037\ufff6\042" +
    "\ufff6\001\002\000\020\011\ufff8\012\ufff8\014\ufff8\024\ufff8" +
    "\030\ufff8\037\ufff8\042\ufff8\001\002\000\004\043\270\001" +
    "\002\000\010\003\254\020\256\043\255\001\002\000\004" +
    "\045\266\001\002\000\006\003\261\045\262\001\002\000" +
    "\004\045\257\001\002\000\004\046\260\001\002\000\040" +
    "\003\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\020\uffaa\024\uffaa\030\uffaa\031\uffaa\032\uffaa\037\uffaa" +
    "\042\uffaa\055\uffaa\001\002\000\004\046\265\001\002\000" +
    "\006\003\263\046\264\001\002\000\040\003\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\020\uffa5\024" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\037\uffa5\042\uffa5\055\uffa5" +
    "\001\002\000\040\003\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\020\uffab\024\uffab\030\uffab\031\uffab" +
    "\032\uffab\037\uffab\042\uffab\055\uffab\001\002\000\040\003" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\020\uffa6\024\uffa6\030\uffa6\031\uffa6\032\uffa6\037\uffa6\042" +
    "\uffa6\055\uffa6\001\002\000\004\046\267\001\002\000\040" +
    "\003\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\020\uffa7\024\uffa7\030\uffa7\031\uffa7\032\uffa7\037\uffa7" +
    "\042\uffa7\055\uffa7\001\002\000\004\045\271\001\002\000" +
    "\004\046\272\001\002\000\040\003\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8\024\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\037\uffa8\042\uffa8\055\uffa8\001\002" +
    "\000\004\013\303\001\002\000\006\020\276\043\275\001" +
    "\002\000\004\045\301\001\002\000\004\045\277\001\002" +
    "\000\004\046\300\001\002\000\040\003\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\020\uffa3\024\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\037\uffa3\042\uffa3\055\uffa3\001" +
    "\002\000\004\046\302\001\002\000\040\003\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\020\uffa9\024" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\037\uffa9\042\uffa9\055\uffa9" +
    "\001\002\000\004\037\304\001\002\000\004\020\305\001" +
    "\002\000\004\040\306\001\002\000\014\020\203\022\206" +
    "\044\177\050\204\051\202\001\002\000\004\046\310\001" +
    "\002\000\024\003\141\010\133\013\136\014\ufff2\015\145" +
    "\020\135\031\142\032\132\055\137\001\002\000\004\014" +
    "\312\001\002\000\004\020\313\001\002\000\004\046\314" +
    "\001\002\000\040\003\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\020\uff9d\024\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\037\uff9d\042\uff9d\055\uff9d\001\002\000\020\011" +
    "\ufffa\012\ufffa\014\ufffa\024\ufffa\030\ufffa\037\ufffa\042\ufffa" +
    "\001\002\000\004\013\325\001\002\000\004\034\320\001" +
    "\002\000\004\020\321\001\002\000\004\056\322\001\002" +
    "\000\004\056\323\001\002\000\004\022\324\001\002\000" +
    "\004\013\uff8c\001\002\000\024\003\141\010\133\013\136" +
    "\014\ufff2\015\145\020\135\031\142\032\132\055\137\001" +
    "\002\000\004\014\327\001\002\000\004\046\330\001\002" +
    "\000\040\003\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\020\uff8d\024\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\037\uff8d\042\uff8d\055\uff8d\001\002\000\004\037\332\001" +
    "\002\000\004\040\333\001\002\000\014\020\203\022\206" +
    "\044\177\050\204\051\202\001\002\000\004\046\335\001" +
    "\002\000\004\014\336\001\002\000\004\046\337\001\002" +
    "\000\040\003\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\020\uff9e\024\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\037\uff9e\042\uff9e\055\uff9e\001\002\000\004\013\u0113\001" +
    "\002\000\014\020\203\022\206\044\177\050\204\051\202" +
    "\001\002\000\006\003\344\013\343\001\002\000\006\003" +
    "\356\037\357\001\002\000\004\037\345\001\002\000\004" +
    "\020\346\001\002\000\004\040\347\001\002\000\014\020" +
    "\203\022\206\044\177\050\204\051\202\001\002\000\004" +
    "\046\351\001\002\000\024\003\141\010\133\013\136\014" +
    "\ufff2\015\145\020\135\031\142\032\132\055\137\001\002" +
    "\000\004\014\353\001\002\000\004\020\354\001\002\000" +
    "\004\046\355\001\002\000\040\003\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\020\uff9b\024\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\037\uff9b\042\uff9b\055\uff9b\001\002" +
    "\000\004\020\u0109\001\002\000\006\003\360\020\361\001" +
    "\002\000\004\040\u0102\001\002\000\006\003\363\040\362" +
    "\001\002\000\014\020\203\022\206\044\177\050\204\051" +
    "\202\001\002\000\014\020\203\022\206\044\177\050\204" +
    "\051\202\001\002\000\004\046\365\001\002\000\024\003" +
    "\141\010\133\013\136\014\ufff2\015\145\020\135\031\142" +
    "\032\132\055\137\001\002\000\004\014\367\001\002\000" +
    "\004\020\370\001\002\000\004\046\371\001\002\000\040" +
    "\003\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\020\uff98\024\uff98\030\uff98\031\uff98\032\uff98\037\uff98" +
    "\042\uff98\055\uff98\001\002\000\004\046\373\001\002\000" +
    "\024\003\141\010\133\013\136\014\ufff2\015\145\020\135" +
    "\031\142\032\132\055\137\001\002\000\004\014\375\001" +
    "\002\000\006\003\376\020\377\001\002\000\004\046\u0101" +
    "\001\002\000\004\003\u0100\001\002\000\040\003\uff96\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\020\uff96" +
    "\024\uff96\030\uff96\031\uff96\032\uff96\037\uff96\042\uff96\055" +
    "\uff96\001\002\000\040\003\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\020\uff97\024\uff97\030\uff97\031" +
    "\uff97\032\uff97\037\uff97\042\uff97\055\uff97\001\002\000\014" +
    "\020\203\022\206\044\177\050\204\051\202\001\002\000" +
    "\004\046\u0104\001\002\000\024\003\141\010\133\013\136" +
    "\014\ufff2\015\145\020\135\031\142\032\132\055\137\001" +
    "\002\000\004\014\u0106\001\002\000\004\020\u0107\001\002" +
    "\000\004\046\u0108\001\002\000\040\003\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\020\uff99\024\uff99" +
    "\030\uff99\031\uff99\032\uff99\037\uff99\042\uff99\055\uff99\001" +
    "\002\000\004\040\u010a\001\002\000\014\020\203\022\206" +
    "\044\177\050\204\051\202\001\002\000\004\046\u010c\001" +
    "\002\000\024\003\141\010\133\013\136\014\ufff2\015\145" +
    "\020\135\031\142\032\132\055\137\001\002\000\004\014" +
    "\u010e\001\002\000\004\020\u010f\001\002\000\004\046\u0110" +
    "\001\002\000\040\003\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\020\uff9a\024\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\037\uff9a\042\uff9a\055\uff9a\001\002\000\010\016" +
    "\227\017\230\046\u0112\001\002\000\040\003\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\020\uffd2\024" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\037\uffd2\042\uffd2\055\uffd2" +
    "\001\002\000\004\037\u0114\001\002\000\004\020\u0115\001" +
    "\002\000\004\040\u0116\001\002\000\014\020\203\022\206" +
    "\044\177\050\204\051\202\001\002\000\004\046\u0118\001" +
    "\002\000\024\003\141\010\133\013\136\014\ufff2\015\145" +
    "\020\135\031\142\032\132\055\137\001\002\000\004\014" +
    "\u011a\001\002\000\004\020\u011b\001\002\000\004\046\u011c" +
    "\001\002\000\040\003\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\020\uff9c\024\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\037\uff9c\042\uff9c\055\uff9c\001\002\000\020\011" +
    "\ufff5\012\ufff5\014\ufff5\024\ufff5\030\ufff5\037\ufff5\042\ufff5" +
    "\001\002\000\014\020\203\022\206\044\177\050\204\051" +
    "\202\001\002\000\004\045\u0120\001\002\000\004\023\u0121" +
    "\001\002\000\030\003\141\010\133\011\ufff2\012\ufff2\013" +
    "\136\015\145\020\135\024\ufff2\031\142\032\132\055\137" +
    "\001\002\000\010\011\u0126\012\u0123\024\u0125\001\002\000" +
    "\004\044\u012b\001\002\000\040\003\uffd6\010\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\020\uffd6\024\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\037\uffd6\042\uffd6\055\uffd6\001\002" +
    "\000\004\046\u012a\001\002\000\024\003\141\010\133\013" +
    "\136\015\145\020\135\024\ufff2\031\142\032\132\055\137" +
    "\001\002\000\004\024\u0128\001\002\000\004\046\u0129\001" +
    "\002\000\040\003\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\020\uffd4\024\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\037\uffd4\042\uffd4\055\uffd4\001\002\000\040\003\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\020" +
    "\uffd3\024\uffd3\030\uffd3\031\uffd3\032\uffd3\037\uffd3\042\uffd3" +
    "\055\uffd3\001\002\000\014\020\203\022\206\044\177\050" +
    "\204\051\202\001\002\000\004\045\u012d\001\002\000\004" +
    "\023\u012e\001\002\000\030\003\141\010\133\011\ufff2\012" +
    "\ufff2\013\136\015\145\020\135\024\ufff2\031\142\032\132" +
    "\055\137\001\002\000\010\011\u0126\012\u0123\024\u0125\001" +
    "\002\000\040\003\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\020\uffd5\024\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\037\uffd5\042\uffd5\055\uffd5\001\002\000\004\020\u013c" +
    "\001\002\000\006\003\u0133\020\u0134\001\002\000\004\045" +
    "\u013a\001\002\000\006\003\u0135\045\u0136\001\002\000\004" +
    "\046\u0139\001\002\000\006\003\u0137\046\u0138\001\002\000" +
    "\040\003\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\020\uff9f\024\uff9f\030\uff9f\031\uff9f\032\uff9f\037" +
    "\uff9f\042\uff9f\055\uff9f\001\002\000\040\003\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\020\uffa4\024" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\037\uffa4\042\uffa4\055\uffa4" +
    "\001\002\000\040\003\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\020\uffa0\024\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\037\uffa0\042\uffa0\055\uffa0\001\002\000\004\046" +
    "\u013b\001\002\000\040\003\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\020\uffa1\024\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\037\uffa1\042\uffa1\055\uffa1\001\002\000\004" +
    "\045\u013d\001\002\000\004\046\u013e\001\002\000\040\003" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\020\uffa2\024\uffa2\030\uffa2\031\uffa2\032\uffa2\037\uffa2\042" +
    "\uffa2\055\uffa2\001\002\000\020\011\ufff7\012\ufff7\014\ufff7" +
    "\024\ufff7\030\ufff7\037\ufff7\042\ufff7\001\002\000\020\011" +
    "\ufff4\012\ufff4\014\ufff4\024\ufff4\030\ufff4\037\ufff4\042\ufff4" +
    "\001\002\000\020\011\ufff9\012\ufff9\014\ufff9\024\ufff9\030" +
    "\ufff9\037\ufff9\042\ufff9\001\002\000\004\042\u0143\001\002" +
    "\000\012\003\027\005\026\006\025\007\030\001\002\000" +
    "\004\026\u0145\001\002\000\014\003\052\020\056\025\054" +
    "\027\uffc5\041\055\001\002\000\004\027\u0147\001\002\000" +
    "\024\003\141\010\133\013\136\015\145\020\135\031\142" +
    "\032\132\042\ufff2\055\137\001\002\000\004\042\u0149\001" +
    "\002\000\004\020\u014a\001\002\000\004\046\u014b\001\002" +
    "\000\004\030\u014c\001\002\000\004\020\u014d\001\002\000" +
    "\004\046\u014e\001\002\000\014\003\uff93\020\uff93\025\uff93" +
    "\027\uff93\041\uff93\001\002\000\006\003\007\044\011\001" +
    "\002\000\006\003\007\044\011\001\002\000\004\026\u0152" +
    "\001\002\000\014\003\052\020\056\025\054\027\uffc5\041" +
    "\055\001\002\000\004\027\u0154\001\002\000\024\003\141" +
    "\010\133\013\136\015\145\020\135\030\ufff2\031\142\032" +
    "\132\055\137\001\002\000\004\030\u0156\001\002\000\006" +
    "\003\u0157\020\u0158\001\002\000\004\046\u015a\001\002\000" +
    "\004\046\u0159\001\002\000\014\003\ufffe\020\ufffe\025\ufffe" +
    "\027\ufffe\041\ufffe\001\002\000\014\003\ufffb\020\ufffb\025" +
    "\ufffb\027\ufffb\041\ufffb\001\002\000\004\026\u015c\001\002" +
    "\000\014\003\052\020\056\025\054\027\uffc5\041\055\001" +
    "\002\000\004\027\u015e\001\002\000\024\003\141\010\133" +
    "\013\136\015\145\020\135\030\ufff2\031\142\032\132\055" +
    "\137\001\002\000\004\030\u0160\001\002\000\004\020\u0161" +
    "\001\002\000\004\046\u0162\001\002\000\014\003\ufffc\020" +
    "\ufffc\025\ufffc\027\ufffc\041\ufffc\001\002\000\014\003\052" +
    "\020\056\025\054\027\uffc5\041\055\001\002\000\004\027" +
    "\uffc6\001\002\000\006\003\007\044\011\001\002\000\006" +
    "\026\u0167\042\u0168\001\002\000\014\003\052\020\056\025" +
    "\054\027\uffc5\041\055\001\002\000\012\003\027\005\026" +
    "\006\025\007\030\001\002\000\004\026\u016a\001\002\000" +
    "\014\003\052\020\056\025\054\027\uffc5\041\055\001\002" +
    "\000\004\027\u016c\001\002\000\024\003\141\010\133\013" +
    "\136\015\145\020\135\031\142\032\132\042\ufff2\055\137" +
    "\001\002\000\004\042\u016e\001\002\000\004\020\u016f\001" +
    "\002\000\004\046\u0170\001\002\000\004\030\u0171\001\002" +
    "\000\004\020\u0172\001\002\000\004\046\u0173\001\002\000" +
    "\014\003\uff94\020\uff94\025\uff94\027\uff94\041\uff94\001\002" +
    "\000\004\027\u0175\001\002\000\024\003\141\010\133\013" +
    "\136\015\145\020\135\030\ufff2\031\142\032\132\055\137" +
    "\001\002\000\004\030\u0177\001\002\000\004\020\u0178\001" +
    "\002\000\004\046\u0179\001\002\000\014\003\ufffd\020\ufffd" +
    "\025\ufffd\027\ufffd\041\ufffd\001\002\000\014\003\052\020" +
    "\056\025\054\027\uffc5\041\055\001\002\000\004\027\uffca" +
    "\001\002\000\024\003\141\010\133\013\136\015\145\020" +
    "\135\030\ufff2\031\142\032\132\055\137\001\002\000\004" +
    "\030\u017e\001\002\000\004\020\u017f\001\002\000\004\046" +
    "\u0180\001\002\000\004\002\uffff\001\002\000\006\026\uffe8" +
    "\042\uffe8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\007\001\001\000\004\021\u0180" +
    "\001\001\000\004\035\045\001\001\000\004\021\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\034\001\001\000\004\027" +
    "\017\001\001\000\004\030\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\033\001\001\000\002\001\001\000\004\030\035\001\001" +
    "\000\002\001\001\000\004\021\037\001\001\000\002\001" +
    "\001\000\004\027\041\001\001\000\004\030\042\001\001" +
    "\000\002\001\001\000\004\021\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\047\017\056\022\052" +
    "\025\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\061\001\001\000\004\036" +
    "\057\001\001\000\012\005\060\017\056\022\052\025\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\113\025\112\001\001\000\004\006\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\115\001\001\000\002\001\001" +
    "\000\004\020\u0141\001\001\000\004\020\120\001\001\000" +
    "\002\001\001\000\004\030\122\001\001\000\002\001\001" +
    "\000\012\005\124\017\056\022\052\025\050\001\001\000" +
    "\002\001\001\000\024\003\142\004\127\007\130\010\143" +
    "\011\137\013\126\014\146\016\133\023\145\001\001\000" +
    "\024\003\142\004\127\007\130\010\143\011\137\013\126" +
    "\014\u0140\016\133\023\145\001\001\000\024\003\142\004" +
    "\127\007\130\010\143\011\137\013\126\014\u013f\016\133" +
    "\023\145\001\001\000\024\003\142\004\127\007\130\010" +
    "\143\011\137\013\126\014\u013e\016\133\023\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\142\004" +
    "\127\007\130\010\143\011\137\013\126\014\u011c\016\133" +
    "\023\145\001\001\000\002\001\001\000\024\003\142\004" +
    "\127\007\130\010\143\011\137\013\126\014\330\016\133" +
    "\023\145\001\001\000\004\026\315\001\001\000\024\003" +
    "\142\004\127\007\130\010\143\011\137\013\126\014\314" +
    "\016\133\023\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\142\004\127\007\130\010\143\011\137" +
    "\013\126\014\250\016\133\023\145\001\001\000\024\003" +
    "\142\004\127\007\130\010\143\011\137\013\126\014\247" +
    "\016\133\023\145\001\001\000\002\001\001\000\024\003" +
    "\142\004\127\007\130\010\143\011\137\013\126\014\174" +
    "\016\133\023\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\200\023\206" +
    "\031\207\032\204\033\177\001\001\000\010\015\245\023" +
    "\206\033\244\001\001\000\004\034\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\142\004" +
    "\127\007\130\010\143\011\137\013\126\014\212\016\133" +
    "\023\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\200\023\206\031\220\032\204" +
    "\033\177\001\001\000\014\015\200\023\206\031\217\032" +
    "\204\033\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\200\023\206\024\223\033\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\200\023\206\033\233\001\001\000" +
    "\010\015\200\023\206\033\232\001\001\000\012\015\200" +
    "\023\206\024\231\033\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\200\023\206" +
    "\033\237\001\001\000\010\015\200\023\206\033\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\200" +
    "\023\206\033\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\200\023\206" +
    "\031\306\032\204\033\177\001\001\000\002\001\001\000" +
    "\024\003\142\004\127\007\130\010\143\011\137\013\126" +
    "\014\310\016\133\023\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\142\004\127\007\130\010" +
    "\143\011\137\013\126\014\325\016\133\023\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\200\023\206" +
    "\031\333\032\204\033\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\200\023\206\033\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\200\023\206\031" +
    "\347\032\204\033\177\001\001\000\002\001\001\000\024" +
    "\003\142\004\127\007\130\010\143\011\137\013\126\014" +
    "\351\016\133\023\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\200\023\206\031\371\032\204\033\177\001" +
    "\001\000\014\015\200\023\206\031\363\032\204\033\177" +
    "\001\001\000\002\001\001\000\024\003\142\004\127\007" +
    "\130\010\143\011\137\013\126\014\365\016\133\023\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\142" +
    "\004\127\007\130\010\143\011\137\013\126\014\373\016" +
    "\133\023\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\200\023\206\031\u0102\032\204" +
    "\033\177\001\001\000\002\001\001\000\024\003\142\004" +
    "\127\007\130\010\143\011\137\013\126\014\u0104\016\133" +
    "\023\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\200\023\206\031\u010a\032\204\033\177\001\001\000" +
    "\002\001\001\000\024\003\142\004\127\007\130\010\143" +
    "\011\137\013\126\014\u010c\016\133\023\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\200" +
    "\023\206\031\u0116\032\204\033\177\001\001\000\002\001" +
    "\001\000\024\003\142\004\127\007\130\010\143\011\137" +
    "\013\126\014\u0118\016\133\023\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\200\023\206\031\u011e\032" +
    "\204\033\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\142\004\127\007\130\010\143\011\137\013" +
    "\126\014\u0121\016\133\023\145\001\001\000\004\012\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\142\004\127\007\130\010\143\011\137" +
    "\013\126\014\u0126\016\133\023\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\200\023\206\031\u012b\032\204\033\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\142" +
    "\004\127\007\130\010\143\011\137\013\126\014\u012e\016" +
    "\133\023\145\001\001\000\004\012\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u0143" +
    "\001\001\000\002\001\001\000\012\005\u0145\017\056\022" +
    "\052\025\050\001\001\000\002\001\001\000\024\003\142" +
    "\004\127\007\130\010\143\011\137\013\126\014\u0147\016" +
    "\133\023\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u015a\001\001" +
    "\000\004\020\u0150\001\001\000\002\001\001\000\012\005" +
    "\u0152\017\056\022\052\025\050\001\001\000\002\001\001" +
    "\000\024\003\142\004\127\007\130\010\143\011\137\013" +
    "\126\014\u0154\016\133\023\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\u015c\017\056\022\052\025\050\001\001\000\002\001" +
    "\001\000\024\003\142\004\127\007\130\010\143\011\137" +
    "\013\126\014\u015e\016\133\023\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\u0163\017\056\022\052\025\050\001\001\000" +
    "\002\001\001\000\004\020\u0165\001\001\000\002\001\001" +
    "\000\012\005\u0173\017\056\022\052\025\050\001\001\000" +
    "\004\030\u0168\001\001\000\002\001\001\000\012\005\u016a" +
    "\017\056\022\052\025\050\001\001\000\002\001\001\000" +
    "\024\003\142\004\127\007\130\010\143\011\137\013\126" +
    "\014\u016c\016\133\023\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\142\004\127\007\130\010\143\011\137" +
    "\013\126\014\u0175\016\133\023\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\u017a\017\056\022\052\025\050\001\001\000" +
    "\002\001\001\000\024\003\142\004\127\007\130\010\143" +
    "\011\137\013\126\014\u017c\016\133\023\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




// AST
    ArrayList errores = new ArrayList();
    public Nodo raiz;
    public String AmbitoActual ="Global";
    public int cont = 0;
    String tipoActual = " ";
    int offsetActual = 0;
    ArrayList <String> identificadores = new ArrayList();
    String tipoPrincipal=" ";

    public void agregarAmbito(Nodo nodo, String ambito){

        for (int i = 0; i <nodo.getHijos().size(); i++) {
            agregarAmbito(nodo.getHijos().get(i), ambito);
            nodo.getHijos().get(i).setAmbito(ambito); 
        }


    }
public void syntax_error (Symbol s){
    errores.add("Esta es Linea: " + (s.left) + " y Columna: " + (s.right));
}
public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido, por favor revise la linea: " + (s.left + 1) + " y columna: " + (s.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 tipoPrincipal = tipoActual + " -> void"; tipoActual =" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS NT$0 TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  
                AmbitoActual = "Global";
                Nodo nodo = new Nodo(id.toString(),0, tipoPrincipal,offsetActual, AmbitoActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.setHijos(d.getHijos());
                parser.raiz = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  
                tipoActual = tipoActual + " -> void"; 
                AmbitoActual = id.toString();
                agregarAmbito(d, AmbitoActual);
                d.setEtiqueta(id.toString());
                Nodo nodo = new Nodo(id.toString(),parser.cont, tipoActual,offsetActual,AmbitoActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.addHijo(d);
                AmbitoActual = "Global";
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_P ::= error TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"procedure\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_P ::= TK_PROCEDURE error PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= DECISION STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= ASIGNACIONES STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= PUT STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= GET STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTS ::= LOOP STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS ::= FOR STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS ::= CALL STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = i.toString();
                    }
                    else 
                    {
                        tipoActual = tipoActual + " x " + i.toString();
                    }
                    RESULT = i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(tipoActual.equalsIgnoreCase(" "))
                    {

                        tipoActual = f.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + f.toString();
                    }
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = b.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + b.toString();
                    }
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOS_PARAMETROS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de parámetros permitidos son in, out e inout. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS ::= error PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS_PRIME ::= error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS_PRIME ::= TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= CONDICIONP TK_AND CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= CONDICIONP TK_OR CONDICION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCONDICION ::= TK_OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCONDICION ::= TK_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= OPARIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECISION ::= TK_IF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN STATEMENTS DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN STATEMENTS DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECISION_PRIME ::= TK_ELSE STATEMENTS TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACIONES ::= TK_ID TK_IGUAL VALOR TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPARIT ::= OPARIT TK_OPADICION VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPARIT ::= OPARIT TK_MULTI VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPARIT ::= TK_PARENTESISI OPARIT TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPARIT ::= VALOR TK_OPADICION VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPARIT ::= VALOR TK_MULTI VALOR 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= TK_WHILE TK_PARENTESISI CONDICION TK_PARENTESISD TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONES ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   AmbitoActual = "Global";
                   Nodo nodo = new Nodo();
                   nodo.setHijos(id);
                   RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    AmbitoActual = "Global";
                    Nodo node = new Nodo("DECLARACION",parser.cont, AmbitoActual);
                    node.setHijos(id);
                    for(int i=0; i<d.getHijos().size();i++){
                        node.addHijo(d.getHijos().get(i));
                    }
                    RESULT = node;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Nodo nodoActual = f;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACIONES ::= FUNCTION NT$1 DECLARACIONES 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    
                    Nodo hijos = d;
                    for(int i=0; i<hijos.getHijos().size();i++)
                    {
                          f.addHijo(hijos.getHijos().get(i));
                    }
                    AmbitoActual = "Global";
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$2 ::= 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Nodo nodoActual = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACIONES ::= PROCEDURE_P NT$2 DECLARACIONES 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo hijos = d;
                    for(int i=0; i<hijos.getHijos().size();i++)
                    {
                          p.addHijo(hijos.getHijos().get(i));
                    }
                    AmbitoActual = "Global";
                    RESULT = p;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont, AmbitoActual);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 identificadores.add(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ID ::= TK_ID NT$3 TK_COMA ID 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ID ::= TK_ID error ID 
            {
              ArrayList<Nodo> RESULT =null;
		 errores.add("Se esperaba un \",\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ID ::= TK_ID TK_COLON TIPOS 
            {
              ArrayList<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            AmbitoActual = "Global";
            Nodo nodo = new Nodo("Variables",parser.cont,AmbitoActual);
            parser.cont++;
            identificadores.add(id.toString());
            for(int i =0; i<identificadores.size();i++)
            {
                nodo.getHijos().add(new Nodo(identificadores.get(i),parser.cont++,t.getEtiqueta(),offsetActual,AmbitoActual));
                parser.cont++;
            }
            identificadores.clear();
            RESULT = nodo.getHijos();

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ID ::= TK_ID error TIPOS 
            {
              ArrayList<Nodo> RESULT =null;
		 errores.add("Se esperaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= TK_BOOLEAN error TK_TRUE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= TK_BOOLEAN error TK_FALSE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= TK_BOOLEAN TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un true o false "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= TK_INTEGER error TK_DIGITO 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS ::= TK_INTEGER TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS ::= TK_FLOAT error TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS ::= TK_FLOAT TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero decimal "); RESULT = new Nodo("ERROR", parser.cont,AmbitoActual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOS ::= TK_FLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOS ::= TK_INTEGER 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo;         
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont,AmbitoActual);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPOS ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CALL ::= TK_ID TK_PARENTESISI LISTA_ARGS TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_ARGS ::= VALOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_ARGS ::= VALOR TK_COMA LISTA_ARGS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_ARGS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PUT ::= TK_PUT TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PUT ::= error TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"put o un if\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PUT ::= TK_PUT error TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PUT ::= TK_PUT TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba una cadena "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un en el put \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // GET ::= error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"get\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // GET ::= TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // GET ::= TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // GET ::= TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOOP ::= TK_LOOP STATEMENTS TK_EXIT TK_WHEN CONDICION TK_PUNTOCOMA TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo proc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                tipoActual = tipoActual + " -> "+tv.toString(); 
                d.setEtiqueta(tipoActual);
                AmbitoActual = id.toString();
                Nodo nodo = new Nodo(id.toString(),parser.cont, tipoActual,offsetActual,AmbitoActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.addHijo(d);
                AmbitoActual = "Global";
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCTION ::= error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"function\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNCTION ::= TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador, begin o return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"end\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR ::= TK_FOR CONDICION_FOR TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICION_FOR ::= TK_ID TK_IN TK_ID TK_PUNTO TK_PUNTO TK_DIGITO 
            {
              ArrayList<Nodo> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
