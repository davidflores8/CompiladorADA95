
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\014\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\005\011\000\002" +
    "\006\011\000\002\006\006\000\002\006\004\000\002\007" +
    "\006\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\004\012\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\002\000\002" +
    "\012\005\000\002\012\005\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\015\005" +
    "\000\002\015\003\000\002\015\005\000\002\016\011\000" +
    "\002\017\007\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\020\004" +
    "\000\002\020\004\000\002\023\010\000\002\023\007\000" +
    "\002\023\010\000\002\023\010\000\002\023\010\000\002" +
    "\010\016\000\002\010\016\000\002\010\016\000\002\010" +
    "\016\000\002\010\016\000\002\010\016\000\002\010\016" +
    "\000\002\010\016\000\002\010\016\000\002\024\021\000" +
    "\002\024\021\000\002\024\021\000\002\024\021\000\002" +
    "\024\021\000\002\024\021" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\004\032\005\001\002\000\004\002\u0131\001" +
    "\002\000\004\011\006\001\002\000\006\003\007\007\011" +
    "\001\002\000\006\003\012\011\014\001\002\000\004\033" +
    "\047\001\002\000\006\003\012\011\014\001\002\000\004" +
    "\040\042\001\002\000\010\003\uffc8\033\uffc8\055\uffc8\001" +
    "\002\000\006\003\015\040\016\001\002\000\012\003\020" +
    "\046\023\047\022\050\021\001\002\000\012\003\020\046" +
    "\023\047\022\050\021\001\002\000\012\003\026\021\025" +
    "\022\024\023\027\001\002\000\012\003\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\001\002\000\012\003\uffca\021\uffca\022\uffca" +
    "\023\uffca\001\002\000\012\003\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\001\002\000\012\003\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\001\002\000\010\003\uffce\010\uffce\017\uffce\001\002\000" +
    "\010\003\uffd0\010\uffd0\017\uffd0\001\002\000\010\003\uffcd" +
    "\010\uffcd\017\uffcd\001\002\000\010\003\uffcf\010\uffcf\017" +
    "\uffcf\001\002\000\010\003\032\010\031\017\033\001\002" +
    "\000\010\003\uffc5\033\uffc5\055\uffc5\001\002\000\006\003" +
    "\012\011\014\001\002\000\006\003\012\011\014\001\002" +
    "\000\010\003\uffc6\033\uffc6\055\uffc6\001\002\000\010\003" +
    "\uffc2\033\uffc2\055\uffc2\001\002\000\012\003\026\021\025" +
    "\022\024\023\027\001\002\000\004\017\040\001\002\000" +
    "\006\003\012\011\014\001\002\000\010\003\uffc3\033\uffc3" +
    "\055\uffc3\001\002\000\012\003\020\046\023\047\022\050" +
    "\021\001\002\000\012\003\026\021\025\022\024\023\027" +
    "\001\002\000\004\017\045\001\002\000\006\003\012\011" +
    "\014\001\002\000\010\003\uffc4\033\uffc4\055\uffc4\001\002" +
    "\000\006\011\052\034\uffdc\001\002\000\004\034\073\001" +
    "\002\000\010\003\uffde\017\071\034\uffde\001\002\000\006" +
    "\024\054\040\053\001\002\000\010\021\057\022\056\023" +
    "\061\001\002\000\004\011\052\001\002\000\010\003\uffdb" +
    "\017\uffdb\034\uffdb\001\002\000\014\003\uffd9\017\uffd9\020" +
    "\066\033\uffd9\034\uffd9\001\002\000\014\003\uffd6\017\uffd6" +
    "\020\064\033\uffd6\034\uffd6\001\002\000\010\003\uffda\017" +
    "\uffda\034\uffda\001\002\000\014\003\uffd4\017\uffd4\020\062" +
    "\033\uffd4\034\uffd4\001\002\000\004\045\063\001\002\000" +
    "\012\003\uffd3\017\uffd3\033\uffd3\034\uffd3\001\002\000\004" +
    "\013\065\001\002\000\012\003\uffd5\017\uffd5\033\uffd5\034" +
    "\uffd5\001\002\000\006\036\067\037\070\001\002\000\012" +
    "\003\uffd7\017\uffd7\033\uffd7\034\uffd7\001\002\000\012\003" +
    "\uffd8\017\uffd8\033\uffd8\034\uffd8\001\002\000\010\003\uffdc" +
    "\011\052\034\uffdc\001\002\000\006\003\uffdd\034\uffdd\001" +
    "\002\000\024\003\107\004\100\011\103\027\113\032\005" +
    "\035\ufff7\043\106\044\077\054\104\001\002\000\036\003" +
    "\107\004\100\005\ufff7\006\ufff7\011\103\016\ufff7\026\ufff7" +
    "\027\113\032\005\035\ufff7\043\106\044\077\054\104\055" +
    "\ufff7\001\002\000\004\035\u012c\001\002\000\036\003\107" +
    "\004\100\005\ufff7\006\ufff7\011\103\016\ufff7\026\ufff7\027" +
    "\113\032\005\035\ufff7\043\106\044\077\054\104\055\ufff7" +
    "\001\002\000\004\007\u0127\001\002\000\004\007\u0114\001" +
    "\002\000\036\003\107\004\100\005\ufff7\006\ufff7\011\103" +
    "\016\ufff7\026\ufff7\027\113\032\005\035\ufff7\043\106\044" +
    "\077\054\104\055\ufff7\001\002\000\036\003\107\004\100" +
    "\005\ufff7\006\ufff7\011\103\016\ufff7\026\ufff7\027\113\032" +
    "\005\035\ufff7\043\106\044\077\054\104\055\ufff7\001\002" +
    "\000\010\003\302\020\303\040\304\001\002\000\006\003" +
    "\210\011\211\001\002\000\036\003\107\004\100\005\ufff7" +
    "\006\ufff7\011\103\016\ufff7\026\ufff7\027\113\032\005\035" +
    "\ufff7\043\106\044\077\054\104\055\ufff7\001\002\000\004" +
    "\007\201\001\002\000\006\011\151\040\150\001\002\000" +
    "\036\003\107\004\100\005\ufff7\006\ufff7\011\103\016\ufff7" +
    "\026\ufff7\027\113\032\005\035\ufff7\043\106\044\077\054" +
    "\104\055\ufff7\001\002\000\036\003\107\004\100\005\ufff7" +
    "\006\ufff7\011\103\016\ufff7\026\ufff7\027\113\032\005\035" +
    "\ufff7\043\106\044\077\054\104\055\ufff7\001\002\000\036" +
    "\003\107\004\100\005\ufff7\006\ufff7\011\103\016\ufff7\026" +
    "\ufff7\027\113\032\005\035\ufff7\043\106\044\077\054\104" +
    "\055\ufff7\001\002\000\004\007\114\001\002\000\010\011" +
    "\121\013\117\045\116\001\002\000\012\010\uffe8\017\uffe8" +
    "\041\142\042\141\001\002\000\004\012\137\001\002\000" +
    "\004\012\135\001\002\000\004\010\130\001\002\000\004" +
    "\012\122\001\002\000\014\011\127\013\125\036\123\037" +
    "\126\045\124\001\002\000\012\010\uffe2\017\uffe2\041\uffe2" +
    "\042\uffe2\001\002\000\012\010\uffe3\017\uffe3\041\uffe3\042" +
    "\uffe3\001\002\000\012\010\uffe4\017\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\012\010\uffe1\017\uffe1\041\uffe1\042\uffe1\001" +
    "\002\000\012\010\uffe5\017\uffe5\041\uffe5\042\uffe5\001\002" +
    "\000\004\025\131\001\002\000\024\003\107\004\100\011" +
    "\103\026\ufff7\027\113\032\005\043\106\044\077\054\104" +
    "\001\002\000\004\026\133\001\002\000\004\017\134\001" +
    "\002\000\036\003\uffe9\004\uffe9\005\uffe9\006\uffe9\011\uffe9" +
    "\016\uffe9\026\uffe9\027\uffe9\032\uffe9\035\uffe9\043\uffe9\044" +
    "\uffe9\054\uffe9\055\uffe9\001\002\000\004\011\136\001\002" +
    "\000\012\010\uffe0\017\uffe0\041\uffe0\042\uffe0\001\002\000" +
    "\004\011\140\001\002\000\012\010\uffdf\017\uffdf\041\uffdf" +
    "\042\uffdf\001\002\000\010\011\121\013\117\045\116\001" +
    "\002\000\010\011\121\013\117\045\116\001\002\000\006" +
    "\010\uffe6\017\uffe6\001\002\000\006\010\uffe7\017\uffe7\001" +
    "\002\000\016\005\ufff8\006\ufff8\016\ufff8\026\ufff8\035\ufff8" +
    "\055\ufff8\001\002\000\016\005\ufffa\006\ufffa\016\ufffa\026" +
    "\ufffa\035\ufffa\055\ufffa\001\002\000\016\005\ufffd\006\ufffd" +
    "\016\ufffd\026\ufffd\035\ufffd\055\ufffd\001\002\000\004\025" +
    "\167\001\002\000\006\003\007\007\011\001\002\000\004" +
    "\055\153\001\002\000\010\021\057\022\056\023\061\001" +
    "\002\000\004\033\155\001\002\000\006\011\052\034\uffdc" +
    "\001\002\000\004\034\157\001\002\000\024\003\107\004" +
    "\100\011\103\027\113\032\005\043\106\044\077\054\104" +
    "\055\ufff7\001\002\000\004\055\161\001\002\000\004\011" +
    "\162\001\002\000\004\017\163\001\002\000\004\035\164" +
    "\001\002\000\004\011\165\001\002\000\004\017\166\001" +
    "\002\000\036\003\uffb7\004\uffb7\005\uffb7\006\uffb7\011\uffb7" +
    "\016\uffb7\026\uffb7\027\uffb7\032\uffb7\035\uffb7\043\uffb7\044" +
    "\uffb7\054\uffb7\055\uffb7\001\002\000\004\052\170\001\002" +
    "\000\004\011\171\001\002\000\004\053\172\001\002\000" +
    "\010\011\121\013\117\045\116\001\002\000\004\017\174" +
    "\001\002\000\024\003\107\004\100\011\103\026\ufff7\027" +
    "\113\032\005\043\106\044\077\054\104\001\002\000\004" +
    "\026\176\001\002\000\004\011\177\001\002\000\004\017" +
    "\200\001\002\000\036\003\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\011\uffc0\016\uffc0\026\uffc0\027\uffc0\032\uffc0\035\uffc0\043" +
    "\uffc0\044\uffc0\054\uffc0\055\uffc0\001\002\000\004\051\202" +
    "\001\002\000\004\011\203\001\002\000\004\051\204\001" +
    "\002\000\004\010\205\001\002\000\004\017\206\001\002" +
    "\000\036\003\uffd2\004\uffd2\005\uffd2\006\uffd2\011\uffd2\016" +
    "\uffd2\026\uffd2\027\uffd2\032\uffd2\035\uffd2\043\uffd2\044\uffd2" +
    "\054\uffd2\055\uffd2\001\002\000\016\005\uffff\006\uffff\016" +
    "\uffff\026\uffff\035\uffff\055\uffff\001\002\000\006\003\007" +
    "\007\011\001\002\000\006\003\007\007\011\001\002\000" +
    "\006\003\213\055\214\001\002\000\010\021\057\022\056" +
    "\023\061\001\002\000\010\021\057\022\056\023\061\001" +
    "\002\000\006\003\216\033\217\001\002\000\006\011\052" +
    "\034\uffdc\001\002\000\010\003\uffdc\011\052\034\uffdc\001" +
    "\002\000\006\003\221\034\222\001\002\000\024\003\107" +
    "\004\100\011\103\027\113\032\005\043\106\044\077\054" +
    "\104\055\ufff7\001\002\000\024\003\107\004\100\011\103" +
    "\027\113\032\005\043\106\044\077\054\104\055\ufff7\001" +
    "\002\000\004\055\224\001\002\000\004\011\225\001\002" +
    "\000\004\017\226\001\002\000\004\035\227\001\002\000" +
    "\004\011\230\001\002\000\004\017\231\001\002\000\036" +
    "\003\uffb8\004\uffb8\005\uffb8\006\uffb8\011\uffb8\016\uffb8\026" +
    "\uffb8\027\uffb8\032\uffb8\035\uffb8\043\uffb8\044\uffb8\054\uffb8" +
    "\055\uffb8\001\002\000\004\055\233\001\002\000\004\011" +
    "\234\001\002\000\004\017\235\001\002\000\004\035\236" +
    "\001\002\000\004\011\237\001\002\000\004\017\240\001" +
    "\002\000\036\003\uffb3\004\uffb3\005\uffb3\006\uffb3\011\uffb3" +
    "\016\uffb3\026\uffb3\027\uffb3\032\uffb3\035\uffb3\043\uffb3\044" +
    "\uffb3\054\uffb3\055\uffb3\001\002\000\004\034\242\001\002" +
    "\000\024\003\107\004\100\011\103\027\113\032\005\043" +
    "\106\044\077\054\104\055\ufff7\001\002\000\004\055\244" +
    "\001\002\000\004\011\245\001\002\000\004\017\246\001" +
    "\002\000\004\035\247\001\002\000\004\011\250\001\002" +
    "\000\004\017\251\001\002\000\036\003\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\011\uffb4\016\uffb4\026\uffb4\027\uffb4\032\uffb4" +
    "\035\uffb4\043\uffb4\044\uffb4\054\uffb4\055\uffb4\001\002\000" +
    "\004\033\253\001\002\000\006\011\052\034\uffdc\001\002" +
    "\000\004\034\255\001\002\000\024\003\107\004\100\011" +
    "\103\027\113\032\005\043\106\044\077\054\104\055\ufff7" +
    "\001\002\000\004\055\257\001\002\000\004\011\260\001" +
    "\002\000\004\017\261\001\002\000\004\035\262\001\002" +
    "\000\004\011\263\001\002\000\004\017\264\001\002\000" +
    "\036\003\uffb5\004\uffb5\005\uffb5\006\uffb5\011\uffb5\016\uffb5" +
    "\026\uffb5\027\uffb5\032\uffb5\035\uffb5\043\uffb5\044\uffb5\054" +
    "\uffb5\055\uffb5\001\002\000\004\055\266\001\002\000\010" +
    "\021\057\022\056\023\061\001\002\000\004\033\270\001" +
    "\002\000\006\011\052\034\uffdc\001\002\000\004\034\272" +
    "\001\002\000\024\003\107\004\100\011\103\027\113\032" +
    "\005\043\106\044\077\054\104\055\ufff7\001\002\000\004" +
    "\055\274\001\002\000\004\011\275\001\002\000\004\017" +
    "\276\001\002\000\004\035\277\001\002\000\004\011\300" +
    "\001\002\000\004\017\301\001\002\000\036\003\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\011\uffb6\016\uffb6\026\uffb6\027\uffb6" +
    "\032\uffb6\035\uffb6\043\uffb6\044\uffb6\054\uffb6\055\uffb6\001" +
    "\002\000\004\025\u0108\001\002\000\012\011\367\013\366" +
    "\036\364\037\365\001\002\000\006\003\306\025\305\001" +
    "\002\000\006\003\320\052\321\001\002\000\004\052\307" +
    "\001\002\000\004\011\310\001\002\000\004\053\311\001" +
    "\002\000\010\011\121\013\117\045\116\001\002\000\004" +
    "\017\313\001\002\000\024\003\107\004\100\011\103\026" +
    "\ufff7\027\113\032\005\043\106\044\077\054\104\001\002" +
    "\000\004\026\315\001\002\000\004\011\316\001\002\000" +
    "\004\017\317\001\002\000\036\003\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\011\uffbe\016\uffbe\026\uffbe\027\uffbe\032\uffbe\035" +
    "\uffbe\043\uffbe\044\uffbe\054\uffbe\055\uffbe\001\002\000\004" +
    "\011\354\001\002\000\006\003\322\011\323\001\002\000" +
    "\004\053\345\001\002\000\006\003\325\053\324\001\002" +
    "\000\010\011\121\013\117\045\116\001\002\000\010\011" +
    "\121\013\117\045\116\001\002\000\004\017\327\001\002" +
    "\000\024\003\107\004\100\011\103\026\ufff7\027\113\032" +
    "\005\043\106\044\077\054\104\001\002\000\004\026\331" +
    "\001\002\000\004\011\332\001\002\000\004\017\333\001" +
    "\002\000\036\003\uffbb\004\uffbb\005\uffbb\006\uffbb\011\uffbb" +
    "\016\uffbb\026\uffbb\027\uffbb\032\uffbb\035\uffbb\043\uffbb\044" +
    "\uffbb\054\uffbb\055\uffbb\001\002\000\004\017\335\001\002" +
    "\000\024\003\107\004\100\011\103\026\ufff7\027\113\032" +
    "\005\043\106\044\077\054\104\001\002\000\004\026\337" +
    "\001\002\000\006\003\340\011\341\001\002\000\004\017" +
    "\344\001\002\000\006\003\342\017\343\001\002\000\036" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\011\uffb9\016\uffb9\026" +
    "\uffb9\027\uffb9\032\uffb9\035\uffb9\043\uffb9\044\uffb9\054\uffb9" +
    "\055\uffb9\001\002\000\036\003\uffc1\004\uffc1\005\uffc1\006" +
    "\uffc1\011\uffc1\016\uffc1\026\uffc1\027\uffc1\032\uffc1\035\uffc1" +
    "\043\uffc1\044\uffc1\054\uffc1\055\uffc1\001\002\000\036\003" +
    "\uffba\004\uffba\005\uffba\006\uffba\011\uffba\016\uffba\026\uffba" +
    "\027\uffba\032\uffba\035\uffba\043\uffba\044\uffba\054\uffba\055" +
    "\uffba\001\002\000\010\011\121\013\117\045\116\001\002" +
    "\000\004\017\347\001\002\000\024\003\107\004\100\011" +
    "\103\026\ufff7\027\113\032\005\043\106\044\077\054\104" +
    "\001\002\000\004\026\351\001\002\000\004\011\352\001" +
    "\002\000\004\017\353\001\002\000\036\003\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\011\uffbc\016\uffbc\026\uffbc\027\uffbc\032" +
    "\uffbc\035\uffbc\043\uffbc\044\uffbc\054\uffbc\055\uffbc\001\002" +
    "\000\004\053\355\001\002\000\010\011\121\013\117\045" +
    "\116\001\002\000\004\017\357\001\002\000\024\003\107" +
    "\004\100\011\103\026\ufff7\027\113\032\005\043\106\044" +
    "\077\054\104\001\002\000\004\026\361\001\002\000\004" +
    "\011\362\001\002\000\004\017\363\001\002\000\036\003" +
    "\uffbd\004\uffbd\005\uffbd\006\uffbd\011\uffbd\016\uffbd\026\uffbd" +
    "\027\uffbd\032\uffbd\035\uffbd\043\uffbd\044\uffbd\054\uffbd\055" +
    "\uffbd\001\002\000\004\017\u0107\001\002\000\004\017\u0106" +
    "\001\002\000\004\017\u0105\001\002\000\010\017\372\030" +
    "\370\031\371\001\002\000\010\011\u0101\013\u0100\045\377" +
    "\001\002\000\006\011\374\013\373\001\002\000\036\003" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\016\ufff2\026\ufff2" +
    "\027\ufff2\032\ufff2\035\ufff2\043\ufff2\044\ufff2\054\ufff2\055" +
    "\ufff2\001\002\000\004\017\376\001\002\000\004\017\375" +
    "\001\002\000\036\003\uffee\004\uffee\005\uffee\006\uffee\011" +
    "\uffee\016\uffee\026\uffee\027\uffee\032\uffee\035\uffee\043\uffee" +
    "\044\uffee\054\uffee\055\uffee\001\002\000\036\003\uffed\004" +
    "\uffed\005\uffed\006\uffed\011\uffed\016\uffed\026\uffed\027\uffed" +
    "\032\uffed\035\uffed\043\uffed\044\uffed\054\uffed\055\uffed\001" +
    "\002\000\004\017\u0104\001\002\000\004\017\u0103\001\002" +
    "\000\004\017\u0102\001\002\000\036\003\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\011\ufff1\016\ufff1\026\ufff1\027\ufff1\032\ufff1" +
    "\035\ufff1\043\ufff1\044\ufff1\054\ufff1\055\ufff1\001\002\000" +
    "\036\003\ufff0\004\ufff0\005\ufff0\006\ufff0\011\ufff0\016\ufff0" +
    "\026\ufff0\027\ufff0\032\ufff0\035\ufff0\043\ufff0\044\ufff0\054" +
    "\ufff0\055\ufff0\001\002\000\036\003\uffef\004\uffef\005\uffef" +
    "\006\uffef\011\uffef\016\uffef\026\uffef\027\uffef\032\uffef\035" +
    "\uffef\043\uffef\044\uffef\054\uffef\055\uffef\001\002\000\036" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\011\uffec\016\uffec\026" +
    "\uffec\027\uffec\032\uffec\035\uffec\043\uffec\044\uffec\054\uffec" +
    "\055\uffec\001\002\000\036\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\011\uffea\016\uffea\026\uffea\027\uffea\032\uffea\035\uffea" +
    "\043\uffea\044\uffea\054\uffea\055\uffea\001\002\000\036\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\011\uffeb\016\uffeb\026\uffeb" +
    "\027\uffeb\032\uffeb\035\uffeb\043\uffeb\044\uffeb\054\uffeb\055" +
    "\uffeb\001\002\000\004\052\u0109\001\002\000\004\011\u010a" +
    "\001\002\000\004\053\u010b\001\002\000\010\011\121\013" +
    "\117\045\116\001\002\000\004\017\u010d\001\002\000\024" +
    "\003\107\004\100\011\103\026\ufff7\027\113\032\005\043" +
    "\106\044\077\054\104\001\002\000\004\026\u010f\001\002" +
    "\000\004\011\u0110\001\002\000\004\017\u0111\001\002\000" +
    "\036\003\uffbf\004\uffbf\005\uffbf\006\uffbf\011\uffbf\016\uffbf" +
    "\026\uffbf\027\uffbf\032\uffbf\035\uffbf\043\uffbf\044\uffbf\054" +
    "\uffbf\055\uffbf\001\002\000\016\005\ufffc\006\ufffc\016\ufffc" +
    "\026\ufffc\035\ufffc\055\ufffc\001\002\000\016\005\ufff9\006" +
    "\ufff9\016\ufff9\026\ufff9\035\ufff9\055\ufff9\001\002\000\010" +
    "\011\121\013\117\045\116\001\002\000\004\010\u0116\001" +
    "\002\000\004\015\u0117\001\002\000\030\003\107\004\100" +
    "\005\ufff7\006\ufff7\011\103\016\ufff7\027\113\032\005\043" +
    "\106\044\077\054\104\001\002\000\010\005\u011c\006\u0119" +
    "\016\u011a\001\002\000\004\007\u0121\001\002\000\004\017" +
    "\u0120\001\002\000\036\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\011\ufff6\016\ufff6\026\ufff6\027\ufff6\032\ufff6\035\ufff6\043" +
    "\ufff6\044\ufff6\054\ufff6\055\ufff6\001\002\000\024\003\107" +
    "\004\100\011\103\016\ufff7\027\113\032\005\043\106\044" +
    "\077\054\104\001\002\000\004\016\u011e\001\002\000\004" +
    "\017\u011f\001\002\000\036\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\011\ufff4\016\ufff4\026\ufff4\027\ufff4\032\ufff4\035\ufff4" +
    "\043\ufff4\044\ufff4\054\ufff4\055\ufff4\001\002\000\036\003" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3\016\ufff3\026\ufff3" +
    "\027\ufff3\032\ufff3\035\ufff3\043\ufff3\044\ufff3\054\ufff3\055" +
    "\ufff3\001\002\000\010\011\121\013\117\045\116\001\002" +
    "\000\004\010\u0123\001\002\000\004\015\u0124\001\002\000" +
    "\030\003\107\004\100\005\ufff7\006\ufff7\011\103\016\ufff7" +
    "\027\113\032\005\043\106\044\077\054\104\001\002\000" +
    "\010\005\u011c\006\u0119\016\u011a\001\002\000\036\003\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\011\ufff5\016\ufff5\026\ufff5\027" +
    "\ufff5\032\ufff5\035\ufff5\043\ufff5\044\ufff5\054\ufff5\055\ufff5" +
    "\001\002\000\004\011\u0128\001\002\000\004\010\u0129\001" +
    "\002\000\004\017\u012a\001\002\000\036\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\011\uffd1\016\uffd1\026\uffd1\027\uffd1\032" +
    "\uffd1\035\uffd1\043\uffd1\044\uffd1\054\uffd1\055\uffd1\001\002" +
    "\000\016\005\ufffb\006\ufffb\016\ufffb\026\ufffb\035\ufffb\055" +
    "\ufffb\001\002\000\004\011\u012d\001\002\000\004\017\u012e" +
    "\001\002\000\040\002\000\003\000\004\000\005\000\006" +
    "\000\011\000\016\000\026\000\027\000\032\000\035\000" +
    "\043\000\044\000\054\000\055\000\001\002\000\016\005" +
    "\ufffe\006\ufffe\016\ufffe\026\ufffe\035\ufffe\055\ufffe\001\002" +
    "\000\010\003\uffc7\033\uffc7\055\uffc7\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\007\001\001\000\004\023\u012f" +
    "\001\001\000\002\001\001\000\004\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\035\001\001\000\004\021\016\001\001\000\004\022" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\034\001\001\000\004\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\036\001\001\000\002\001\001\000\004\023\040\001" +
    "\001\000\002\001\001\000\004\021\042\001\001\000\004" +
    "\022\043\001\001\000\002\001\001\000\004\023\045\001" +
    "\001\000\002\001\001\000\006\011\047\012\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\057\001\001\000\004\012\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\071\012\050" +
    "\001\001\000\002\001\001\000\024\002\101\003\074\004" +
    "\073\005\104\007\107\010\100\016\075\017\110\024\111" +
    "\001\001\000\024\002\101\003\u012e\004\073\005\104\007" +
    "\107\010\100\016\075\017\110\024\111\001\001\000\002" +
    "\001\001\000\024\002\101\003\u012a\004\073\005\104\007" +
    "\107\010\100\016\075\017\110\024\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\101\003\u0112\004" +
    "\073\005\104\007\107\010\100\016\075\017\110\024\111" +
    "\001\001\000\024\002\101\003\u0111\004\073\005\104\007" +
    "\107\010\100\016\075\017\110\024\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\101\003\206\004" +
    "\073\005\104\007\107\010\100\016\075\017\110\024\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\101\003\146\004\073\005\104\007\107\010\100\016\075" +
    "\017\110\024\111\001\001\000\024\002\101\003\145\004" +
    "\073\005\104\007\107\010\100\016\075\017\110\024\111" +
    "\001\001\000\024\002\101\003\144\004\073\005\104\007" +
    "\107\010\100\016\075\017\110\024\111\001\001\000\002" +
    "\001\001\000\006\013\117\014\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\101\003\131\004" +
    "\073\005\104\007\107\010\100\016\075\017\110\024\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\143\001\001\000\004\014" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\151\001\001\000\002\001\001\000\004" +
    "\015\153\001\001\000\002\001\001\000\006\011\155\012" +
    "\050\001\001\000\002\001\001\000\024\002\101\003\157" +
    "\004\073\005\104\007\107\010\100\016\075\017\110\024" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\172\014\114\001\001\000" +
    "\002\001\001\000\024\002\101\003\174\004\073\005\104" +
    "\007\107\010\100\016\075\017\110\024\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\264\001\001\000\004\020" +
    "\211\001\001\000\002\001\001\000\004\015\251\001\001" +
    "\000\004\015\214\001\001\000\002\001\001\000\006\011" +
    "\240\012\050\001\001\000\006\011\217\012\050\001\001" +
    "\000\002\001\001\000\024\002\101\003\231\004\073\005" +
    "\104\007\107\010\100\016\075\017\110\024\111\001\001" +
    "\000\024\002\101\003\222\004\073\005\104\007\107\010" +
    "\100\016\075\017\110\024\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\101\003\242\004\073\005" +
    "\104\007\107\010\100\016\075\017\110\024\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\253\012\050\001" +
    "\001\000\002\001\001\000\024\002\101\003\255\004\073" +
    "\005\104\007\107\010\100\016\075\017\110\024\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\266\001\001" +
    "\000\002\001\001\000\006\011\270\012\050\001\001\000" +
    "\002\001\001\000\024\002\101\003\272\004\073\005\104" +
    "\007\107\010\100\016\075\017\110\024\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\311\014\114\001\001\000\002" +
    "\001\001\000\024\002\101\003\313\004\073\005\104\007" +
    "\107\010\100\016\075\017\110\024\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\333\014\114\001\001\000" +
    "\006\013\325\014\114\001\001\000\002\001\001\000\024" +
    "\002\101\003\327\004\073\005\104\007\107\010\100\016" +
    "\075\017\110\024\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\101\003\335\004\073\005\104\007\107" +
    "\010\100\016\075\017\110\024\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\345\014\114\001\001\000\002\001\001\000\024" +
    "\002\101\003\347\004\073\005\104\007\107\010\100\016" +
    "\075\017\110\024\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\355\014\114\001\001\000\002\001\001" +
    "\000\024\002\101\003\357\004\073\005\104\007\107\010" +
    "\100\016\075\017\110\024\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u010b\014\114\001\001\000\002\001\001\000" +
    "\024\002\101\003\u010d\004\073\005\104\007\107\010\100" +
    "\016\075\017\110\024\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\u0114\014\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\101" +
    "\003\u0117\004\073\005\104\007\107\010\100\016\075\017" +
    "\110\024\111\001\001\000\004\006\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\101\003\u011c\004\073\005\104\007\107\010\100\016\075" +
    "\017\110\024\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u0121" +
    "\014\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\101\003\u0124\004\073\005\104\007\107\010\100" +
    "\016\075\017\110\024\111\001\001\000\004\006\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   ArrayList errores = new ArrayList();

public void syntax_error (Symbol s){
    System.out.println("-----------------------");
    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);
    errores.add("Syntax error: " +  s.value + " Linea: " + (s.left) + " Columna: " + (s.right));
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_PRIME ::= PROCEDURE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= LOOP PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= FUNCTION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_PRIME ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESIONES ::= EP TK_OR EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESIONES ::= EP TK_AND EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EP ::= TK_ID TK_OPREL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EP ::= TK_ID TK_OPREL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EP ::= TK_ID TK_OPREL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EP ::= TK_DIGITOFLOAT TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID ::= TK_ID TK_COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PUT ::= TK_PUT TK_PARENTESISI TK_COMILLA TK_ID TK_COMILLA TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS_VARIABLES ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS_PARAMETROS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de parámetros permitidos son in, out e inout. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS ::= error PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS_PRIME ::= error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROS_PRIME ::= TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES error PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCTION ::= error TK_ID PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"function\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCTION ::= TK_FUNCTION error PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS error TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"return\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS error DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"is\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES error PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"begin\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
