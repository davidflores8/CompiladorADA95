
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\014\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\005\011\000\002" +
    "\006\011\000\002\006\006\000\002\006\004\000\002\007" +
    "\006\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\004\012\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\002\000\002" +
    "\012\005\000\002\012\005\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\015\005" +
    "\000\002\015\003\000\002\015\005\000\002\016\011\000" +
    "\002\017\007\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\020\004\000\002\023\007\000\002\023\004" +
    "\000\002\023\003\000\002\010\016\000\002\010\016\000" +
    "\002\010\016\000\002\010\016\000\002\010\016\000\002" +
    "\010\016\000\002\010\016\000\002\010\016\000\002\010" +
    "\016\000\002\024\021" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\004\032\005\001\002\000\004\002\347\001" +
    "\002\000\004\011\006\001\002\000\004\007\010\001\002" +
    "\000\004\033\030\001\002\000\010\010\011\011\013\017" +
    "\014\001\002\000\006\033\uffc7\055\uffc7\001\002\000\006" +
    "\033\uffca\055\uffca\001\002\000\004\040\016\001\002\000" +
    "\010\010\011\011\013\017\014\001\002\000\006\033\uffc8" +
    "\055\uffc8\001\002\000\010\046\022\047\021\050\020\001" +
    "\002\000\010\021\024\022\023\023\025\001\002\000\010" +
    "\021\uffcb\022\uffcb\023\uffcb\001\002\000\010\021\uffcc\022" +
    "\uffcc\023\uffcc\001\002\000\010\021\uffcd\022\uffcd\023\uffcd" +
    "\001\002\000\010\010\uffce\011\uffce\017\uffce\001\002\000" +
    "\010\010\uffd0\011\uffd0\017\uffd0\001\002\000\010\010\uffcf" +
    "\011\uffcf\017\uffcf\001\002\000\010\010\011\011\013\017" +
    "\014\001\002\000\006\033\uffc9\055\uffc9\001\002\000\006" +
    "\011\033\034\uffdc\001\002\000\004\034\054\001\002\000" +
    "\006\017\052\034\uffde\001\002\000\006\024\035\040\034" +
    "\001\002\000\010\021\040\022\037\023\042\001\002\000" +
    "\004\011\033\001\002\000\006\017\uffdb\034\uffdb\001\002" +
    "\000\012\017\uffd9\020\047\033\uffd9\034\uffd9\001\002\000" +
    "\012\017\uffd6\020\045\033\uffd6\034\uffd6\001\002\000\006" +
    "\017\uffda\034\uffda\001\002\000\012\017\uffd4\020\043\033" +
    "\uffd4\034\uffd4\001\002\000\004\045\044\001\002\000\010" +
    "\017\uffd3\033\uffd3\034\uffd3\001\002\000\004\013\046\001" +
    "\002\000\010\017\uffd5\033\uffd5\034\uffd5\001\002\000\006" +
    "\036\050\037\051\001\002\000\010\017\uffd7\033\uffd7\034" +
    "\uffd7\001\002\000\010\017\uffd8\033\uffd8\034\uffd8\001\002" +
    "\000\006\011\033\034\uffdc\001\002\000\004\034\uffdd\001" +
    "\002\000\024\003\070\004\061\011\064\027\073\032\005" +
    "\035\ufff7\043\066\044\060\054\065\001\002\000\040\003" +
    "\070\004\061\005\ufff7\006\ufff7\011\064\016\ufff7\026\ufff7" +
    "\027\073\032\005\034\ufff7\035\ufff7\043\066\044\060\054" +
    "\065\055\ufff7\001\002\000\004\035\343\001\002\000\040" +
    "\003\070\004\061\005\ufff7\006\ufff7\011\064\016\ufff7\026" +
    "\ufff7\027\073\032\005\034\ufff7\035\ufff7\043\066\044\060" +
    "\054\065\055\ufff7\001\002\000\004\007\336\001\002\000" +
    "\004\007\313\001\002\000\040\003\070\004\061\005\ufff7" +
    "\006\ufff7\011\064\016\ufff7\026\ufff7\027\073\032\005\034" +
    "\ufff7\035\ufff7\043\066\044\060\054\065\055\ufff7\001\002" +
    "\000\040\003\070\004\061\005\ufff7\006\ufff7\011\064\016" +
    "\ufff7\026\ufff7\027\073\032\005\034\ufff7\035\ufff7\043\066" +
    "\044\060\054\065\055\ufff7\001\002\000\010\003\171\020" +
    "\172\040\173\001\002\000\004\011\153\001\002\000\004" +
    "\007\145\001\002\000\040\003\070\004\061\005\ufff7\006" +
    "\ufff7\011\064\016\ufff7\026\ufff7\027\073\032\005\034\ufff7" +
    "\035\ufff7\043\066\044\060\054\065\055\ufff7\001\002\000" +
    "\004\040\131\001\002\000\040\003\070\004\061\005\ufff7" +
    "\006\ufff7\011\064\016\ufff7\026\ufff7\027\073\032\005\034" +
    "\ufff7\035\ufff7\043\066\044\060\054\065\055\ufff7\001\002" +
    "\000\040\003\070\004\061\005\ufff7\006\ufff7\011\064\016" +
    "\ufff7\026\ufff7\027\073\032\005\034\ufff7\035\ufff7\043\066" +
    "\044\060\054\065\055\ufff7\001\002\000\004\007\076\001" +
    "\002\000\040\003\070\004\061\005\ufff7\006\ufff7\011\064" +
    "\016\ufff7\026\ufff7\027\073\032\005\034\ufff7\035\ufff7\043" +
    "\066\044\060\054\065\055\ufff7\001\002\000\020\005\ufff8" +
    "\006\ufff8\016\ufff8\026\ufff8\034\ufff8\035\ufff8\055\ufff8\001" +
    "\002\000\010\011\103\013\101\045\100\001\002\000\012" +
    "\010\uffe8\017\uffe8\041\124\042\123\001\002\000\004\012" +
    "\121\001\002\000\004\012\117\001\002\000\004\010\112" +
    "\001\002\000\004\012\104\001\002\000\014\011\111\013" +
    "\107\036\105\037\110\045\106\001\002\000\012\010\uffe2" +
    "\017\uffe2\041\uffe2\042\uffe2\001\002\000\012\010\uffe3\017" +
    "\uffe3\041\uffe3\042\uffe3\001\002\000\012\010\uffe4\017\uffe4" +
    "\041\uffe4\042\uffe4\001\002\000\012\010\uffe1\017\uffe1\041" +
    "\uffe1\042\uffe1\001\002\000\012\010\uffe5\017\uffe5\041\uffe5" +
    "\042\uffe5\001\002\000\004\025\113\001\002\000\024\003" +
    "\070\004\061\011\064\026\ufff7\027\073\032\005\043\066" +
    "\044\060\054\065\001\002\000\004\026\115\001\002\000" +
    "\004\017\116\001\002\000\040\003\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\011\uffe9\016\uffe9\026\uffe9\027\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\043\uffe9\044\uffe9\054\uffe9\055\uffe9\001\002" +
    "\000\004\011\120\001\002\000\012\010\uffe0\017\uffe0\041" +
    "\uffe0\042\uffe0\001\002\000\004\011\122\001\002\000\012" +
    "\010\uffdf\017\uffdf\041\uffdf\042\uffdf\001\002\000\010\011" +
    "\103\013\101\045\100\001\002\000\010\011\103\013\101" +
    "\045\100\001\002\000\006\010\uffe6\017\uffe6\001\002\000" +
    "\006\010\uffe7\017\uffe7\001\002\000\020\005\ufffd\006\ufffd" +
    "\016\ufffd\026\ufffd\034\ufffd\035\ufffd\055\ufffd\001\002\000" +
    "\020\005\ufffa\006\ufffa\016\ufffa\026\ufffa\034\ufffa\035\ufffa" +
    "\055\ufffa\001\002\000\004\025\132\001\002\000\004\052" +
    "\133\001\002\000\004\011\134\001\002\000\004\053\135" +
    "\001\002\000\010\011\103\013\101\045\100\001\002\000" +
    "\004\017\137\001\002\000\024\003\070\004\061\011\064" +
    "\026\ufff7\027\073\032\005\043\066\044\060\054\065\001" +
    "\002\000\004\026\141\001\002\000\004\011\142\001\002" +
    "\000\004\017\143\001\002\000\040\003\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\011\uffc5\016\uffc5\026\uffc5\027\uffc5\032\uffc5" +
    "\034\uffc5\035\uffc5\043\uffc5\044\uffc5\054\uffc5\055\uffc5\001" +
    "\002\000\020\005\uffff\006\uffff\016\uffff\026\uffff\034\uffff" +
    "\035\uffff\055\uffff\001\002\000\004\051\146\001\002\000" +
    "\004\011\147\001\002\000\004\051\150\001\002\000\004" +
    "\010\151\001\002\000\004\017\152\001\002\000\040\003" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\011\uffd2\016\uffd2\026\uffd2" +
    "\027\uffd2\032\uffd2\034\uffd2\035\uffd2\043\uffd2\044\uffd2\054" +
    "\uffd2\055\uffd2\001\002\000\004\007\010\001\002\000\004" +
    "\055\155\001\002\000\010\021\040\022\037\023\042\001" +
    "\002\000\004\033\157\001\002\000\024\003\070\004\061" +
    "\011\064\027\073\032\005\034\ufff7\043\066\044\060\054" +
    "\065\001\002\000\004\034\161\001\002\000\024\003\070" +
    "\004\061\011\064\027\073\032\005\043\066\044\060\054" +
    "\065\055\ufff7\001\002\000\004\055\163\001\002\000\004" +
    "\011\164\001\002\000\004\017\165\001\002\000\004\035" +
    "\166\001\002\000\004\011\167\001\002\000\004\017\170" +
    "\001\002\000\040\003\uffbd\004\uffbd\005\uffbd\006\uffbd\011" +
    "\uffbd\016\uffbd\026\uffbd\027\uffbd\032\uffbd\034\uffbd\035\uffbd" +
    "\043\uffbd\044\uffbd\054\uffbd\055\uffbd\001\002\000\004\025" +
    "\277\001\002\000\012\011\256\013\255\036\253\037\254" +
    "\001\002\000\006\003\175\025\174\001\002\000\006\003" +
    "\207\052\210\001\002\000\004\052\176\001\002\000\004" +
    "\011\177\001\002\000\004\053\200\001\002\000\010\011" +
    "\103\013\101\045\100\001\002\000\004\017\202\001\002" +
    "\000\024\003\070\004\061\011\064\026\ufff7\027\073\032" +
    "\005\043\066\044\060\054\065\001\002\000\004\026\204" +
    "\001\002\000\004\011\205\001\002\000\004\017\206\001" +
    "\002\000\040\003\uffc3\004\uffc3\005\uffc3\006\uffc3\011\uffc3" +
    "\016\uffc3\026\uffc3\027\uffc3\032\uffc3\034\uffc3\035\uffc3\043" +
    "\uffc3\044\uffc3\054\uffc3\055\uffc3\001\002\000\004\011\243" +
    "\001\002\000\006\003\211\011\212\001\002\000\004\053" +
    "\234\001\002\000\006\003\214\053\213\001\002\000\010" +
    "\011\103\013\101\045\100\001\002\000\010\011\103\013" +
    "\101\045\100\001\002\000\004\017\216\001\002\000\024" +
    "\003\070\004\061\011\064\026\ufff7\027\073\032\005\043" +
    "\066\044\060\054\065\001\002\000\004\026\220\001\002" +
    "\000\004\011\221\001\002\000\004\017\222\001\002\000" +
    "\040\003\uffc0\004\uffc0\005\uffc0\006\uffc0\011\uffc0\016\uffc0" +
    "\026\uffc0\027\uffc0\032\uffc0\034\uffc0\035\uffc0\043\uffc0\044" +
    "\uffc0\054\uffc0\055\uffc0\001\002\000\004\017\224\001\002" +
    "\000\024\003\070\004\061\011\064\026\ufff7\027\073\032" +
    "\005\043\066\044\060\054\065\001\002\000\004\026\226" +
    "\001\002\000\006\003\227\011\230\001\002\000\004\017" +
    "\233\001\002\000\006\003\231\017\232\001\002\000\040" +
    "\003\uffbe\004\uffbe\005\uffbe\006\uffbe\011\uffbe\016\uffbe\026" +
    "\uffbe\027\uffbe\032\uffbe\034\uffbe\035\uffbe\043\uffbe\044\uffbe" +
    "\054\uffbe\055\uffbe\001\002\000\040\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\011\uffc6\016\uffc6\026\uffc6\027\uffc6\032\uffc6" +
    "\034\uffc6\035\uffc6\043\uffc6\044\uffc6\054\uffc6\055\uffc6\001" +
    "\002\000\040\003\uffbf\004\uffbf\005\uffbf\006\uffbf\011\uffbf" +
    "\016\uffbf\026\uffbf\027\uffbf\032\uffbf\034\uffbf\035\uffbf\043" +
    "\uffbf\044\uffbf\054\uffbf\055\uffbf\001\002\000\010\011\103" +
    "\013\101\045\100\001\002\000\004\017\236\001\002\000" +
    "\024\003\070\004\061\011\064\026\ufff7\027\073\032\005" +
    "\043\066\044\060\054\065\001\002\000\004\026\240\001" +
    "\002\000\004\011\241\001\002\000\004\017\242\001\002" +
    "\000\040\003\uffc1\004\uffc1\005\uffc1\006\uffc1\011\uffc1\016" +
    "\uffc1\026\uffc1\027\uffc1\032\uffc1\034\uffc1\035\uffc1\043\uffc1" +
    "\044\uffc1\054\uffc1\055\uffc1\001\002\000\004\053\244\001" +
    "\002\000\010\011\103\013\101\045\100\001\002\000\004" +
    "\017\246\001\002\000\024\003\070\004\061\011\064\026" +
    "\ufff7\027\073\032\005\043\066\044\060\054\065\001\002" +
    "\000\004\026\250\001\002\000\004\011\251\001\002\000" +
    "\004\017\252\001\002\000\040\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\011\uffc2\016\uffc2\026\uffc2\027\uffc2\032\uffc2\034" +
    "\uffc2\035\uffc2\043\uffc2\044\uffc2\054\uffc2\055\uffc2\001\002" +
    "\000\004\017\276\001\002\000\004\017\275\001\002\000" +
    "\004\017\274\001\002\000\010\017\261\030\257\031\260" +
    "\001\002\000\010\011\270\013\267\045\266\001\002\000" +
    "\006\011\263\013\262\001\002\000\040\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\011\ufff2\016\ufff2\026\ufff2\027\ufff2\032" +
    "\ufff2\034\ufff2\035\ufff2\043\ufff2\044\ufff2\054\ufff2\055\ufff2" +
    "\001\002\000\004\017\265\001\002\000\004\017\264\001" +
    "\002\000\040\003\uffee\004\uffee\005\uffee\006\uffee\011\uffee" +
    "\016\uffee\026\uffee\027\uffee\032\uffee\034\uffee\035\uffee\043" +
    "\uffee\044\uffee\054\uffee\055\uffee\001\002\000\040\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\011\uffed\016\uffed\026\uffed\027" +
    "\uffed\032\uffed\034\uffed\035\uffed\043\uffed\044\uffed\054\uffed" +
    "\055\uffed\001\002\000\004\017\273\001\002\000\004\017" +
    "\272\001\002\000\004\017\271\001\002\000\040\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\011\ufff1\016\ufff1\026\ufff1\027" +
    "\ufff1\032\ufff1\034\ufff1\035\ufff1\043\ufff1\044\ufff1\054\ufff1" +
    "\055\ufff1\001\002\000\040\003\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\011\ufff0\016\ufff0\026\ufff0\027\ufff0\032\ufff0\034\ufff0" +
    "\035\ufff0\043\ufff0\044\ufff0\054\ufff0\055\ufff0\001\002\000" +
    "\040\003\uffef\004\uffef\005\uffef\006\uffef\011\uffef\016\uffef" +
    "\026\uffef\027\uffef\032\uffef\034\uffef\035\uffef\043\uffef\044" +
    "\uffef\054\uffef\055\uffef\001\002\000\040\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\011\uffec\016\uffec\026\uffec\027\uffec\032" +
    "\uffec\034\uffec\035\uffec\043\uffec\044\uffec\054\uffec\055\uffec" +
    "\001\002\000\040\003\uffea\004\uffea\005\uffea\006\uffea\011" +
    "\uffea\016\uffea\026\uffea\027\uffea\032\uffea\034\uffea\035\uffea" +
    "\043\uffea\044\uffea\054\uffea\055\uffea\001\002\000\040\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\011\uffeb\016\uffeb\026\uffeb" +
    "\027\uffeb\032\uffeb\034\uffeb\035\uffeb\043\uffeb\044\uffeb\054" +
    "\uffeb\055\uffeb\001\002\000\004\052\300\001\002\000\004" +
    "\011\301\001\002\000\004\053\302\001\002\000\010\011" +
    "\103\013\101\045\100\001\002\000\004\017\304\001\002" +
    "\000\024\003\070\004\061\011\064\026\ufff7\027\073\032" +
    "\005\043\066\044\060\054\065\001\002\000\004\026\306" +
    "\001\002\000\004\011\307\001\002\000\004\017\310\001" +
    "\002\000\040\003\uffc4\004\uffc4\005\uffc4\006\uffc4\011\uffc4" +
    "\016\uffc4\026\uffc4\027\uffc4\032\uffc4\034\uffc4\035\uffc4\043" +
    "\uffc4\044\uffc4\054\uffc4\055\uffc4\001\002\000\020\005\ufffc" +
    "\006\ufffc\016\ufffc\026\ufffc\034\ufffc\035\ufffc\055\ufffc\001" +
    "\002\000\020\005\ufff9\006\ufff9\016\ufff9\026\ufff9\034\ufff9" +
    "\035\ufff9\055\ufff9\001\002\000\010\011\103\013\101\045" +
    "\100\001\002\000\004\010\315\001\002\000\004\015\316" +
    "\001\002\000\030\003\070\004\061\005\ufff7\006\ufff7\011" +
    "\064\016\ufff7\027\073\032\005\043\066\044\060\054\065" +
    "\001\002\000\010\005\323\006\320\016\321\001\002\000" +
    "\004\007\330\001\002\000\004\017\327\001\002\000\040" +
    "\003\ufff6\004\ufff6\005\ufff6\006\ufff6\011\ufff6\016\ufff6\026" +
    "\ufff6\027\ufff6\032\ufff6\034\ufff6\035\ufff6\043\ufff6\044\ufff6" +
    "\054\ufff6\055\ufff6\001\002\000\024\003\070\004\061\011" +
    "\064\016\ufff7\027\073\032\005\043\066\044\060\054\065" +
    "\001\002\000\004\016\325\001\002\000\004\017\326\001" +
    "\002\000\040\003\ufff4\004\ufff4\005\ufff4\006\ufff4\011\ufff4" +
    "\016\ufff4\026\ufff4\027\ufff4\032\ufff4\034\ufff4\035\ufff4\043" +
    "\ufff4\044\ufff4\054\ufff4\055\ufff4\001\002\000\040\003\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\011\ufff3\016\ufff3\026\ufff3\027" +
    "\ufff3\032\ufff3\034\ufff3\035\ufff3\043\ufff3\044\ufff3\054\ufff3" +
    "\055\ufff3\001\002\000\010\011\103\013\101\045\100\001" +
    "\002\000\004\010\332\001\002\000\004\015\333\001\002" +
    "\000\030\003\070\004\061\005\ufff7\006\ufff7\011\064\016" +
    "\ufff7\027\073\032\005\043\066\044\060\054\065\001\002" +
    "\000\010\005\323\006\320\016\321\001\002\000\040\003" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\011\ufff5\016\ufff5\026\ufff5" +
    "\027\ufff5\032\ufff5\034\ufff5\035\ufff5\043\ufff5\044\ufff5\054" +
    "\ufff5\055\ufff5\001\002\000\004\011\337\001\002\000\004" +
    "\010\340\001\002\000\004\017\341\001\002\000\040\003" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\011\uffd1\016\uffd1\026\uffd1" +
    "\027\uffd1\032\uffd1\034\uffd1\035\uffd1\043\uffd1\044\uffd1\054" +
    "\uffd1\055\uffd1\001\002\000\020\005\ufffb\006\ufffb\016\ufffb" +
    "\026\ufffb\034\ufffb\035\ufffb\055\ufffb\001\002\000\004\011" +
    "\344\001\002\000\004\017\345\001\002\000\042\002\000" +
    "\003\000\004\000\005\000\006\000\011\000\016\000\026" +
    "\000\027\000\032\000\034\000\035\000\043\000\044\000" +
    "\054\000\055\000\001\002\000\020\005\ufffe\006\ufffe\016" +
    "\ufffe\026\ufffe\034\ufffe\035\ufffe\055\ufffe\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\006\001\001\000\002\001\001" +
    "\000\004\023\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\014\001\001\000\002" +
    "\001\001\000\004\021\016\001\001\000\004\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\026\001\001\000\002\001\001\000\006\011\030" +
    "\012\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\040\001\001\000\004\012\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\052\012\031\001\001\000\002\001\001\000\024\002" +
    "\062\003\055\004\054\005\066\007\071\010\061\016\056" +
    "\017\070\024\073\001\001\000\024\002\062\003\345\004" +
    "\054\005\066\007\071\010\061\016\056\017\070\024\073" +
    "\001\001\000\002\001\001\000\024\002\062\003\341\004" +
    "\054\005\066\007\071\010\061\016\056\017\070\024\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\062\003\311\004\054\005\066\007\071\010\061\016\056" +
    "\017\070\024\073\001\001\000\024\002\062\003\310\004" +
    "\054\005\066\007\071\010\061\016\056\017\070\024\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\062\003\143\004\054\005\066\007\071" +
    "\010\061\016\056\017\070\024\073\001\001\000\002\001" +
    "\001\000\024\002\062\003\127\004\054\005\066\007\071" +
    "\010\061\016\056\017\070\024\073\001\001\000\024\002" +
    "\062\003\126\004\054\005\066\007\071\010\061\016\056" +
    "\017\070\024\073\001\001\000\002\001\001\000\024\002" +
    "\062\003\074\004\054\005\066\007\071\010\061\016\056" +
    "\017\070\024\073\001\001\000\002\001\001\000\006\013" +
    "\101\014\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\062\003\113\004\054\005\066\007\071" +
    "\010\061\016\056\017\070\024\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\125\001\001\000\004\014\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\135\014\076\001\001\000" +
    "\002\001\001\000\024\002\062\003\137\004\054\005\066" +
    "\007\071\010\061\016\056\017\070\024\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\153\001\001\000\002\001" +
    "\001\000\004\015\155\001\001\000\002\001\001\000\024" +
    "\002\062\003\157\004\054\005\066\007\071\010\061\016" +
    "\056\017\070\024\073\001\001\000\002\001\001\000\024" +
    "\002\062\003\161\004\054\005\066\007\071\010\061\016" +
    "\056\017\070\024\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\200\014\076\001\001\000\002\001\001\000\024\002" +
    "\062\003\202\004\054\005\066\007\071\010\061\016\056" +
    "\017\070\024\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\222\014\076\001\001\000\006\013\214\014\076" +
    "\001\001\000\002\001\001\000\024\002\062\003\216\004" +
    "\054\005\066\007\071\010\061\016\056\017\070\024\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\062" +
    "\003\224\004\054\005\066\007\071\010\061\016\056\017" +
    "\070\024\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\234\014\076" +
    "\001\001\000\002\001\001\000\024\002\062\003\236\004" +
    "\054\005\066\007\071\010\061\016\056\017\070\024\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\244" +
    "\014\076\001\001\000\002\001\001\000\024\002\062\003" +
    "\246\004\054\005\066\007\071\010\061\016\056\017\070" +
    "\024\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\302\014" +
    "\076\001\001\000\002\001\001\000\024\002\062\003\304" +
    "\004\054\005\066\007\071\010\061\016\056\017\070\024" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\313\014\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\062\003\316\004\054\005" +
    "\066\007\071\010\061\016\056\017\070\024\073\001\001" +
    "\000\004\006\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\062\003\323\004\054" +
    "\005\066\007\071\010\061\016\056\017\070\024\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\330\014\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\062\003\333" +
    "\004\054\005\066\007\071\010\061\016\056\017\070\024" +
    "\073\001\001\000\004\006\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   ArrayList errores = new ArrayList();

public void syntax_error (Symbol s){
    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);
    errores.add("Syntax error: " +  s.value + " Linea: " + (s.left) + " Columna: " + (s.right));
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_PRIME ::= PROCEDURE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= LOOP PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= FUNCTION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_PRIME ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESIONES ::= EP TK_OR EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESIONES ::= EP TK_AND EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EP ::= TK_ID TK_OPREL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EP ::= TK_ID TK_OPREL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EP ::= TK_ID TK_OPREL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EP ::= TK_DIGITOFLOAT TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID ::= TK_ID TK_COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PUT ::= TK_PUT TK_PARENTESISI TK_COMILLA TK_ID TK_COMILLA TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS_PRIME ::= TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS TK_IS PROCEDURE_PRIME TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
