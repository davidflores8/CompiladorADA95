
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\014\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\002\000\002\005\011\000\002" +
    "\006\011\000\002\006\006\000\002\006\004\000\002\007" +
    "\006\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\004\012\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\011\003\000\002\011\005\000\002\011\002\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\007\000\002\017\007\000\002" +
    "\017\007\000\002\017\007\000\002\017\007\000\002\017" +
    "\007\000\002\017\007\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\020\004\000\002\020\004\000\002\023\010\000\002\023" +
    "\007\000\002\023\010\000\002\023\010\000\002\010\016" +
    "\000\002\010\016\000\002\010\016\000\002\010\016\000" +
    "\002\010\016\000\002\010\016\000\002\010\016\000\002" +
    "\010\016\000\002\010\016\000\002\024\021\000\002\024" +
    "\021\000\002\024\021\000\002\024\021\000\002\024\021" +
    "\000\002\024\021\000\002\024\021\000\002\024\021" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\031\005\001\002\000\004\002\u0147\001" +
    "\002\000\004\011\006\001\002\000\006\003\007\007\011" +
    "\001\002\000\006\003\012\011\014\001\002\000\004\032" +
    "\045\001\002\000\006\003\012\011\014\001\002\000\004" +
    "\037\040\001\002\000\006\032\uffb4\053\uffb4\001\002\000" +
    "\006\003\015\037\016\001\002\000\012\003\020\045\023" +
    "\046\022\047\021\001\002\000\012\003\020\045\023\046" +
    "\022\047\021\001\002\000\012\003\026\020\025\021\024" +
    "\022\030\001\002\000\012\003\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\001\002\000\012\003\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\001\002\000\012\003\uffb7\020\uffb7\021\uffb7\022\uffb7\001" +
    "\002\000\012\003\uffb8\020\uffb8\021\uffb8\022\uffb8\001\002" +
    "\000\010\010\uffba\016\uffba\032\uffba\001\002\000\010\010" +
    "\uffbc\016\uffbc\032\uffbc\001\002\000\010\010\uffb9\016\uffb9" +
    "\032\uffb9\001\002\000\006\010\031\016\032\001\002\000" +
    "\010\010\uffbb\016\uffbb\032\uffbb\001\002\000\006\032\uffb1" +
    "\053\uffb1\001\002\000\006\003\012\011\014\001\002\000" +
    "\006\032\uffb2\053\uffb2\001\002\000\012\003\026\020\025" +
    "\021\024\022\030\001\002\000\004\016\036\001\002\000" +
    "\006\003\012\011\014\001\002\000\006\032\uffaf\053\uffaf" +
    "\001\002\000\012\003\020\045\023\046\022\047\021\001" +
    "\002\000\012\003\026\020\025\021\024\022\030\001\002" +
    "\000\004\016\043\001\002\000\006\003\012\011\014\001" +
    "\002\000\006\032\uffb0\053\uffb0\001\002\000\006\011\050" +
    "\033\uffdc\001\002\000\004\033\107\001\002\000\006\016" +
    "\105\033\uffde\001\002\000\010\003\051\023\053\037\052" +
    "\001\002\000\014\003\056\011\050\020\057\021\055\022" +
    "\061\001\002\000\012\003\056\020\057\021\055\022\061" +
    "\001\002\000\004\011\050\001\002\000\006\016\uffdb\033" +
    "\uffdb\001\002\000\012\003\075\016\uffd7\017\074\033\uffd7" +
    "\001\002\000\006\016\uffc9\033\uffc9\001\002\000\012\003" +
    "\067\016\uffd1\017\070\033\uffd1\001\002\000\006\016\uffd9" +
    "\033\uffd9\001\002\000\012\003\063\016\uffcd\017\062\033" +
    "\uffcd\001\002\000\006\003\065\044\066\001\002\000\004" +
    "\044\064\001\002\000\006\016\uffcb\033\uffcb\001\002\000" +
    "\006\016\uffca\033\uffca\001\002\000\006\016\uffcc\033\uffcc" +
    "\001\002\000\004\013\073\001\002\000\006\003\071\013" +
    "\072\001\002\000\006\016\uffce\033\uffce\001\002\000\006" +
    "\016\uffd0\033\uffd0\001\002\000\006\016\uffcf\033\uffcf\001" +
    "\002\000\010\003\101\035\100\036\102\001\002\000\006" +
    "\035\076\036\077\001\002\000\006\016\uffd4\033\uffd4\001" +
    "\002\000\006\016\uffd3\033\uffd3\001\002\000\006\016\uffd5" +
    "\033\uffd5\001\002\000\006\016\uffd2\033\uffd2\001\002\000" +
    "\006\016\uffd6\033\uffd6\001\002\000\006\016\uffda\033\uffda" +
    "\001\002\000\006\016\uffd8\033\uffd8\001\002\000\006\011" +
    "\050\033\uffdc\001\002\000\004\033\uffdd\001\002\000\024" +
    "\003\122\004\114\011\117\026\127\031\005\034\ufff7\042" +
    "\123\043\113\052\120\001\002\000\036\003\122\004\114" +
    "\005\ufff7\006\ufff7\011\117\015\ufff7\025\ufff7\026\127\031" +
    "\005\034\ufff7\042\123\043\113\052\120\053\ufff7\001\002" +
    "\000\004\034\u0142\001\002\000\036\003\122\004\114\005" +
    "\ufff7\006\ufff7\011\117\015\ufff7\025\ufff7\026\127\031\005" +
    "\034\ufff7\042\123\043\113\052\120\053\ufff7\001\002\000" +
    "\006\003\u0133\007\u0134\001\002\000\004\007\u0120\001\002" +
    "\000\036\003\122\004\114\005\ufff7\006\ufff7\011\117\015" +
    "\ufff7\025\ufff7\026\127\031\005\034\ufff7\042\123\043\113" +
    "\052\120\053\ufff7\001\002\000\036\003\122\004\114\005" +
    "\ufff7\006\ufff7\011\117\015\ufff7\025\ufff7\026\127\031\005" +
    "\034\ufff7\042\123\043\113\052\120\053\ufff7\001\002\000" +
    "\010\003\316\017\317\037\320\001\002\000\006\003\243" +
    "\011\244\001\002\000\036\003\122\004\114\005\ufff7\006" +
    "\ufff7\011\117\015\ufff7\025\ufff7\026\127\031\005\034\ufff7" +
    "\042\123\043\113\052\120\053\ufff7\001\002\000\010\007" +
    "\203\011\204\037\202\001\002\000\006\003\164\007\165" +
    "\001\002\000\036\003\122\004\114\005\ufff7\006\ufff7\011" +
    "\117\015\ufff7\025\ufff7\026\127\031\005\034\ufff7\042\123" +
    "\043\113\052\120\053\ufff7\001\002\000\036\003\122\004" +
    "\114\005\ufff7\006\ufff7\011\117\015\ufff7\025\ufff7\026\127" +
    "\031\005\034\ufff7\042\123\043\113\052\120\053\ufff7\001" +
    "\002\000\036\003\122\004\114\005\ufff7\006\ufff7\011\117" +
    "\015\ufff7\025\ufff7\026\127\031\005\034\ufff7\042\123\043" +
    "\113\052\120\053\ufff7\001\002\000\004\007\130\001\002" +
    "\000\010\011\135\013\133\044\132\001\002\000\012\010" +
    "\uffe8\016\uffe8\040\156\041\155\001\002\000\004\012\153" +
    "\001\002\000\004\012\151\001\002\000\004\010\144\001" +
    "\002\000\004\012\136\001\002\000\014\011\143\013\141" +
    "\035\137\036\142\044\140\001\002\000\012\010\uffe2\016" +
    "\uffe2\040\uffe2\041\uffe2\001\002\000\012\010\uffe3\016\uffe3" +
    "\040\uffe3\041\uffe3\001\002\000\012\010\uffe4\016\uffe4\040" +
    "\uffe4\041\uffe4\001\002\000\012\010\uffe1\016\uffe1\040\uffe1" +
    "\041\uffe1\001\002\000\012\010\uffe5\016\uffe5\040\uffe5\041" +
    "\uffe5\001\002\000\004\024\145\001\002\000\024\003\122" +
    "\004\114\011\117\025\ufff7\026\127\031\005\042\123\043" +
    "\113\052\120\001\002\000\004\025\147\001\002\000\004" +
    "\016\150\001\002\000\036\003\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\011\uffe9\015\uffe9\025\uffe9\026\uffe9\031\uffe9\034\uffe9" +
    "\042\uffe9\043\uffe9\052\uffe9\053\uffe9\001\002\000\004\011" +
    "\152\001\002\000\012\010\uffe0\016\uffe0\040\uffe0\041\uffe0" +
    "\001\002\000\004\011\154\001\002\000\012\010\uffdf\016" +
    "\uffdf\040\uffdf\041\uffdf\001\002\000\010\011\135\013\133" +
    "\044\132\001\002\000\010\011\135\013\133\044\132\001" +
    "\002\000\006\010\uffe6\016\uffe6\001\002\000\006\010\uffe7" +
    "\016\uffe7\001\002\000\016\005\ufff8\006\ufff8\015\ufff8\025" +
    "\ufff8\034\ufff8\053\ufff8\001\002\000\016\005\ufffa\006\ufffa" +
    "\015\ufffa\025\ufffa\034\ufffa\053\ufffa\001\002\000\016\005" +
    "\ufffd\006\ufffd\015\ufffd\025\ufffd\034\ufffd\053\ufffd\001\002" +
    "\000\004\054\177\001\002\000\006\003\166\054\167\001" +
    "\002\000\004\010\175\001\002\000\006\003\170\010\171" +
    "\001\002\000\004\016\174\001\002\000\006\003\172\016" +
    "\173\001\002\000\036\003\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\011\uffc3\015\uffc3\025\uffc3\026\uffc3\031\uffc3\034\uffc3\042" +
    "\uffc3\043\uffc3\052\uffc3\053\uffc3\001\002\000\036\003\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\011\uffc8\015\uffc8\025\uffc8\026" +
    "\uffc8\031\uffc8\034\uffc8\042\uffc8\043\uffc8\052\uffc8\053\uffc8" +
    "\001\002\000\036\003\uffc4\004\uffc4\005\uffc4\006\uffc4\011" +
    "\uffc4\015\uffc4\025\uffc4\026\uffc4\031\uffc4\034\uffc4\042\uffc4" +
    "\043\uffc4\052\uffc4\053\uffc4\001\002\000\004\016\176\001" +
    "\002\000\036\003\uffc5\004\uffc5\005\uffc5\006\uffc5\011\uffc5" +
    "\015\uffc5\025\uffc5\026\uffc5\031\uffc5\034\uffc5\042\uffc5\043" +
    "\uffc5\052\uffc5\053\uffc5\001\002\000\004\010\200\001\002" +
    "\000\004\016\201\001\002\000\036\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\011\uffc6\015\uffc6\025\uffc6\026\uffc6\031\uffc6" +
    "\034\uffc6\042\uffc6\043\uffc6\052\uffc6\053\uffc6\001\002\000" +
    "\004\024\230\001\002\000\006\011\223\054\222\001\002" +
    "\000\006\003\007\007\011\001\002\000\004\053\206\001" +
    "\002\000\012\003\026\020\025\021\024\022\030\001\002" +
    "\000\004\032\210\001\002\000\006\011\050\033\uffdc\001" +
    "\002\000\004\033\212\001\002\000\024\003\122\004\114" +
    "\011\117\026\127\031\005\042\123\043\113\052\120\053" +
    "\ufff7\001\002\000\004\053\214\001\002\000\004\011\215" +
    "\001\002\000\004\016\216\001\002\000\004\034\217\001" +
    "\002\000\004\011\220\001\002\000\004\016\221\001\002" +
    "\000\036\003\uffa4\004\uffa4\005\uffa4\006\uffa4\011\uffa4\015" +
    "\uffa4\025\uffa4\026\uffa4\031\uffa4\034\uffa4\042\uffa4\043\uffa4" +
    "\052\uffa4\053\uffa4\001\002\000\004\010\226\001\002\000" +
    "\004\010\224\001\002\000\004\016\225\001\002\000\036" +
    "\003\uffc1\004\uffc1\005\uffc1\006\uffc1\011\uffc1\015\uffc1\025" +
    "\uffc1\026\uffc1\031\uffc1\034\uffc1\042\uffc1\043\uffc1\052\uffc1" +
    "\053\uffc1\001\002\000\004\016\227\001\002\000\036\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\011\uffc7\015\uffc7\025\uffc7" +
    "\026\uffc7\031\uffc7\034\uffc7\042\uffc7\043\uffc7\052\uffc7\053" +
    "\uffc7\001\002\000\004\050\231\001\002\000\004\011\232" +
    "\001\002\000\004\051\233\001\002\000\010\011\135\013" +
    "\133\044\132\001\002\000\004\016\235\001\002\000\024" +
    "\003\122\004\114\011\117\025\ufff7\026\127\031\005\042" +
    "\123\043\113\052\120\001\002\000\004\025\237\001\002" +
    "\000\004\011\240\001\002\000\004\016\241\001\002\000" +
    "\036\003\uffad\004\uffad\005\uffad\006\uffad\011\uffad\015\uffad" +
    "\025\uffad\026\uffad\031\uffad\034\uffad\042\uffad\043\uffad\052" +
    "\uffad\053\uffad\001\002\000\016\005\uffff\006\uffff\015\uffff" +
    "\025\uffff\034\uffff\053\uffff\001\002\000\006\003\007\007" +
    "\011\001\002\000\006\003\007\007\011\001\002\000\004" +
    "\053\246\001\002\000\012\003\026\020\025\021\024\022" +
    "\030\001\002\000\004\032\250\001\002\000\006\011\050" +
    "\033\uffdc\001\002\000\004\033\252\001\002\000\024\003" +
    "\122\004\114\011\117\026\127\031\005\042\123\043\113" +
    "\052\120\053\ufff7\001\002\000\004\053\254\001\002\000" +
    "\006\003\255\011\256\001\002\000\004\016\275\001\002" +
    "\000\006\003\257\016\260\001\002\000\004\034\272\001" +
    "\002\000\006\003\261\034\262\001\002\000\004\011\270" +
    "\001\002\000\006\003\263\011\264\001\002\000\004\016" +
    "\267\001\002\000\006\003\265\016\266\001\002\000\036" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\011\uff9e\015\uff9e\025" +
    "\uff9e\026\uff9e\031\uff9e\034\uff9e\042\uff9e\043\uff9e\052\uff9e" +
    "\053\uff9e\001\002\000\036\003\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\011\uffa5\015\uffa5\025\uffa5\026\uffa5\031\uffa5\034\uffa5" +
    "\042\uffa5\043\uffa5\052\uffa5\053\uffa5\001\002\000\036\003" +
    "\uff9f\004\uff9f\005\uff9f\006\uff9f\011\uff9f\015\uff9f\025\uff9f" +
    "\026\uff9f\031\uff9f\034\uff9f\042\uff9f\043\uff9f\052\uff9f\053" +
    "\uff9f\001\002\000\004\016\271\001\002\000\036\003\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\011\uffa0\015\uffa0\025\uffa0\026" +
    "\uffa0\031\uffa0\034\uffa0\042\uffa0\043\uffa0\052\uffa0\053\uffa0" +
    "\001\002\000\004\011\273\001\002\000\004\016\274\001" +
    "\002\000\036\003\uffa1\004\uffa1\005\uffa1\006\uffa1\011\uffa1" +
    "\015\uffa1\025\uffa1\026\uffa1\031\uffa1\034\uffa1\042\uffa1\043" +
    "\uffa1\052\uffa1\053\uffa1\001\002\000\004\034\276\001\002" +
    "\000\004\011\277\001\002\000\004\016\300\001\002\000" +
    "\036\003\uffa2\004\uffa2\005\uffa2\006\uffa2\011\uffa2\015\uffa2" +
    "\025\uffa2\026\uffa2\031\uffa2\034\uffa2\042\uffa2\043\uffa2\052" +
    "\uffa2\053\uffa2\001\002\000\004\053\302\001\002\000\012" +
    "\003\026\020\025\021\024\022\030\001\002\000\004\032" +
    "\304\001\002\000\006\011\050\033\uffdc\001\002\000\004" +
    "\033\306\001\002\000\024\003\122\004\114\011\117\026" +
    "\127\031\005\042\123\043\113\052\120\053\ufff7\001\002" +
    "\000\004\053\310\001\002\000\004\011\311\001\002\000" +
    "\004\016\312\001\002\000\004\034\313\001\002\000\004" +
    "\011\314\001\002\000\004\016\315\001\002\000\036\003" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\011\uffa3\015\uffa3\025\uffa3" +
    "\026\uffa3\031\uffa3\034\uffa3\042\uffa3\043\uffa3\052\uffa3\053" +
    "\uffa3\001\002\000\004\024\u0114\001\002\000\012\011\u0103" +
    "\013\u0102\035\u0100\036\u0101\001\002\000\006\003\322\024" +
    "\321\001\002\000\006\003\334\050\335\001\002\000\004" +
    "\050\323\001\002\000\004\011\324\001\002\000\004\051" +
    "\325\001\002\000\010\011\135\013\133\044\132\001\002" +
    "\000\004\016\327\001\002\000\024\003\122\004\114\011" +
    "\117\025\ufff7\026\127\031\005\042\123\043\113\052\120" +
    "\001\002\000\004\025\331\001\002\000\004\011\332\001" +
    "\002\000\004\016\333\001\002\000\036\003\uffab\004\uffab" +
    "\005\uffab\006\uffab\011\uffab\015\uffab\025\uffab\026\uffab\031" +
    "\uffab\034\uffab\042\uffab\043\uffab\052\uffab\053\uffab\001\002" +
    "\000\004\011\370\001\002\000\006\003\336\011\337\001" +
    "\002\000\004\051\361\001\002\000\006\003\341\051\340" +
    "\001\002\000\010\011\135\013\133\044\132\001\002\000" +
    "\010\011\135\013\133\044\132\001\002\000\004\016\343" +
    "\001\002\000\024\003\122\004\114\011\117\025\ufff7\026" +
    "\127\031\005\042\123\043\113\052\120\001\002\000\004" +
    "\025\345\001\002\000\004\011\346\001\002\000\004\016" +
    "\347\001\002\000\036\003\uffa8\004\uffa8\005\uffa8\006\uffa8" +
    "\011\uffa8\015\uffa8\025\uffa8\026\uffa8\031\uffa8\034\uffa8\042" +
    "\uffa8\043\uffa8\052\uffa8\053\uffa8\001\002\000\004\016\351" +
    "\001\002\000\024\003\122\004\114\011\117\025\ufff7\026" +
    "\127\031\005\042\123\043\113\052\120\001\002\000\004" +
    "\025\353\001\002\000\006\003\354\011\355\001\002\000" +
    "\004\016\360\001\002\000\006\003\356\016\357\001\002" +
    "\000\036\003\uffa6\004\uffa6\005\uffa6\006\uffa6\011\uffa6\015" +
    "\uffa6\025\uffa6\026\uffa6\031\uffa6\034\uffa6\042\uffa6\043\uffa6" +
    "\052\uffa6\053\uffa6\001\002\000\036\003\uffae\004\uffae\005" +
    "\uffae\006\uffae\011\uffae\015\uffae\025\uffae\026\uffae\031\uffae" +
    "\034\uffae\042\uffae\043\uffae\052\uffae\053\uffae\001\002\000" +
    "\036\003\uffa7\004\uffa7\005\uffa7\006\uffa7\011\uffa7\015\uffa7" +
    "\025\uffa7\026\uffa7\031\uffa7\034\uffa7\042\uffa7\043\uffa7\052" +
    "\uffa7\053\uffa7\001\002\000\010\011\135\013\133\044\132" +
    "\001\002\000\004\016\363\001\002\000\024\003\122\004" +
    "\114\011\117\025\ufff7\026\127\031\005\042\123\043\113" +
    "\052\120\001\002\000\004\025\365\001\002\000\004\011" +
    "\366\001\002\000\004\016\367\001\002\000\036\003\uffa9" +
    "\004\uffa9\005\uffa9\006\uffa9\011\uffa9\015\uffa9\025\uffa9\026" +
    "\uffa9\031\uffa9\034\uffa9\042\uffa9\043\uffa9\052\uffa9\053\uffa9" +
    "\001\002\000\004\051\371\001\002\000\010\011\135\013" +
    "\133\044\132\001\002\000\004\016\373\001\002\000\024" +
    "\003\122\004\114\011\117\025\ufff7\026\127\031\005\042" +
    "\123\043\113\052\120\001\002\000\004\025\375\001\002" +
    "\000\004\011\376\001\002\000\004\016\377\001\002\000" +
    "\036\003\uffaa\004\uffaa\005\uffaa\006\uffaa\011\uffaa\015\uffaa" +
    "\025\uffaa\026\uffaa\031\uffaa\034\uffaa\042\uffaa\043\uffaa\052" +
    "\uffaa\053\uffaa\001\002\000\004\016\u0113\001\002\000\004" +
    "\016\u0112\001\002\000\004\016\u0111\001\002\000\010\016" +
    "\u0106\027\u0104\030\u0105\001\002\000\010\011\u010d\013\u010c" +
    "\044\u010b\001\002\000\006\011\u0108\013\u0107\001\002\000" +
    "\036\003\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\015\ufff2" +
    "\025\ufff2\026\ufff2\031\ufff2\034\ufff2\042\ufff2\043\ufff2\052" +
    "\ufff2\053\ufff2\001\002\000\004\016\u010a\001\002\000\004" +
    "\016\u0109\001\002\000\036\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\011\uffee\015\uffee\025\uffee\026\uffee\031\uffee\034\uffee" +
    "\042\uffee\043\uffee\052\uffee\053\uffee\001\002\000\036\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\011\uffed\015\uffed\025\uffed" +
    "\026\uffed\031\uffed\034\uffed\042\uffed\043\uffed\052\uffed\053" +
    "\uffed\001\002\000\004\016\u0110\001\002\000\004\016\u010f" +
    "\001\002\000\004\016\u010e\001\002\000\036\003\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\011\ufff1\015\ufff1\025\ufff1\026\ufff1" +
    "\031\ufff1\034\ufff1\042\ufff1\043\ufff1\052\ufff1\053\ufff1\001" +
    "\002\000\036\003\ufff0\004\ufff0\005\ufff0\006\ufff0\011\ufff0" +
    "\015\ufff0\025\ufff0\026\ufff0\031\ufff0\034\ufff0\042\ufff0\043" +
    "\ufff0\052\ufff0\053\ufff0\001\002\000\036\003\uffef\004\uffef" +
    "\005\uffef\006\uffef\011\uffef\015\uffef\025\uffef\026\uffef\031" +
    "\uffef\034\uffef\042\uffef\043\uffef\052\uffef\053\uffef\001\002" +
    "\000\036\003\uffec\004\uffec\005\uffec\006\uffec\011\uffec\015" +
    "\uffec\025\uffec\026\uffec\031\uffec\034\uffec\042\uffec\043\uffec" +
    "\052\uffec\053\uffec\001\002\000\036\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\011\uffea\015\uffea\025\uffea\026\uffea\031\uffea" +
    "\034\uffea\042\uffea\043\uffea\052\uffea\053\uffea\001\002\000" +
    "\036\003\uffeb\004\uffeb\005\uffeb\006\uffeb\011\uffeb\015\uffeb" +
    "\025\uffeb\026\uffeb\031\uffeb\034\uffeb\042\uffeb\043\uffeb\052" +
    "\uffeb\053\uffeb\001\002\000\004\050\u0115\001\002\000\004" +
    "\011\u0116\001\002\000\004\051\u0117\001\002\000\010\011" +
    "\135\013\133\044\132\001\002\000\004\016\u0119\001\002" +
    "\000\024\003\122\004\114\011\117\025\ufff7\026\127\031" +
    "\005\042\123\043\113\052\120\001\002\000\004\025\u011b" +
    "\001\002\000\004\011\u011c\001\002\000\004\016\u011d\001" +
    "\002\000\036\003\uffac\004\uffac\005\uffac\006\uffac\011\uffac" +
    "\015\uffac\025\uffac\026\uffac\031\uffac\034\uffac\042\uffac\043" +
    "\uffac\052\uffac\053\uffac\001\002\000\016\005\ufffc\006\ufffc" +
    "\015\ufffc\025\ufffc\034\ufffc\053\ufffc\001\002\000\016\005" +
    "\ufff9\006\ufff9\015\ufff9\025\ufff9\034\ufff9\053\ufff9\001\002" +
    "\000\010\011\135\013\133\044\132\001\002\000\004\010" +
    "\u0122\001\002\000\004\014\u0123\001\002\000\030\003\122" +
    "\004\114\005\ufff7\006\ufff7\011\117\015\ufff7\026\127\031" +
    "\005\042\123\043\113\052\120\001\002\000\010\005\u0128" +
    "\006\u0125\015\u0126\001\002\000\004\007\u012d\001\002\000" +
    "\004\016\u012c\001\002\000\036\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\011\ufff6\015\ufff6\025\ufff6\026\ufff6\031\ufff6\034" +
    "\ufff6\042\ufff6\043\ufff6\052\ufff6\053\ufff6\001\002\000\024" +
    "\003\122\004\114\011\117\015\ufff7\026\127\031\005\042" +
    "\123\043\113\052\120\001\002\000\004\015\u012a\001\002" +
    "\000\004\016\u012b\001\002\000\036\003\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\011\ufff4\015\ufff4\025\ufff4\026\ufff4\031\ufff4" +
    "\034\ufff4\042\ufff4\043\ufff4\052\ufff4\053\ufff4\001\002\000" +
    "\036\003\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3\015\ufff3" +
    "\025\ufff3\026\ufff3\031\ufff3\034\ufff3\042\ufff3\043\ufff3\052" +
    "\ufff3\053\ufff3\001\002\000\010\011\135\013\133\044\132" +
    "\001\002\000\004\010\u012f\001\002\000\004\014\u0130\001" +
    "\002\000\030\003\122\004\114\005\ufff7\006\ufff7\011\117" +
    "\015\ufff7\026\127\031\005\042\123\043\113\052\120\001" +
    "\002\000\010\005\u0128\006\u0125\015\u0126\001\002\000\036" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\011\ufff5\015\ufff5\025" +
    "\ufff5\026\ufff5\031\ufff5\034\ufff5\042\ufff5\043\ufff5\052\ufff5" +
    "\053\ufff5\001\002\000\004\011\u013e\001\002\000\006\003" +
    "\u0135\011\u0136\001\002\000\004\010\u013c\001\002\000\006" +
    "\003\u0138\010\u0137\001\002\000\006\003\u013a\016\u013b\001" +
    "\002\000\004\016\u0139\001\002\000\036\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\011\uffbe\015\uffbe\025\uffbe\026\uffbe\031" +
    "\uffbe\034\uffbe\042\uffbe\043\uffbe\052\uffbe\053\uffbe\001\002" +
    "\000\036\003\uffbd\004\uffbd\005\uffbd\006\uffbd\011\uffbd\015" +
    "\uffbd\025\uffbd\026\uffbd\031\uffbd\034\uffbd\042\uffbd\043\uffbd" +
    "\052\uffbd\053\uffbd\001\002\000\036\003\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\011\uffc2\015\uffc2\025\uffc2\026\uffc2\031\uffc2" +
    "\034\uffc2\042\uffc2\043\uffc2\052\uffc2\053\uffc2\001\002\000" +
    "\004\016\u013d\001\002\000\036\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\011\uffbf\015\uffbf\025\uffbf\026\uffbf\031\uffbf\034" +
    "\uffbf\042\uffbf\043\uffbf\052\uffbf\053\uffbf\001\002\000\004" +
    "\010\u013f\001\002\000\004\016\u0140\001\002\000\036\003" +
    "\uffc0\004\uffc0\005\uffc0\006\uffc0\011\uffc0\015\uffc0\025\uffc0" +
    "\026\uffc0\031\uffc0\034\uffc0\042\uffc0\043\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\016\005\ufffb\006\ufffb\015\ufffb\025\ufffb" +
    "\034\ufffb\053\ufffb\001\002\000\004\011\u0143\001\002\000" +
    "\004\016\u0144\001\002\000\040\002\000\003\000\004\000" +
    "\005\000\006\000\011\000\015\000\025\000\026\000\031" +
    "\000\034\000\042\000\043\000\052\000\053\000\001\002" +
    "\000\016\005\ufffe\006\ufffe\015\ufffe\025\ufffe\034\ufffe\053" +
    "\ufffe\001\002\000\006\032\uffb3\053\uffb3\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\007\001\001\000\004\023\u0145" +
    "\001\001\000\002\001\001\000\004\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\033\001\001\000\004\021\016\001\001\000\004\022" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\032\001\001\000\002\001" +
    "\001\000\004\022\034\001\001\000\002\001\001\000\004" +
    "\023\036\001\001\000\002\001\001\000\004\021\040\001" +
    "\001\000\004\022\041\001\001\000\002\001\001\000\004" +
    "\023\043\001\001\000\002\001\001\000\006\011\045\012" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\102\015\103\001\001\000\004\015" +
    "\057\001\001\000\004\012\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\105\012\046\001\001" +
    "\000\002\001\001\000\024\002\115\003\110\004\107\005" +
    "\120\007\123\010\114\016\111\017\124\024\125\001\001" +
    "\000\024\002\115\003\u0144\004\107\005\120\007\123\010" +
    "\114\016\111\017\124\024\125\001\001\000\002\001\001" +
    "\000\024\002\115\003\u0140\004\107\005\120\007\123\010" +
    "\114\016\111\017\124\024\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\115\003\u011e\004\107\005" +
    "\120\007\123\010\114\016\111\017\124\024\125\001\001" +
    "\000\024\002\115\003\u011d\004\107\005\120\007\123\010" +
    "\114\016\111\017\124\024\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\115\003\241\004\107\005" +
    "\120\007\123\010\114\016\111\017\124\024\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\115\003" +
    "\162\004\107\005\120\007\123\010\114\016\111\017\124" +
    "\024\125\001\001\000\024\002\115\003\161\004\107\005" +
    "\120\007\123\010\114\016\111\017\124\024\125\001\001" +
    "\000\024\002\115\003\160\004\107\005\120\007\123\010" +
    "\114\016\111\017\124\024\125\001\001\000\002\001\001" +
    "\000\006\013\133\014\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\115\003\145\004\107\005" +
    "\120\007\123\010\114\016\111\017\124\024\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\157\001\001\000\004\014\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\204\001\001" +
    "\000\002\001\001\000\004\022\206\001\001\000\002\001" +
    "\001\000\006\011\210\012\046\001\001\000\002\001\001" +
    "\000\024\002\115\003\212\004\107\005\120\007\123\010" +
    "\114\016\111\017\124\024\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\233\014" +
    "\130\001\001\000\002\001\001\000\024\002\115\003\235" +
    "\004\107\005\120\007\123\010\114\016\111\017\124\024" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\300\001\001\000\004\020\244\001\001\000\002\001\001" +
    "\000\004\022\246\001\001\000\002\001\001\000\006\011" +
    "\250\012\046\001\001\000\002\001\001\000\024\002\115" +
    "\003\252\004\107\005\120\007\123\010\114\016\111\017" +
    "\124\024\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\302\001\001\000" +
    "\002\001\001\000\006\011\304\012\046\001\001\000\002" +
    "\001\001\000\024\002\115\003\306\004\107\005\120\007" +
    "\123\010\114\016\111\017\124\024\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\325\014\130\001\001\000\002\001" +
    "\001\000\024\002\115\003\327\004\107\005\120\007\123" +
    "\010\114\016\111\017\124\024\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\347\014\130\001\001\000\006" +
    "\013\341\014\130\001\001\000\002\001\001\000\024\002" +
    "\115\003\343\004\107\005\120\007\123\010\114\016\111" +
    "\017\124\024\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\115\003\351\004\107\005\120\007\123\010" +
    "\114\016\111\017\124\024\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\361\014\130\001\001\000\002\001\001\000\024\002" +
    "\115\003\363\004\107\005\120\007\123\010\114\016\111" +
    "\017\124\024\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\371\014\130\001\001\000\002\001\001\000" +
    "\024\002\115\003\373\004\107\005\120\007\123\010\114" +
    "\016\111\017\124\024\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u0117\014\130\001\001\000\002\001\001\000\024" +
    "\002\115\003\u0119\004\107\005\120\007\123\010\114\016" +
    "\111\017\124\024\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\u0120\014\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\115\003" +
    "\u0123\004\107\005\120\007\123\010\114\016\111\017\124" +
    "\024\125\001\001\000\004\006\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\115" +
    "\003\u0128\004\107\005\120\007\123\010\114\016\111\017" +
    "\124\024\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\u012d\014" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\115\003\u0130\004\107\005\120\007\123\010\114\016" +
    "\111\017\124\024\125\001\001\000\004\006\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   ArrayList errores = new ArrayList();

public void syntax_error (Symbol s){
    System.out.println("-----------------------");
    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);
    System.out.println("Valor " +s.value);
    errores.add("Syntax error: " +  s.value + " Linea: " + (s.left) + " Columna: " + (s.right));
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_PRIME ::= PROCEDURE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= LOOP PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= FUNCTION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_PRIME ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESIONES ::= EP TK_OR EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESIONES ::= EP TK_AND EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EP ::= TK_ID TK_OPREL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EP ::= TK_ID TK_OPREL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EP ::= TK_ID TK_OPREL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EP ::= TK_DIGITOFLOAT TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONES ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID ::= TK_ID TK_COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= TK_ID error ID 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \",\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID ::= TK_ID error TIPOS 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOS ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= TK_BOOLEAN error TK_TRUE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= TK_BOOLEAN error TK_FALSE 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS ::= TK_BOOLEAN TK_IGUAL error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un true o false "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOS ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOS ::= TK_INTEGER error TK_DIGITO 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS ::= TK_INTEGER TK_IGUAL error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un numero "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS ::= TK_FLOAT error TK_DIGITOFLOAT 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS ::= TK_FLOAT TK_IGUAL error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un numero decimal "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PUT ::= error TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \"put\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PUT ::= TK_PUT error TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PUT ::= TK_PUT TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba una cadena "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING error TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GET ::= error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \"get\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GET ::= TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GET ::= TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GET ::= TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error 
            {
              Object RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS_VARIABLES ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS_PARAMETROS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de parámetros permitidos son in, out e inout. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMETROS ::= error PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS_PRIME ::= error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS_PRIME ::= TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCTION ::= error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"function\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCTION ::= TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \"end\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error 
            {
              Object RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
