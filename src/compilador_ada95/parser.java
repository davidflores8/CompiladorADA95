
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\027\002\000\002\002" +
    "\015\000\002\023\014\000\002\023\014\000\002\023\014" +
    "\000\002\023\014\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\002\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\011\004\000\002\011\004\000\002" +
    "\012\010\000\002\012\007\000\002\012\003\000\002\012" +
    "\010\000\002\012\010\000\002\006\011\000\002\007\011" +
    "\000\002\007\006\000\002\007\004\000\002\016\006\000" +
    "\002\016\010\000\002\016\010\000\002\016\010\000\002" +
    "\016\010\000\002\016\010\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\010\012\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\022" +
    "\003\000\002\022\005\000\002\022\004\000\002\030\002" +
    "\000\002\022\005\000\002\022\002\000\002\031\002\000" +
    "\002\024\006\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\007\000\002\014\007\000\002\014\007\000\002\014\007" +
    "\000\002\014\007\000\002\014\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\017\016\000\002\017" +
    "\016\000\002\017\016\000\002\017\016\000\002\017\016" +
    "\000\002\017\016\000\002\017\016\000\002\017\016\000" +
    "\002\017\016\000\002\020\021\000\002\020\021\000\002" +
    "\020\021\000\002\020\021\000\002\020\021\000\002\020" +
    "\021\000\002\020\021\000\002\020\021\000\002\021\012" +
    "\000\002\021\012\000\002\021\012\000\002\021\012\000" +
    "\002\021\012\000\002\021\012\000\002\021\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\004\025\005\001\002\000\004\002\u0195\001" +
    "\002\000\004\020\006\001\002\000\006\003\007\044\011" +
    "\001\002\000\010\003\012\020\015\045\013\001\002\000" +
    "\004\026\000\001\002\000\010\003\012\020\015\045\013" +
    "\001\002\000\004\052\041\001\002\000\006\026\uffe6\042" +
    "\uffe6\001\002\000\006\026\uffea\042\uffea\001\002\000\006" +
    "\003\016\052\017\001\002\000\012\003\021\034\024\035" +
    "\023\036\022\001\002\000\012\003\021\034\024\035\023" +
    "\036\022\001\002\000\012\003\027\005\026\006\025\007" +
    "\031\001\002\000\012\003\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\001\002\000\012\003\uffec\005\uffec\006\uffec\007\uffec\001" +
    "\002\000\012\003\uffed\005\uffed\006\uffed\007\uffed\001\002" +
    "\000\012\003\uffee\005\uffee\006\uffee\007\uffee\001\002\000" +
    "\010\026\ufff0\045\ufff0\046\ufff0\001\002\000\010\026\ufff2" +
    "\045\ufff2\046\ufff2\001\002\000\010\026\uffef\045\uffef\046" +
    "\uffef\001\002\000\006\045\032\046\033\001\002\000\010" +
    "\026\ufff1\045\ufff1\046\ufff1\001\002\000\006\026\uffe7\042" +
    "\uffe7\001\002\000\010\003\012\020\015\045\013\001\002" +
    "\000\006\026\uffe8\042\uffe8\001\002\000\012\003\027\005" +
    "\026\006\025\007\031\001\002\000\004\046\037\001\002" +
    "\000\010\003\012\020\015\045\013\001\002\000\006\026" +
    "\uffe4\042\uffe4\001\002\000\012\003\021\034\024\035\023" +
    "\036\022\001\002\000\012\003\027\005\026\006\025\007" +
    "\031\001\002\000\004\046\044\001\002\000\010\003\012" +
    "\020\015\045\013\001\002\000\006\026\uffe5\042\uffe5\001" +
    "\002\000\004\026\047\001\002\000\014\003\052\020\057" +
    "\025\054\027\uffc6\041\055\001\002\000\004\027\u018f\001" +
    "\002\000\006\027\uffcb\046\u018d\001\002\000\004\020\u0178" +
    "\001\002\000\014\003\uffc8\020\uffc8\025\uffc8\027\uffc8\041" +
    "\uffc8\001\002\000\006\003\u0162\020\u0163\001\002\000\006" +
    "\003\116\020\117\001\002\000\014\003\052\020\057\025" +
    "\054\027\uffc6\041\055\001\002\000\010\003\061\047\uffc5" +
    "\052\062\001\002\000\004\047\113\001\002\000\014\003" +
    "\064\005\065\006\063\007\067\020\057\001\002\000\012" +
    "\003\064\005\065\006\063\007\067\001\002\000\012\003" +
    "\103\004\102\027\uffc0\046\uffc0\001\002\000\006\027\uffb2" +
    "\046\uffb2\001\002\000\012\003\076\004\075\027\uffba\046" +
    "\uffba\001\002\000\006\027\uffc2\046\uffc2\001\002\000\012" +
    "\003\070\004\071\027\uffb6\046\uffb6\001\002\000\004\033" +
    "\074\001\002\000\006\003\072\033\073\001\002\000\006" +
    "\027\uffb3\046\uffb3\001\002\000\006\027\uffb5\046\uffb5\001" +
    "\002\000\006\027\uffb4\046\uffb4\001\002\000\006\003\100" +
    "\022\101\001\002\000\004\022\077\001\002\000\006\027" +
    "\uffb8\046\uffb8\001\002\000\006\027\uffb7\046\uffb7\001\002" +
    "\000\006\027\uffb9\046\uffb9\001\002\000\010\003\107\050" +
    "\106\051\110\001\002\000\006\050\104\051\105\001\002" +
    "\000\006\027\uffbd\046\uffbd\001\002\000\006\027\uffbc\046" +
    "\uffbc\001\002\000\006\027\uffbe\046\uffbe\001\002\000\006" +
    "\027\uffbb\046\uffbb\001\002\000\006\027\uffbf\046\uffbf\001" +
    "\002\000\006\027\uffc3\046\uffc3\001\002\000\006\027\uffc1" +
    "\046\uffc1\001\002\000\004\020\057\001\002\000\006\027" +
    "\uffc4\046\uffc4\001\002\000\004\027\uffc9\001\002\000\006" +
    "\003\007\044\011\001\002\000\006\003\007\044\011\001" +
    "\002\000\004\042\121\001\002\000\012\003\027\005\026" +
    "\006\025\007\031\001\002\000\004\026\123\001\002\000" +
    "\014\003\052\020\057\025\054\027\uffc6\041\055\001\002" +
    "\000\004\027\125\001\002\000\022\003\140\010\133\015" +
    "\144\020\135\031\141\032\132\042\ufff3\055\137\001\002" +
    "\000\034\003\140\010\133\011\ufff3\012\ufff3\014\ufff3\015" +
    "\144\020\135\024\ufff3\030\ufff3\031\141\032\132\042\ufff3" +
    "\055\137\001\002\000\004\042\u013f\001\002\000\034\003" +
    "\140\010\133\011\ufff3\012\ufff3\014\ufff3\015\144\020\135" +
    "\024\ufff3\030\ufff3\031\141\032\132\042\ufff3\055\137\001" +
    "\002\000\034\003\140\010\133\011\ufff3\012\ufff3\014\ufff3" +
    "\015\144\020\135\024\ufff3\030\ufff3\031\141\032\132\042" +
    "\ufff3\055\137\001\002\000\006\003\u012f\044\u0130\001\002" +
    "\000\004\044\u011c\001\002\000\034\003\140\010\133\011" +
    "\ufff3\012\ufff3\014\ufff3\015\144\020\135\024\ufff3\030\ufff3" +
    "\031\141\032\132\042\ufff3\055\137\001\002\000\010\003" +
    "\313\004\314\052\315\001\002\000\034\003\140\010\133" +
    "\011\ufff3\012\ufff3\014\ufff3\015\144\020\135\024\ufff3\030" +
    "\ufff3\031\141\032\132\042\ufff3\055\137\001\002\000\010" +
    "\003\247\020\251\022\250\001\002\000\010\020\220\044" +
    "\217\052\216\001\002\000\006\003\200\044\201\001\002" +
    "\000\034\003\140\010\133\011\ufff3\012\ufff3\014\ufff3\015" +
    "\144\020\135\024\ufff3\030\ufff3\031\141\032\132\042\ufff3" +
    "\055\137\001\002\000\034\003\140\010\133\011\ufff3\012" +
    "\ufff3\014\ufff3\015\144\020\135\024\ufff3\030\ufff3\031\141" +
    "\032\132\042\ufff3\055\137\001\002\000\004\044\145\001" +
    "\002\000\010\020\152\022\150\033\147\001\002\000\012" +
    "\045\uffd5\046\uffd5\053\173\054\172\001\002\000\004\021" +
    "\170\001\002\000\004\021\166\001\002\000\004\045\161" +
    "\001\002\000\004\021\153\001\002\000\014\020\160\022" +
    "\156\033\155\050\154\051\157\001\002\000\012\045\uffcf" +
    "\046\uffcf\053\uffcf\054\uffcf\001\002\000\012\045\uffd0\046" +
    "\uffd0\053\uffd0\054\uffd0\001\002\000\012\045\uffd1\046\uffd1" +
    "\053\uffd1\054\uffd1\001\002\000\012\045\uffce\046\uffce\053" +
    "\uffce\054\uffce\001\002\000\012\045\uffd2\046\uffd2\053\uffd2" +
    "\054\uffd2\001\002\000\004\013\162\001\002\000\022\003" +
    "\140\010\133\014\ufff3\015\144\020\135\031\141\032\132" +
    "\055\137\001\002\000\004\014\164\001\002\000\004\046" +
    "\165\001\002\000\034\003\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\014\uffd6\015\uffd6\020\uffd6\024\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\042\uffd6\055\uffd6\001\002\000\004\020\167\001\002" +
    "\000\012\045\uffcd\046\uffcd\053\uffcd\054\uffcd\001\002\000" +
    "\004\020\171\001\002\000\012\045\uffcc\046\uffcc\053\uffcc" +
    "\054\uffcc\001\002\000\010\020\152\022\150\033\147\001" +
    "\002\000\010\020\152\022\150\033\147\001\002\000\006" +
    "\045\uffd3\046\uffd3\001\002\000\006\045\uffd4\046\uffd4\001" +
    "\002\000\016\011\ufff6\012\ufff6\014\ufff6\024\ufff6\030\ufff6" +
    "\042\ufff6\001\002\000\016\011\ufff8\012\ufff8\014\ufff8\024" +
    "\ufff8\030\ufff8\042\ufff8\001\002\000\004\043\213\001\002" +
    "\000\006\003\202\043\203\001\002\000\004\045\211\001" +
    "\002\000\006\003\205\045\204\001\002\000\006\003\207" +
    "\046\210\001\002\000\004\046\206\001\002\000\034\003" +
    "\uffad\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\020\uffad" +
    "\024\uffad\030\uffad\031\uffad\032\uffad\042\uffad\055\uffad\001" +
    "\002\000\034\003\uffac\010\uffac\011\uffac\012\uffac\014\uffac" +
    "\015\uffac\020\uffac\024\uffac\030\uffac\031\uffac\032\uffac\042" +
    "\uffac\055\uffac\001\002\000\034\003\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\014\uffb1\015\uffb1\020\uffb1\024\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\042\uffb1\055\uffb1\001\002\000\004\046\212" +
    "\001\002\000\034\003\uffae\010\uffae\011\uffae\012\uffae\014" +
    "\uffae\015\uffae\020\uffae\024\uffae\030\uffae\031\uffae\032\uffae" +
    "\042\uffae\055\uffae\001\002\000\004\045\214\001\002\000" +
    "\004\046\215\001\002\000\034\003\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\014\uffaf\015\uffaf\020\uffaf\024\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\042\uffaf\055\uffaf\001\002\000\004\013\235" +
    "\001\002\000\006\020\230\043\227\001\002\000\004\034" +
    "\221\001\002\000\004\022\222\001\002\000\004\013\223" +
    "\001\002\000\022\003\140\010\133\014\ufff3\015\144\020" +
    "\135\031\141\032\132\055\137\001\002\000\004\014\225" +
    "\001\002\000\004\046\226\001\002\000\034\003\uff91\010" +
    "\uff91\011\uff91\012\uff91\014\uff91\015\uff91\020\uff91\024\uff91" +
    "\030\uff91\031\uff91\032\uff91\042\uff91\055\uff91\001\002\000" +
    "\004\045\233\001\002\000\004\045\231\001\002\000\004" +
    "\046\232\001\002\000\034\003\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\014\uffaa\015\uffaa\020\uffaa\024\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\042\uffaa\055\uffaa\001\002\000\004\046\234\001" +
    "\002\000\034\003\uffb0\010\uffb0\011\uffb0\012\uffb0\014\uffb0" +
    "\015\uffb0\020\uffb0\024\uffb0\030\uffb0\031\uffb0\032\uffb0\042" +
    "\uffb0\055\uffb0\001\002\000\004\037\236\001\002\000\004" +
    "\020\237\001\002\000\004\040\240\001\002\000\010\020" +
    "\152\022\150\033\147\001\002\000\004\046\242\001\002" +
    "\000\022\003\140\010\133\014\ufff3\015\144\020\135\031" +
    "\141\032\132\055\137\001\002\000\004\014\244\001\002" +
    "\000\004\020\245\001\002\000\004\046\246\001\002\000" +
    "\034\003\uffa4\010\uffa4\011\uffa4\012\uffa4\014\uffa4\015\uffa4" +
    "\020\uffa4\024\uffa4\030\uffa4\031\uffa4\032\uffa4\042\uffa4\055" +
    "\uffa4\001\002\000\004\034\304\001\002\000\004\034\276" +
    "\001\002\000\004\034\252\001\002\000\010\003\253\020" +
    "\255\022\254\001\002\000\004\013\272\001\002\000\006" +
    "\003\263\013\262\001\002\000\004\013\256\001\002\000" +
    "\022\003\140\010\133\014\ufff3\015\144\020\135\031\141" +
    "\032\132\055\137\001\002\000\004\014\260\001\002\000" +
    "\004\046\261\001\002\000\034\003\uff94\010\uff94\011\uff94" +
    "\012\uff94\014\uff94\015\uff94\020\uff94\024\uff94\030\uff94\031" +
    "\uff94\032\uff94\042\uff94\055\uff94\001\002\000\022\003\140" +
    "\010\133\014\ufff3\015\144\020\135\031\141\032\132\055" +
    "\137\001\002\000\022\003\140\010\133\014\ufff3\015\144" +
    "\020\135\031\141\032\132\055\137\001\002\000\004\014" +
    "\265\001\002\000\004\046\266\001\002\000\034\003\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\014\uff8e\015\uff8e\020\uff8e\024" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\042\uff8e\055\uff8e\001\002" +
    "\000\004\014\270\001\002\000\004\046\271\001\002\000" +
    "\034\003\uff92\010\uff92\011\uff92\012\uff92\014\uff92\015\uff92" +
    "\020\uff92\024\uff92\030\uff92\031\uff92\032\uff92\042\uff92\055" +
    "\uff92\001\002\000\022\003\140\010\133\014\ufff3\015\144" +
    "\020\135\031\141\032\132\055\137\001\002\000\004\014" +
    "\274\001\002\000\004\046\275\001\002\000\034\003\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\020\uff8f\024" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\042\uff8f\055\uff8f\001\002" +
    "\000\004\020\277\001\002\000\004\013\300\001\002\000" +
    "\022\003\140\010\133\014\ufff3\015\144\020\135\031\141" +
    "\032\132\055\137\001\002\000\004\014\302\001\002\000" +
    "\004\046\303\001\002\000\034\003\uff93\010\uff93\011\uff93" +
    "\012\uff93\014\uff93\015\uff93\020\uff93\024\uff93\030\uff93\031" +
    "\uff93\032\uff93\042\uff93\055\uff93\001\002\000\004\022\305" +
    "\001\002\000\004\013\306\001\002\000\022\003\140\010" +
    "\133\014\ufff3\015\144\020\135\031\141\032\132\055\137" +
    "\001\002\000\004\014\310\001\002\000\004\046\311\001" +
    "\002\000\034\003\uff90\010\uff90\011\uff90\012\uff90\014\uff90" +
    "\015\uff90\020\uff90\024\uff90\030\uff90\031\uff90\032\uff90\042" +
    "\uff90\055\uff90\001\002\000\016\011\ufffa\012\ufffa\014\ufffa" +
    "\024\ufffa\030\ufffa\042\ufffa\001\002\000\004\013\u0111\001" +
    "\002\000\012\020\u0100\022\376\050\375\051\377\001\002" +
    "\000\006\003\317\013\316\001\002\000\006\003\331\037" +
    "\332\001\002\000\004\037\320\001\002\000\004\020\321" +
    "\001\002\000\004\040\322\001\002\000\010\020\152\022" +
    "\150\033\147\001\002\000\004\046\324\001\002\000\022" +
    "\003\140\010\133\014\ufff3\015\144\020\135\031\141\032" +
    "\132\055\137\001\002\000\004\014\326\001\002\000\004" +
    "\020\327\001\002\000\004\046\330\001\002\000\034\003" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\014\uffa2\015\uffa2\020\uffa2" +
    "\024\uffa2\030\uffa2\031\uffa2\032\uffa2\042\uffa2\055\uffa2\001" +
    "\002\000\004\020\365\001\002\000\006\003\333\020\334" +
    "\001\002\000\004\040\356\001\002\000\006\003\336\040" +
    "\335\001\002\000\010\020\152\022\150\033\147\001\002" +
    "\000\010\020\152\022\150\033\147\001\002\000\004\046" +
    "\340\001\002\000\022\003\140\010\133\014\ufff3\015\144" +
    "\020\135\031\141\032\132\055\137\001\002\000\004\014" +
    "\342\001\002\000\004\020\343\001\002\000\004\046\344" +
    "\001\002\000\034\003\uff9f\010\uff9f\011\uff9f\012\uff9f\014" +
    "\uff9f\015\uff9f\020\uff9f\024\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\042\uff9f\055\uff9f\001\002\000\004\046\346\001\002\000" +
    "\022\003\140\010\133\014\ufff3\015\144\020\135\031\141" +
    "\032\132\055\137\001\002\000\004\014\350\001\002\000" +
    "\006\003\351\020\352\001\002\000\004\046\355\001\002" +
    "\000\006\003\353\046\354\001\002\000\034\003\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d\020\uff9d\024\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\042\uff9d\055\uff9d\001\002\000" +
    "\034\003\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\020\uffa5\024\uffa5\030\uffa5\031\uffa5\032\uffa5\042\uffa5\055" +
    "\uffa5\001\002\000\034\003\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\020\uff9e\024\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\042\uff9e\055\uff9e\001\002\000\010\020\152\022\150" +
    "\033\147\001\002\000\004\046\360\001\002\000\022\003" +
    "\140\010\133\014\ufff3\015\144\020\135\031\141\032\132" +
    "\055\137\001\002\000\004\014\362\001\002\000\004\020" +
    "\363\001\002\000\004\046\364\001\002\000\034\003\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\020\uffa0\024" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\042\uffa0\055\uffa0\001\002" +
    "\000\004\040\366\001\002\000\010\020\152\022\150\033" +
    "\147\001\002\000\004\046\370\001\002\000\022\003\140" +
    "\010\133\014\ufff3\015\144\020\135\031\141\032\132\055" +
    "\137\001\002\000\004\014\372\001\002\000\004\020\373" +
    "\001\002\000\004\046\374\001\002\000\034\003\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\014\uffa1\015\uffa1\020\uffa1\024\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\042\uffa1\055\uffa1\001\002\000" +
    "\004\046\u0110\001\002\000\004\046\u010f\001\002\000\004" +
    "\046\u010e\001\002\000\010\016\u0101\017\u0102\046\u0103\001" +
    "\002\000\010\020\u010a\022\u0109\033\u0108\001\002\000\006" +
    "\020\u0105\022\u0104\001\002\000\034\003\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\014\uffdf\015\uffdf\020\uffdf\024\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\042\uffdf\055\uffdf\001\002\000\004\046" +
    "\u0107\001\002\000\004\046\u0106\001\002\000\034\003\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\020\uffdb\024" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\042\uffdb\055\uffdb\001\002" +
    "\000\034\003\uffda\010\uffda\011\uffda\012\uffda\014\uffda\015" +
    "\uffda\020\uffda\024\uffda\030\uffda\031\uffda\032\uffda\042\uffda" +
    "\055\uffda\001\002\000\004\046\u010d\001\002\000\004\046" +
    "\u010c\001\002\000\004\046\u010b\001\002\000\034\003\uffde" +
    "\010\uffde\011\uffde\012\uffde\014\uffde\015\uffde\020\uffde\024" +
    "\uffde\030\uffde\031\uffde\032\uffde\042\uffde\055\uffde\001\002" +
    "\000\034\003\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\020\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd\042\uffdd" +
    "\055\uffdd\001\002\000\034\003\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\014\uffdc\015\uffdc\020\uffdc\024\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\042\uffdc\055\uffdc\001\002\000\034\003\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7\020\uffd7\024\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\042\uffd7\055\uffd7\001\002\000" +
    "\034\003\uffd9\010\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9" +
    "\020\uffd9\024\uffd9\030\uffd9\031\uffd9\032\uffd9\042\uffd9\055" +
    "\uffd9\001\002\000\034\003\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\014\uffd8\015\uffd8\020\uffd8\024\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\042\uffd8\055\uffd8\001\002\000\004\037\u0112\001\002" +
    "\000\004\020\u0113\001\002\000\004\040\u0114\001\002\000" +
    "\010\020\152\022\150\033\147\001\002\000\004\046\u0116" +
    "\001\002\000\022\003\140\010\133\014\ufff3\015\144\020" +
    "\135\031\141\032\132\055\137\001\002\000\004\014\u0118" +
    "\001\002\000\004\020\u0119\001\002\000\004\046\u011a\001" +
    "\002\000\034\003\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3" +
    "\015\uffa3\020\uffa3\024\uffa3\030\uffa3\031\uffa3\032\uffa3\042" +
    "\uffa3\055\uffa3\001\002\000\016\011\ufff5\012\ufff5\014\ufff5" +
    "\024\ufff5\030\ufff5\042\ufff5\001\002\000\010\020\152\022" +
    "\150\033\147\001\002\000\004\045\u011e\001\002\000\004" +
    "\023\u011f\001\002\000\026\003\140\010\133\011\ufff3\012" +
    "\ufff3\015\144\020\135\024\ufff3\031\141\032\132\055\137" +
    "\001\002\000\010\011\u0124\012\u0121\024\u0122\001\002\000" +
    "\004\044\u0129\001\002\000\004\046\u0128\001\002\000\034" +
    "\003\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\020" +
    "\uffe3\024\uffe3\030\uffe3\031\uffe3\032\uffe3\042\uffe3\055\uffe3" +
    "\001\002\000\022\003\140\010\133\015\144\020\135\024" +
    "\ufff3\031\141\032\132\055\137\001\002\000\004\024\u0126" +
    "\001\002\000\004\046\u0127\001\002\000\034\003\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\020\uffe1\024\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\042\uffe1\055\uffe1\001\002\000" +
    "\034\003\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\020\uffe0\024\uffe0\030\uffe0\031\uffe0\032\uffe0\042\uffe0\055" +
    "\uffe0\001\002\000\010\020\152\022\150\033\147\001\002" +
    "\000\004\045\u012b\001\002\000\004\023\u012c\001\002\000" +
    "\026\003\140\010\133\011\ufff3\012\ufff3\015\144\020\135" +
    "\024\ufff3\031\141\032\132\055\137\001\002\000\010\011" +
    "\u0124\012\u0121\024\u0122\001\002\000\034\003\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\014\uffe2\015\uffe2\020\uffe2\024\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\042\uffe2\055\uffe2\001\002\000\004" +
    "\020\u013a\001\002\000\006\003\u0131\020\u0132\001\002\000" +
    "\004\045\u0138\001\002\000\006\003\u0133\045\u0134\001\002" +
    "\000\004\046\u0137\001\002\000\006\003\u0135\046\u0136\001" +
    "\002\000\034\003\uffa6\010\uffa6\011\uffa6\012\uffa6\014\uffa6" +
    "\015\uffa6\020\uffa6\024\uffa6\030\uffa6\031\uffa6\032\uffa6\042" +
    "\uffa6\055\uffa6\001\002\000\034\003\uffab\010\uffab\011\uffab" +
    "\012\uffab\014\uffab\015\uffab\020\uffab\024\uffab\030\uffab\031" +
    "\uffab\032\uffab\042\uffab\055\uffab\001\002\000\034\003\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\020\uffa7\024" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\042\uffa7\055\uffa7\001\002" +
    "\000\004\046\u0139\001\002\000\034\003\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\014\uffa8\015\uffa8\020\uffa8\024\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\042\uffa8\055\uffa8\001\002\000\004\045" +
    "\u013b\001\002\000\004\046\u013c\001\002\000\034\003\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\020\uffa9\024" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\042\uffa9\055\uffa9\001\002" +
    "\000\016\011\ufff7\012\ufff7\014\ufff7\024\ufff7\030\ufff7\042" +
    "\ufff7\001\002\000\016\011\ufff4\012\ufff4\014\ufff4\024\ufff4" +
    "\030\ufff4\042\ufff4\001\002\000\006\003\u0140\020\u0141\001" +
    "\002\000\004\046\u0150\001\002\000\006\003\u0142\046\u0143" +
    "\001\002\000\004\030\u014d\001\002\000\006\003\u0144\030" +
    "\u0145\001\002\000\004\020\u014b\001\002\000\006\003\u0146" +
    "\020\u0147\001\002\000\004\046\u014a\001\002\000\006\003" +
    "\u0148\046\u0149\001\002\000\014\003\uff95\020\uff95\025\uff95" +
    "\027\uff95\041\uff95\001\002\000\014\003\uff9c\020\uff9c\025" +
    "\uff9c\027\uff9c\041\uff9c\001\002\000\014\003\uff96\020\uff96" +
    "\025\uff96\027\uff96\041\uff96\001\002\000\004\046\u014c\001" +
    "\002\000\014\003\uff97\020\uff97\025\uff97\027\uff97\041\uff97" +
    "\001\002\000\004\020\u014e\001\002\000\004\046\u014f\001" +
    "\002\000\014\003\uff98\020\uff98\025\uff98\027\uff98\041\uff98" +
    "\001\002\000\004\030\u0151\001\002\000\004\020\u0152\001" +
    "\002\000\004\046\u0153\001\002\000\014\003\uff99\020\uff99" +
    "\025\uff99\027\uff99\041\uff99\001\002\000\016\011\ufff9\012" +
    "\ufff9\014\ufff9\024\ufff9\030\ufff9\042\ufff9\001\002\000\004" +
    "\042\u0156\001\002\000\012\003\027\005\026\006\025\007" +
    "\031\001\002\000\004\026\u0158\001\002\000\014\003\052" +
    "\020\057\025\054\027\uffc6\041\055\001\002\000\004\027" +
    "\u015a\001\002\000\022\003\140\010\133\015\144\020\135" +
    "\031\141\032\132\042\ufff3\055\137\001\002\000\004\042" +
    "\u015c\001\002\000\004\020\u015d\001\002\000\004\046\u015e" +
    "\001\002\000\004\030\u015f\001\002\000\004\020\u0160\001" +
    "\002\000\004\046\u0161\001\002\000\014\003\uff9a\020\uff9a" +
    "\025\uff9a\027\uff9a\041\uff9a\001\002\000\006\003\007\044" +
    "\011\001\002\000\006\003\007\044\011\001\002\000\004" +
    "\026\u0165\001\002\000\014\003\052\020\057\025\054\027" +
    "\uffc6\041\055\001\002\000\004\027\u0167\001\002\000\022" +
    "\003\140\010\133\015\144\020\135\030\ufff3\031\141\032" +
    "\132\055\137\001\002\000\004\030\u0169\001\002\000\006" +
    "\003\u016a\020\u016b\001\002\000\004\046\u016d\001\002\000" +
    "\004\046\u016c\001\002\000\014\003\ufffe\020\ufffe\025\ufffe" +
    "\027\ufffe\041\ufffe\001\002\000\014\003\ufffb\020\ufffb\025" +
    "\ufffb\027\ufffb\041\ufffb\001\002\000\004\026\u016f\001\002" +
    "\000\014\003\052\020\057\025\054\027\uffc6\041\055\001" +
    "\002\000\004\027\u0171\001\002\000\022\003\140\010\133" +
    "\015\144\020\135\030\ufff3\031\141\032\132\055\137\001" +
    "\002\000\004\030\u0173\001\002\000\004\020\u0174\001\002" +
    "\000\004\046\u0175\001\002\000\014\003\ufffc\020\ufffc\025" +
    "\ufffc\027\ufffc\041\ufffc\001\002\000\014\003\052\020\057" +
    "\025\054\027\uffc6\041\055\001\002\000\004\027\uffc7\001" +
    "\002\000\006\003\007\044\011\001\002\000\006\026\u017a" +
    "\042\u017b\001\002\000\014\003\052\020\057\025\054\027" +
    "\uffc6\041\055\001\002\000\012\003\027\005\026\006\025" +
    "\007\031\001\002\000\004\026\u017d\001\002\000\014\003" +
    "\052\020\057\025\054\027\uffc6\041\055\001\002\000\004" +
    "\027\u017f\001\002\000\022\003\140\010\133\015\144\020" +
    "\135\031\141\032\132\042\ufff3\055\137\001\002\000\004" +
    "\042\u0181\001\002\000\004\020\u0182\001\002\000\004\046" +
    "\u0183\001\002\000\004\030\u0184\001\002\000\004\020\u0185" +
    "\001\002\000\004\046\u0186\001\002\000\014\003\uff9b\020" +
    "\uff9b\025\uff9b\027\uff9b\041\uff9b\001\002\000\004\027\u0188" +
    "\001\002\000\022\003\140\010\133\015\144\020\135\030" +
    "\ufff3\031\141\032\132\055\137\001\002\000\004\030\u018a" +
    "\001\002\000\004\020\u018b\001\002\000\004\046\u018c\001" +
    "\002\000\014\003\ufffd\020\ufffd\025\ufffd\027\ufffd\041\ufffd" +
    "\001\002\000\014\003\052\020\057\025\054\027\uffc6\041" +
    "\055\001\002\000\004\027\uffca\001\002\000\022\003\140" +
    "\010\133\015\144\020\135\030\ufff3\031\141\032\132\055" +
    "\137\001\002\000\004\030\u0191\001\002\000\004\020\u0192" +
    "\001\002\000\004\046\u0193\001\002\000\004\002\uffff\001" +
    "\002\000\006\026\uffe9\042\uffe9\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\007\001\001\000\004\012\u0193" +
    "\001\001\000\004\027\045\001\001\000\004\012\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\034\001\001\000\004\025" +
    "\017\001\001\000\004\026\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\033\001\001\000\002\001\001\000\004\026\035\001\001" +
    "\000\002\001\001\000\004\012\037\001\001\000\002\001" +
    "\001\000\004\025\041\001\001\000\004\026\042\001\001" +
    "\000\002\001\001\000\004\012\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\055\022\047\023\052" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\055\022\114\023\052\024" +
    "\050\001\001\000\004\031\057\001\001\000\002\001\001" +
    "\000\006\013\111\024\110\001\001\000\004\013\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0154\001\001" +
    "\000\004\011\117\001\001\000\002\001\001\000\004\026" +
    "\121\001\001\000\002\001\001\000\012\020\055\022\123" +
    "\023\052\024\050\001\001\000\002\001\001\000\022\003" +
    "\126\006\135\010\125\014\130\015\142\016\141\017\133" +
    "\021\127\001\001\000\022\003\u0153\006\135\010\125\014" +
    "\130\015\142\016\141\017\133\021\127\001\001\000\002" +
    "\001\001\000\022\003\u013d\006\135\010\125\014\130\015" +
    "\142\016\141\017\133\021\127\001\001\000\022\003\u013c" +
    "\006\135\010\125\014\130\015\142\016\141\017\133\021" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\u011a\006\135\010\125\014\130\015\142\016\141\017" +
    "\133\021\127\001\001\000\002\001\001\000\022\003\311" +
    "\006\135\010\125\014\130\015\142\016\141\017\133\021" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\176\006\135\010\125\014\130\015" +
    "\142\016\141\017\133\021\127\001\001\000\022\003\175" +
    "\006\135\010\125\014\130\015\142\016\141\017\133\021" +
    "\127\001\001\000\002\001\001\000\006\004\150\005\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\162\006\135\010\125\014\130\015\142\016\141\017" +
    "\133\021\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\174\001\001" +
    "\000\004\005\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\223\006\135" +
    "\010\125\014\130\015\142\016\141\017\133\021\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\240\005\145\001\001\000\002\001\001\000\022\003\242" +
    "\006\135\010\125\014\130\015\142\016\141\017\133\021" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\256\006" +
    "\135\010\125\014\130\015\142\016\141\017\133\021\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\266\006\135\010\125\014\130\015\142" +
    "\016\141\017\133\021\127\001\001\000\022\003\263\006" +
    "\135\010\125\014\130\015\142\016\141\017\133\021\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\272\006\135\010\125\014\130\015\142\016" +
    "\141\017\133\021\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\300\006\135\010\125\014\130\015\142" +
    "\016\141\017\133\021\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\306\006\135\010\125\014\130\015" +
    "\142\016\141\017\133\021\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\322\005\145\001\001\000\002\001\001" +
    "\000\022\003\324\006\135\010\125\014\130\015\142\016" +
    "\141\017\133\021\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\344\005\145\001\001\000\006\004\336\005" +
    "\145\001\001\000\002\001\001\000\022\003\340\006\135" +
    "\010\125\014\130\015\142\016\141\017\133\021\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\346\006" +
    "\135\010\125\014\130\015\142\016\141\017\133\021\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\356\005\145\001\001\000" +
    "\002\001\001\000\022\003\360\006\135\010\125\014\130" +
    "\015\142\016\141\017\133\021\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\366\005\145\001\001\000" +
    "\002\001\001\000\022\003\370\006\135\010\125\014\130" +
    "\015\142\016\141\017\133\021\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u0114\005\145\001\001\000\002\001\001" +
    "\000\022\003\u0116\006\135\010\125\014\130\015\142\016" +
    "\141\017\133\021\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u011c\005\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\u011f\006\135\010\125\014" +
    "\130\015\142\016\141\017\133\021\127\001\001\000\004" +
    "\007\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\u0124\006\135\010\125\014\130" +
    "\015\142\016\141\017\133\021\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\u0129\005\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\u012c\006\135\010\125\014\130" +
    "\015\142\016\141\017\133\021\127\001\001\000\004\007" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u0156\001\001" +
    "\000\002\001\001\000\012\020\055\022\u0158\023\052\024" +
    "\050\001\001\000\002\001\001\000\022\003\u015a\006\135" +
    "\010\125\014\130\015\142\016\141\017\133\021\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u016d\001\001\000\004\011\u0163" +
    "\001\001\000\002\001\001\000\012\020\055\022\u0165\023" +
    "\052\024\050\001\001\000\002\001\001\000\022\003\u0167" +
    "\006\135\010\125\014\130\015\142\016\141\017\133\021" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\055\022\u016f\023\052" +
    "\024\050\001\001\000\002\001\001\000\022\003\u0171\006" +
    "\135\010\125\014\130\015\142\016\141\017\133\021\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\055\022\u0176\023\052" +
    "\024\050\001\001\000\002\001\001\000\004\011\u0178\001" +
    "\001\000\002\001\001\000\012\020\055\022\u0186\023\052" +
    "\024\050\001\001\000\004\026\u017b\001\001\000\002\001" +
    "\001\000\012\020\055\022\u017d\023\052\024\050\001\001" +
    "\000\002\001\001\000\022\003\u017f\006\135\010\125\014" +
    "\130\015\142\016\141\017\133\021\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\u0188\006\135\010\125\014" +
    "\130\015\142\016\141\017\133\021\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\055\022\u018d\023\052\024\050\001\001" +
    "\000\002\001\001\000\022\003\u018f\006\135\010\125\014" +
    "\130\015\142\016\141\017\133\021\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




// AST
    ArrayList errores = new ArrayList();
    public Nodo raiz;    
    public int cont = 0;
    String tipoActual = " ";
    int offsetActual = 0;
    ArrayList <String> identificadores = new ArrayList();
    String tipoPrincipal=" ";
    

public void syntax_error (Symbol s){
    errores.add("Esta es Linea: " + (s.left) + " y Columna: " + (s.right));
}
public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido, por favor revise la linea: " + (s.left + 1) + " y columna: " + (s.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 tipoPrincipal = tipoActual + " -> void"; tipoActual =" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS NT$0 TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  
  
                Nodo nodo = new Nodo(id.toString(),0, tipoPrincipal,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.setHijos(d.getHijos());
                parser.raiz = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  
                tipoActual = tipoActual + " -> void"; 
                d.setEtiqueta(tipoActual);
                Nodo nodo = new Nodo(id.toString(),parser.cont, tipoActual,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.addHijo(d);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_P ::= error TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"procedure\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_P ::= TK_PROCEDURE error PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROCEDURE_PRIME ::= LOOP PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROCEDURE_PRIME ::= FOR PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROCEDURE_PRIME ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = i.toString();
                    }
                    else 
                    {
                        tipoActual = tipoActual + " x " + i.toString();
                    }
                    RESULT = i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(tipoActual.equalsIgnoreCase(" "))
                    {

                        tipoActual = f.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + f.toString();
                    }
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = b.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + b.toString();
                    }
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_PARAMETROS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de parámetros permitidos son in, out e inout. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= error PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS_PRIME ::= error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS_PRIME ::= TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES ::= EP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES ::= EP TK_OR EP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES ::= EP TK_AND EP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EP ::= TK_ID TK_OPREL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EP ::= TK_ID TK_OPREL TK_TRUE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EP ::= TK_ID TK_OPREL TK_FALSE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EP ::= TK_DIGITOFLOAT TK_OPREL TK_ID 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONES ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Nodo nodo = new Nodo();
                   nodo.setHijos(id);
                   RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    node.setHijos(id);
                    for(int i=0; i<d.getHijos().size();i++){
                        node.addHijo(d.getHijos().get(i));
                    }
                    RESULT = node;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACIONES ::= FUNCTION DECLARACIONES 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    
                    Nodo node = new Nodo("FUNCION",parser.cont);
                    node.addHijo(f);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Nodo nodoActual = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACIONES ::= PROCEDURE_P NT$1 DECLARACIONES 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo hijos = d;
                    for(int i=0; i<hijos.getHijos().size();i++)
                    {
                          p.addHijo(hijos.getHijos().get(i));
                    }
                    RESULT = p;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$2 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 identificadores.add(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ID ::= TK_ID NT$2 TK_COMA ID 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ID ::= TK_ID error ID 
            {
              ArrayList<Nodo> RESULT =null;
		 errores.add("Se esperaba un \",\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ID ::= TK_ID TK_COLON TIPOS 
            {
              ArrayList<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("Variables",parser.cont);
            parser.cont++;
            identificadores.add(id.toString());
            for(int i =0; i<identificadores.size();i++)
            {
                nodo.getHijos().add(new Nodo(identificadores.get(i),parser.cont++,t.getEtiqueta(),offsetActual));
                parser.cont++;
            }
            identificadores.clear();
            RESULT = nodo.getHijos();

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ID ::= TK_ID error TIPOS 
            {
              ArrayList<Nodo> RESULT =null;
		 errores.add("Se esperaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOS ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= TK_BOOLEAN error TK_TRUE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= TK_BOOLEAN error TK_FALSE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= TK_BOOLEAN TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un true o false "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS ::= TK_INTEGER 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;         
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS ::= TK_INTEGER error TK_DIGITO 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS ::= TK_INTEGER TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS ::= TK_FLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOS ::= TK_FLOAT error TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOS ::= TK_FLOAT TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero decimal "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOS ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PUT ::= error TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"put o un if\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PUT ::= TK_PUT error TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PUT ::= TK_PUT TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba una cadena "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un en el put \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GET ::= error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"get\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // GET ::= TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // GET ::= TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // GET ::= TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int exitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object exit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo proc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(par);
                Nodo retorno = new Nodo("RETURN",parser.cont);
                parser.cont++;
                retorno.addHijo(new Nodo(tv.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(retorno);
                //nodo.addHijo(dec);
                nodo.addHijo(proc);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION ::= error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"function\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION ::= TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador, begin o return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"end\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FOR ::= TK_FOR TK_ID TK_IN TK_ID TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FOR ::= TK_FOR TK_DIGITO TK_IN TK_ID TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR ::= TK_FOR TK_ID TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FOR ::= error TK_ID TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"for\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR ::= TK_FOR error TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"numero o un identificador\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FOR ::= TK_FOR TK_ID TK_IN error TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"numero o un identificador\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FOR ::= TK_FOR TK_ID TK_IN TK_DIGITO error PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
