
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\013\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\002\000\002\005\011\000\002\006\011\000\002" +
    "\006\006\000\002\006\004\000\002\007\006\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\004\012\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\010\006" +
    "\000\002\011\005\000\002\011\003\000\002\014\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\014\005\000\002\014\003\000\002\014\005\000\002\015" +
    "\006\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\032\005\001\002\000\004\002\165\001" +
    "\002\000\004\011\006\001\002\000\004\033\007\001\002" +
    "\000\020\004\014\011\016\027\025\032\005\034\ufff8\043" +
    "\022\044\013\001\002\000\032\004\014\005\ufff8\006\ufff8" +
    "\011\016\016\ufff8\026\ufff8\027\025\032\005\034\ufff8\035" +
    "\ufff8\043\022\044\013\001\002\000\004\034\157\001\002" +
    "\000\032\004\014\005\ufff8\006\ufff8\011\016\016\ufff8\026" +
    "\ufff8\027\025\032\005\034\ufff8\035\ufff8\043\022\044\013" +
    "\001\002\000\004\007\153\001\002\000\004\007\130\001" +
    "\002\000\032\004\014\005\ufff8\006\ufff8\011\016\016\ufff8" +
    "\026\ufff8\027\025\032\005\034\ufff8\035\ufff8\043\022\044" +
    "\013\001\002\000\010\020\101\024\102\040\uffe0\001\002" +
    "\000\032\004\014\005\ufff8\006\ufff8\011\016\016\ufff8\026" +
    "\ufff8\027\025\032\005\034\ufff8\035\ufff8\043\022\044\013" +
    "\001\002\000\004\040\063\001\002\000\032\004\014\005" +
    "\ufff8\006\ufff8\011\016\016\ufff8\026\ufff8\027\025\032\005" +
    "\034\ufff8\035\ufff8\043\022\044\013\001\002\000\004\007" +
    "\057\001\002\000\032\004\014\005\ufff8\006\ufff8\011\016" +
    "\016\ufff8\026\ufff8\027\025\032\005\034\ufff8\035\ufff8\043" +
    "\022\044\013\001\002\000\032\004\014\005\ufff8\006\ufff8" +
    "\011\016\016\ufff8\026\ufff8\027\025\032\005\034\ufff8\035" +
    "\ufff8\043\022\044\013\001\002\000\004\007\026\001\002" +
    "\000\010\011\032\013\030\014\033\001\002\000\010\010" +
    "\uffea\041\052\042\051\001\002\000\004\012\047\001\002" +
    "\000\004\010\042\001\002\000\004\012\036\001\002\000" +
    "\004\012\034\001\002\000\004\011\035\001\002\000\010" +
    "\010\uffe3\041\uffe3\042\uffe3\001\002\000\010\011\040\013" +
    "\037\014\041\001\002\000\010\010\uffe6\041\uffe6\042\uffe6" +
    "\001\002\000\010\010\uffe7\041\uffe7\042\uffe7\001\002\000" +
    "\010\010\uffe5\041\uffe5\042\uffe5\001\002\000\004\025\043" +
    "\001\002\000\020\004\014\011\016\026\ufff8\027\025\032" +
    "\005\043\022\044\013\001\002\000\004\026\045\001\002" +
    "\000\004\017\046\001\002\000\032\004\uffeb\005\uffeb\006" +
    "\uffeb\011\uffeb\016\uffeb\026\uffeb\027\uffeb\032\uffeb\034\uffeb" +
    "\035\uffeb\043\uffeb\044\uffeb\001\002\000\004\011\050\001" +
    "\002\000\010\010\uffe4\041\uffe4\042\uffe4\001\002\000\010" +
    "\011\032\013\030\014\033\001\002\000\010\011\032\013" +
    "\030\014\033\001\002\000\004\010\uffe8\001\002\000\004" +
    "\010\uffe9\001\002\000\016\005\ufff9\006\ufff9\016\ufff9\026" +
    "\ufff9\034\ufff9\035\ufff9\001\002\000\016\005\ufffc\006\ufffc" +
    "\016\ufffc\026\ufffc\034\ufffc\035\ufffc\001\002\000\004\010" +
    "\060\001\002\000\004\017\061\001\002\000\032\004\uffd8" +
    "\005\uffd8\006\uffd8\011\uffd8\016\uffd8\026\uffd8\027\uffd8\032" +
    "\uffd8\034\uffd8\035\uffd8\043\uffd8\044\uffd8\001\002\000\016" +
    "\005\uffff\006\uffff\016\uffff\026\uffff\034\uffff\035\uffff\001" +
    "\002\000\010\021\065\022\064\023\067\001\002\000\006" +
    "\017\uffdf\020\075\001\002\000\006\017\uffdc\020\073\001" +
    "\002\000\004\017\072\001\002\000\006\017\uffda\020\070" +
    "\001\002\000\004\045\071\001\002\000\004\017\uffd9\001" +
    "\002\000\032\004\uffe2\005\uffe2\006\uffe2\011\uffe2\016\uffe2" +
    "\026\uffe2\027\uffe2\032\uffe2\034\uffe2\035\uffe2\043\uffe2\044" +
    "\uffe2\001\002\000\004\013\074\001\002\000\004\017\uffdb" +
    "\001\002\000\006\036\076\037\077\001\002\000\004\017" +
    "\uffdd\001\002\000\004\017\uffde\001\002\000\016\005\ufffe" +
    "\006\ufffe\016\ufffe\026\ufffe\034\ufffe\035\ufffe\001\002\000" +
    "\012\011\110\013\106\036\105\037\107\001\002\000\004" +
    "\011\104\001\002\000\004\040\uffe1\001\002\000\006\024" +
    "\102\040\uffe0\001\002\000\004\017\126\001\002\000\004" +
    "\017\125\001\002\000\004\017\124\001\002\000\010\017" +
    "\113\030\111\031\112\001\002\000\006\011\121\013\120" +
    "\001\002\000\006\011\115\013\114\001\002\000\032\004" +
    "\ufff3\005\ufff3\006\ufff3\011\ufff3\016\ufff3\026\ufff3\027\ufff3" +
    "\032\ufff3\034\ufff3\035\ufff3\043\ufff3\044\ufff3\001\002\000" +
    "\004\017\117\001\002\000\004\017\116\001\002\000\032" +
    "\004\ufff0\005\ufff0\006\ufff0\011\ufff0\016\ufff0\026\ufff0\027" +
    "\ufff0\032\ufff0\034\ufff0\035\ufff0\043\ufff0\044\ufff0\001\002" +
    "\000\032\004\uffef\005\uffef\006\uffef\011\uffef\016\uffef\026" +
    "\uffef\027\uffef\032\uffef\034\uffef\035\uffef\043\uffef\044\uffef" +
    "\001\002\000\004\017\123\001\002\000\004\017\122\001" +
    "\002\000\032\004\ufff2\005\ufff2\006\ufff2\011\ufff2\016\ufff2" +
    "\026\ufff2\027\ufff2\032\ufff2\034\ufff2\035\ufff2\043\ufff2\044" +
    "\ufff2\001\002\000\032\004\ufff1\005\ufff1\006\ufff1\011\ufff1" +
    "\016\ufff1\026\ufff1\027\ufff1\032\ufff1\034\ufff1\035\ufff1\043" +
    "\ufff1\044\ufff1\001\002\000\032\004\uffec\005\uffec\006\uffec" +
    "\011\uffec\016\uffec\026\uffec\027\uffec\032\uffec\034\uffec\035" +
    "\uffec\043\uffec\044\uffec\001\002\000\032\004\uffee\005\uffee" +
    "\006\uffee\011\uffee\016\uffee\026\uffee\027\uffee\032\uffee\034" +
    "\uffee\035\uffee\043\uffee\044\uffee\001\002\000\032\004\uffed" +
    "\005\uffed\006\uffed\011\uffed\016\uffed\026\uffed\027\uffed\032" +
    "\uffed\034\uffed\035\uffed\043\uffed\044\uffed\001\002\000\016" +
    "\005\ufffb\006\ufffb\016\ufffb\026\ufffb\034\ufffb\035\ufffb\001" +
    "\002\000\010\011\032\013\030\014\033\001\002\000\004" +
    "\010\132\001\002\000\004\015\133\001\002\000\024\004" +
    "\014\005\ufff8\006\ufff8\011\016\016\ufff8\027\025\032\005" +
    "\043\022\044\013\001\002\000\010\005\140\006\135\016" +
    "\137\001\002\000\004\007\145\001\002\000\032\004\ufff7" +
    "\005\ufff7\006\ufff7\011\ufff7\016\ufff7\026\ufff7\027\ufff7\032" +
    "\ufff7\034\ufff7\035\ufff7\043\ufff7\044\ufff7\001\002\000\004" +
    "\017\144\001\002\000\020\004\014\011\016\016\ufff8\027" +
    "\025\032\005\043\022\044\013\001\002\000\004\016\142" +
    "\001\002\000\004\017\143\001\002\000\032\004\ufff5\005" +
    "\ufff5\006\ufff5\011\ufff5\016\ufff5\026\ufff5\027\ufff5\032\ufff5" +
    "\034\ufff5\035\ufff5\043\ufff5\044\ufff5\001\002\000\032\004" +
    "\ufff4\005\ufff4\006\ufff4\011\ufff4\016\ufff4\026\ufff4\027\ufff4" +
    "\032\ufff4\034\ufff4\035\ufff4\043\ufff4\044\ufff4\001\002\000" +
    "\010\011\032\013\030\014\033\001\002\000\004\010\147" +
    "\001\002\000\004\015\150\001\002\000\024\004\014\005" +
    "\ufff8\006\ufff8\011\016\016\ufff8\027\025\032\005\043\022" +
    "\044\013\001\002\000\010\005\140\006\135\016\137\001" +
    "\002\000\032\004\ufff6\005\ufff6\006\ufff6\011\ufff6\016\ufff6" +
    "\026\ufff6\027\ufff6\032\ufff6\034\ufff6\035\ufff6\043\ufff6\044" +
    "\ufff6\001\002\000\004\010\154\001\002\000\004\017\155" +
    "\001\002\000\032\004\uffd7\005\uffd7\006\uffd7\011\uffd7\016" +
    "\uffd7\026\uffd7\027\uffd7\032\uffd7\034\uffd7\035\uffd7\043\uffd7" +
    "\044\uffd7\001\002\000\016\005\ufffa\006\ufffa\016\ufffa\026" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\020\004\014\011\016" +
    "\027\025\032\005\035\ufff8\043\022\044\013\001\002\000" +
    "\004\035\161\001\002\000\004\011\162\001\002\000\004" +
    "\017\163\001\002\000\034\002\000\004\000\005\000\006" +
    "\000\011\000\016\000\026\000\027\000\032\000\034\000" +
    "\035\000\043\000\044\000\001\002\000\016\005\ufffd\006" +
    "\ufffd\016\ufffd\026\ufffd\034\ufffd\035\ufffd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\014\003\010" +
    "\004\007\005\020\007\022\010\016\011\017\015\011\016" +
    "\023\001\001\000\024\002\014\003\163\004\007\005\020" +
    "\007\022\010\016\011\017\015\011\016\023\001\001\000" +
    "\002\001\001\000\024\002\014\003\155\004\007\005\020" +
    "\007\022\010\016\011\017\015\011\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\014\003\126" +
    "\004\007\005\020\007\022\010\016\011\017\015\011\016" +
    "\023\001\001\000\002\001\001\000\024\002\014\003\077" +
    "\004\007\005\020\007\022\010\016\011\017\015\011\016" +
    "\023\001\001\000\002\001\001\000\024\002\014\003\061" +
    "\004\007\005\020\007\022\010\016\011\017\015\011\016" +
    "\023\001\001\000\002\001\001\000\024\002\014\003\055" +
    "\004\007\005\020\007\022\010\016\011\017\015\011\016" +
    "\023\001\001\000\024\002\014\003\054\004\007\005\020" +
    "\007\022\010\016\011\017\015\011\016\023\001\001\000" +
    "\002\001\001\000\006\012\030\013\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\014\003\043" +
    "\004\007\005\020\007\022\010\016\011\017\015\011\016" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\053\001\001\000\004\013\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\130\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\014\003\133\004\007\005\020\007\022" +
    "\010\016\011\017\015\011\016\023\001\001\000\004\006" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\014\003\140\004\007\005\020\007" +
    "\022\010\016\011\017\015\011\016\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\145\013\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\014\003\150\004\007\005" +
    "\020\007\022\010\016\011\017\015\011\016\023\001\001" +
    "\000\004\006\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\014\003\157\004\007\005\020\007\022\010" +
    "\016\011\017\015\011\016\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   ArrayList erroresSintacticos = new ArrayList();

public void syntax_error (Symbol s){
    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID TK_IS PROCEDURE_PRIME TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_PRIME ::= DECLARACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_PRIME ::= PROCEDURE PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESIONES ::= EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESIONES ::= EP TK_OR EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESIONES ::= EP TK_AND EP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EP ::= TK_ID TK_OPREL TK_LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EP ::= TK_LETRA TK_OPREL TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONES ::= ID TK_COLON TIPOS TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ID ::= TK_ID TK_COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ID ::= TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOS ::= TK_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOS ::= TK_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOS ::= TK_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PUT ::= TK_PUT TK_PARENTESISI TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // GET ::= TK_GET TK_PARENTESISI TK_PARENTESISD TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
