
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\014\000\002\002" +
    "\014\000\002\002\014\000\002\002\014\000\002\002\014" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\002\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\011\004\000\002" +
    "\011\004\000\002\012\010\000\002\012\007\000\002\012" +
    "\010\000\002\012\010\000\002\006\011\000\002\007\011" +
    "\000\002\007\006\000\002\007\004\000\002\020\006\000" +
    "\002\020\010\000\002\020\010\000\002\020\010\000\002" +
    "\020\010\000\002\020\010\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\010\012\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\013" +
    "\003\000\002\013\005\000\002\013\002\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\017\007\000\002\017\007" +
    "\000\002\017\007\000\002\017\007\000\002\017\007\000" +
    "\002\017\007\000\002\021\016\000\002\021\016\000\002" +
    "\021\016\000\002\021\016\000\002\021\016\000\002\021" +
    "\016\000\002\021\016\000\002\021\016\000\002\021\016" +
    "\000\002\022\021\000\002\022\021\000\002\022\021\000" +
    "\002\022\021\000\002\022\021\000\002\022\021\000\002" +
    "\022\021\000\002\022\021\000\002\023\012\000\002\023" +
    "\012\000\002\023\012\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\023\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0187\000\006\003\005\025\006\001\002\000\004\002" +
    "\u0189\001\002\000\004\020\u0187\001\002\000\006\003\007" +
    "\020\010\001\002\000\006\003\011\044\013\001\002\000" +
    "\006\003\011\044\013\001\002\000\006\003\014\020\016" +
    "\001\002\000\004\026\047\001\002\000\006\003\014\020" +
    "\016\001\002\000\004\052\042\001\002\000\006\026\uffe9" +
    "\042\uffe9\001\002\000\006\003\017\052\020\001\002\000" +
    "\012\003\022\034\025\035\024\036\023\001\002\000\012" +
    "\003\022\034\025\035\024\036\023\001\002\000\012\003" +
    "\030\005\027\006\026\007\031\001\002\000\012\003\uffea" +
    "\005\uffea\006\uffea\007\uffea\001\002\000\012\003\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\001\002\000\012\003\uffec\005\uffec" +
    "\006\uffec\007\uffec\001\002\000\012\003\uffed\005\uffed\006" +
    "\uffed\007\uffed\001\002\000\010\026\uffef\045\uffef\046\uffef" +
    "\001\002\000\010\026\ufff1\045\ufff1\046\ufff1\001\002\000" +
    "\010\026\uffee\045\uffee\046\uffee\001\002\000\010\026\ufff0" +
    "\045\ufff0\046\ufff0\001\002\000\006\045\033\046\034\001" +
    "\002\000\006\026\uffe6\042\uffe6\001\002\000\006\003\014" +
    "\020\016\001\002\000\006\026\uffe7\042\uffe7\001\002\000" +
    "\012\003\030\005\027\006\026\007\031\001\002\000\004" +
    "\046\040\001\002\000\006\003\014\020\016\001\002\000" +
    "\006\026\uffe4\042\uffe4\001\002\000\012\003\022\034\025" +
    "\035\024\036\023\001\002\000\012\003\030\005\027\006" +
    "\026\007\031\001\002\000\004\046\045\001\002\000\006" +
    "\003\014\020\016\001\002\000\006\026\uffe5\042\uffe5\001" +
    "\002\000\006\020\052\027\uffc9\001\002\000\006\027\uffcb" +
    "\046\u017c\001\002\000\004\027\107\001\002\000\010\003" +
    "\053\047\055\052\054\001\002\000\014\003\060\005\061" +
    "\006\057\007\063\020\052\001\002\000\012\003\060\005" +
    "\061\006\057\007\063\001\002\000\004\020\052\001\002" +
    "\000\006\027\uffc8\046\uffc8\001\002\000\012\003\077\004" +
    "\076\027\uffc4\046\uffc4\001\002\000\006\027\uffb6\046\uffb6" +
    "\001\002\000\012\003\071\004\072\027\uffbe\046\uffbe\001" +
    "\002\000\006\027\uffc6\046\uffc6\001\002\000\012\003\065" +
    "\004\064\027\uffba\046\uffba\001\002\000\006\003\067\033" +
    "\070\001\002\000\004\033\066\001\002\000\006\027\uffb8" +
    "\046\uffb8\001\002\000\006\027\uffb7\046\uffb7\001\002\000" +
    "\006\027\uffb9\046\uffb9\001\002\000\004\022\075\001\002" +
    "\000\006\003\073\022\074\001\002\000\006\027\uffbb\046" +
    "\uffbb\001\002\000\006\027\uffbd\046\uffbd\001\002\000\006" +
    "\027\uffbc\046\uffbc\001\002\000\010\003\103\050\102\051" +
    "\104\001\002\000\006\050\100\051\101\001\002\000\006" +
    "\027\uffc1\046\uffc1\001\002\000\006\027\uffc0\046\uffc0\001" +
    "\002\000\006\027\uffc2\046\uffc2\001\002\000\006\027\uffbf" +
    "\046\uffbf\001\002\000\006\027\uffc3\046\uffc3\001\002\000" +
    "\006\027\uffc7\046\uffc7\001\002\000\006\027\uffc5\046\uffc5" +
    "\001\002\000\026\003\124\010\126\015\115\020\127\025" +
    "\006\030\ufff2\031\131\032\121\041\122\055\117\001\002" +
    "\000\040\003\124\010\126\011\ufff2\012\ufff2\014\ufff2\015" +
    "\115\020\127\024\ufff2\025\006\030\ufff2\031\131\032\121" +
    "\041\122\042\ufff2\055\117\001\002\000\040\003\124\010" +
    "\126\011\ufff2\012\ufff2\014\ufff2\015\115\020\127\024\ufff2" +
    "\025\006\030\ufff2\031\131\032\121\041\122\042\ufff2\055" +
    "\117\001\002\000\040\003\124\010\126\011\ufff2\012\ufff2" +
    "\014\ufff2\015\115\020\127\024\ufff2\025\006\030\ufff2\031" +
    "\131\032\121\041\122\042\ufff2\055\117\001\002\000\040" +
    "\003\124\010\126\011\ufff2\012\ufff2\014\ufff2\015\115\020" +
    "\127\024\ufff2\025\006\030\ufff2\031\131\032\121\041\122" +
    "\042\ufff2\055\117\001\002\000\040\003\124\010\126\011" +
    "\ufff2\012\ufff2\014\ufff2\015\115\020\127\024\ufff2\025\006" +
    "\030\ufff2\031\131\032\121\041\122\042\ufff2\055\117\001" +
    "\002\000\004\044\u0170\001\002\000\040\003\124\010\126" +
    "\011\ufff2\012\ufff2\014\ufff2\015\115\020\127\024\ufff2\025" +
    "\006\030\ufff2\031\131\032\121\041\122\042\ufff2\055\117" +
    "\001\002\000\010\003\u014c\020\u014e\022\u014d\001\002\000" +
    "\040\003\124\010\126\011\ufff2\012\ufff2\014\ufff2\015\115" +
    "\020\127\024\ufff2\025\006\030\ufff2\031\131\032\121\041" +
    "\122\042\ufff2\055\117\001\002\000\006\003\u013d\044\u013e" +
    "\001\002\000\006\003\u0112\020\u0113\001\002\000\004\030" +
    "\u010c\001\002\000\010\020\341\044\340\052\337\001\002" +
    "\000\040\003\124\010\126\011\ufff2\012\ufff2\014\ufff2\015" +
    "\115\020\127\024\ufff2\025\006\030\ufff2\031\131\032\121" +
    "\041\122\042\ufff2\055\117\001\002\000\004\044\313\001" +
    "\002\000\010\003\151\004\152\052\153\001\002\000\040" +
    "\003\124\010\126\011\ufff2\012\ufff2\014\ufff2\015\115\020" +
    "\127\024\ufff2\025\006\030\ufff2\031\131\032\121\041\122" +
    "\042\ufff2\055\117\001\002\000\006\003\132\044\133\001" +
    "\002\000\004\043\145\001\002\000\006\003\134\043\135" +
    "\001\002\000\004\045\143\001\002\000\006\003\136\045" +
    "\137\001\002\000\004\046\142\001\002\000\006\003\140" +
    "\046\141\001\002\000\040\003\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\020\uffb0\024\uffb0\025\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\041\uffb0\042\uffb0\055\uffb0\001\002\000" +
    "\040\003\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5" +
    "\020\uffb5\024\uffb5\025\uffb5\030\uffb5\031\uffb5\032\uffb5\041" +
    "\uffb5\042\uffb5\055\uffb5\001\002\000\040\003\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\015\uffb1\020\uffb1\024\uffb1\025" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\041\uffb1\042\uffb1\055\uffb1" +
    "\001\002\000\004\046\144\001\002\000\040\003\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2\020\uffb2\024\uffb2" +
    "\025\uffb2\030\uffb2\031\uffb2\032\uffb2\041\uffb2\042\uffb2\055" +
    "\uffb2\001\002\000\004\045\146\001\002\000\004\046\147" +
    "\001\002\000\040\003\uffb3\010\uffb3\011\uffb3\012\uffb3\014" +
    "\uffb3\015\uffb3\020\uffb3\024\uffb3\025\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\041\uffb3\042\uffb3\055\uffb3\001\002\000\016\011" +
    "\ufff6\012\ufff6\014\ufff6\024\ufff6\030\ufff6\042\ufff6\001\002" +
    "\000\004\013\301\001\002\000\012\020\260\022\256\050" +
    "\255\051\257\001\002\000\006\003\155\013\154\001\002" +
    "\000\006\003\211\037\212\001\002\000\004\037\156\001" +
    "\002\000\004\020\157\001\002\000\004\040\160\001\002" +
    "\000\010\020\164\022\163\033\162\001\002\000\012\045" +
    "\uffd5\046\uffd5\053\206\054\205\001\002\000\004\021\203" +
    "\001\002\000\004\021\201\001\002\000\004\021\173\001" +
    "\002\000\004\046\166\001\002\000\026\003\124\010\126" +
    "\014\ufff2\015\115\020\127\025\006\031\131\032\121\041" +
    "\122\055\117\001\002\000\004\014\170\001\002\000\004" +
    "\020\171\001\002\000\004\046\172\001\002\000\040\003" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\014\uffa6\015\uffa6\020\uffa6" +
    "\024\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\041\uffa6\042" +
    "\uffa6\055\uffa6\001\002\000\014\020\200\022\176\033\175" +
    "\050\174\051\177\001\002\000\012\045\uffcf\046\uffcf\053" +
    "\uffcf\054\uffcf\001\002\000\012\045\uffd0\046\uffd0\053\uffd0" +
    "\054\uffd0\001\002\000\012\045\uffd1\046\uffd1\053\uffd1\054" +
    "\uffd1\001\002\000\012\045\uffce\046\uffce\053\uffce\054\uffce" +
    "\001\002\000\012\045\uffd2\046\uffd2\053\uffd2\054\uffd2\001" +
    "\002\000\004\020\202\001\002\000\012\045\uffcd\046\uffcd" +
    "\053\uffcd\054\uffcd\001\002\000\004\020\204\001\002\000" +
    "\012\045\uffcc\046\uffcc\053\uffcc\054\uffcc\001\002\000\010" +
    "\020\164\022\163\033\162\001\002\000\010\020\164\022" +
    "\163\033\162\001\002\000\006\045\uffd3\046\uffd3\001\002" +
    "\000\006\045\uffd4\046\uffd4\001\002\000\004\020\245\001" +
    "\002\000\006\003\213\020\214\001\002\000\004\040\236" +
    "\001\002\000\006\003\216\040\215\001\002\000\010\020" +
    "\164\022\163\033\162\001\002\000\010\020\164\022\163" +
    "\033\162\001\002\000\004\046\220\001\002\000\026\003" +
    "\124\010\126\014\ufff2\015\115\020\127\025\006\031\131" +
    "\032\121\041\122\055\117\001\002\000\004\014\222\001" +
    "\002\000\004\020\223\001\002\000\004\046\224\001\002" +
    "\000\040\003\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\015" +
    "\uffa3\020\uffa3\024\uffa3\025\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\041\uffa3\042\uffa3\055\uffa3\001\002\000\004\046\226\001" +
    "\002\000\026\003\124\010\126\014\ufff2\015\115\020\127" +
    "\025\006\031\131\032\121\041\122\055\117\001\002\000" +
    "\004\014\230\001\002\000\006\003\231\020\232\001\002" +
    "\000\004\046\235\001\002\000\006\003\233\046\234\001" +
    "\002\000\040\003\uffa1\010\uffa1\011\uffa1\012\uffa1\014\uffa1" +
    "\015\uffa1\020\uffa1\024\uffa1\025\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\041\uffa1\042\uffa1\055\uffa1\001\002\000\040\003\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\020\uffa9\024" +
    "\uffa9\025\uffa9\030\uffa9\031\uffa9\032\uffa9\041\uffa9\042\uffa9" +
    "\055\uffa9\001\002\000\040\003\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\014\uffa2\015\uffa2\020\uffa2\024\uffa2\025\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\041\uffa2\042\uffa2\055\uffa2\001\002\000" +
    "\010\020\164\022\163\033\162\001\002\000\004\046\240" +
    "\001\002\000\026\003\124\010\126\014\ufff2\015\115\020" +
    "\127\025\006\031\131\032\121\041\122\055\117\001\002" +
    "\000\004\014\242\001\002\000\004\020\243\001\002\000" +
    "\004\046\244\001\002\000\040\003\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\014\uffa4\015\uffa4\020\uffa4\024\uffa4\025\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\041\uffa4\042\uffa4\055\uffa4\001\002" +
    "\000\004\040\246\001\002\000\010\020\164\022\163\033" +
    "\162\001\002\000\004\046\250\001\002\000\026\003\124" +
    "\010\126\014\ufff2\015\115\020\127\025\006\031\131\032" +
    "\121\041\122\055\117\001\002\000\004\014\252\001\002" +
    "\000\004\020\253\001\002\000\004\046\254\001\002\000" +
    "\040\003\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\020\uffa5\024\uffa5\025\uffa5\030\uffa5\031\uffa5\032\uffa5\041" +
    "\uffa5\042\uffa5\055\uffa5\001\002\000\004\046\300\001\002" +
    "\000\004\046\277\001\002\000\004\046\276\001\002\000" +
    "\010\016\261\017\262\046\263\001\002\000\010\020\272" +
    "\022\271\033\270\001\002\000\006\020\265\022\264\001" +
    "\002\000\040\003\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf" +
    "\015\uffdf\020\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\041\uffdf\042\uffdf\055\uffdf\001\002\000\004\046\267" +
    "\001\002\000\004\046\266\001\002\000\040\003\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\020\uffdb\024\uffdb" +
    "\025\uffdb\030\uffdb\031\uffdb\032\uffdb\041\uffdb\042\uffdb\055" +
    "\uffdb\001\002\000\040\003\uffda\010\uffda\011\uffda\012\uffda" +
    "\014\uffda\015\uffda\020\uffda\024\uffda\025\uffda\030\uffda\031" +
    "\uffda\032\uffda\041\uffda\042\uffda\055\uffda\001\002\000\004" +
    "\046\275\001\002\000\004\046\274\001\002\000\004\046" +
    "\273\001\002\000\040\003\uffde\010\uffde\011\uffde\012\uffde" +
    "\014\uffde\015\uffde\020\uffde\024\uffde\025\uffde\030\uffde\031" +
    "\uffde\032\uffde\041\uffde\042\uffde\055\uffde\001\002\000\040" +
    "\003\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\020" +
    "\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\041\uffdd" +
    "\042\uffdd\055\uffdd\001\002\000\040\003\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\014\uffdc\015\uffdc\020\uffdc\024\uffdc\025\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\041\uffdc\042\uffdc\055\uffdc\001" +
    "\002\000\040\003\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\024\uffd7\025\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\041\uffd7\042\uffd7\055\uffd7\001\002\000\040\003\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\020\uffd9\024" +
    "\uffd9\025\uffd9\030\uffd9\031\uffd9\032\uffd9\041\uffd9\042\uffd9" +
    "\055\uffd9\001\002\000\040\003\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\014\uffd8\015\uffd8\020\uffd8\024\uffd8\025\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\041\uffd8\042\uffd8\055\uffd8\001\002\000" +
    "\004\037\302\001\002\000\004\020\303\001\002\000\004" +
    "\040\304\001\002\000\010\020\164\022\163\033\162\001" +
    "\002\000\004\046\306\001\002\000\026\003\124\010\126" +
    "\014\ufff2\015\115\020\127\025\006\031\131\032\121\041" +
    "\122\055\117\001\002\000\004\014\310\001\002\000\004" +
    "\020\311\001\002\000\004\046\312\001\002\000\040\003" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\020\uffa7" +
    "\024\uffa7\025\uffa7\030\uffa7\031\uffa7\032\uffa7\041\uffa7\042" +
    "\uffa7\055\uffa7\001\002\000\010\020\164\022\163\033\162" +
    "\001\002\000\004\045\315\001\002\000\004\023\316\001" +
    "\002\000\032\003\124\010\126\011\ufff2\012\ufff2\015\115" +
    "\020\127\024\ufff2\025\006\031\131\032\121\041\122\055" +
    "\117\001\002\000\010\011\323\012\320\024\321\001\002" +
    "\000\004\044\330\001\002\000\004\046\327\001\002\000" +
    "\040\003\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\020\uffe3\024\uffe3\025\uffe3\030\uffe3\031\uffe3\032\uffe3\041" +
    "\uffe3\042\uffe3\055\uffe3\001\002\000\026\003\124\010\126" +
    "\015\115\020\127\024\ufff2\025\006\031\131\032\121\041" +
    "\122\055\117\001\002\000\004\024\325\001\002\000\004" +
    "\046\326\001\002\000\040\003\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\020\uffe1\024\uffe1\025\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\041\uffe1\042\uffe1\055\uffe1\001\002\000" +
    "\040\003\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\020\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0\032\uffe0\041" +
    "\uffe0\042\uffe0\055\uffe0\001\002\000\010\020\164\022\163" +
    "\033\162\001\002\000\004\045\332\001\002\000\004\023" +
    "\333\001\002\000\032\003\124\010\126\011\ufff2\012\ufff2" +
    "\015\115\020\127\024\ufff2\025\006\031\131\032\121\041" +
    "\122\055\117\001\002\000\010\011\323\012\320\024\321" +
    "\001\002\000\040\003\uffe2\010\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\020\uffe2\024\uffe2\025\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\041\uffe2\042\uffe2\055\uffe2\001\002\000\016\011" +
    "\ufff3\012\ufff3\014\ufff3\024\ufff3\030\ufff3\042\ufff3\001\002" +
    "\000\004\013\u0102\001\002\000\006\020\375\043\374\001" +
    "\002\000\010\003\011\034\343\044\013\001\002\000\006" +
    "\026\351\042\352\001\002\000\004\022\344\001\002\000" +
    "\004\013\345\001\002\000\026\003\124\010\126\014\ufff2" +
    "\015\115\020\127\025\006\031\131\032\121\041\122\055" +
    "\117\001\002\000\004\014\347\001\002\000\004\046\350" +
    "\001\002\000\040\003\uff95\010\uff95\011\uff95\012\uff95\014" +
    "\uff95\015\uff95\020\uff95\024\uff95\025\uff95\030\uff95\031\uff95" +
    "\032\uff95\041\uff95\042\uff95\055\uff95\001\002\000\006\020" +
    "\052\027\uffc9\001\002\000\012\003\030\005\027\006\026" +
    "\007\031\001\002\000\004\026\354\001\002\000\006\020" +
    "\052\027\uffc9\001\002\000\004\027\356\001\002\000\026" +
    "\003\124\010\126\015\115\020\127\025\006\031\131\032" +
    "\121\041\122\042\ufff2\055\117\001\002\000\004\042\360" +
    "\001\002\000\004\020\361\001\002\000\004\046\362\001" +
    "\002\000\004\030\363\001\002\000\004\020\364\001\002" +
    "\000\004\046\365\001\002\000\040\003\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\014\uff9f\015\uff9f\020\uff9f\024\uff9f\025\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\041\uff9f\042\uff9f\055\uff9f\001" +
    "\002\000\004\027\367\001\002\000\026\003\124\010\126" +
    "\015\115\020\127\025\006\030\ufff2\031\131\032\121\041" +
    "\122\055\117\001\002\000\004\030\371\001\002\000\004" +
    "\020\372\001\002\000\004\046\373\001\002\000\042\002" +
    "\uffff\003\uffff\010\uffff\011\uffff\012\uffff\014\uffff\015\uffff" +
    "\020\uffff\024\uffff\025\uffff\030\uffff\031\uffff\032\uffff\041" +
    "\uffff\042\uffff\055\uffff\001\002\000\004\045\u0100\001\002" +
    "\000\004\045\376\001\002\000\004\046\377\001\002\000" +
    "\040\003\uffae\010\uffae\011\uffae\012\uffae\014\uffae\015\uffae" +
    "\020\uffae\024\uffae\025\uffae\030\uffae\031\uffae\032\uffae\041" +
    "\uffae\042\uffae\055\uffae\001\002\000\004\046\u0101\001\002" +
    "\000\040\003\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015" +
    "\uffb4\020\uffb4\024\uffb4\025\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\041\uffb4\042\uffb4\055\uffb4\001\002\000\004\037\u0103\001" +
    "\002\000\004\020\u0104\001\002\000\004\040\u0105\001\002" +
    "\000\010\020\164\022\163\033\162\001\002\000\004\046" +
    "\u0107\001\002\000\026\003\124\010\126\014\ufff2\015\115" +
    "\020\127\025\006\031\131\032\121\041\122\055\117\001" +
    "\002\000\004\014\u0109\001\002\000\004\020\u010a\001\002" +
    "\000\004\046\u010b\001\002\000\040\003\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\014\uffa8\015\uffa8\020\uffa8\024\uffa8\025\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\041\uffa8\042\uffa8\055\uffa8\001" +
    "\002\000\006\003\u010d\020\u010e\001\002\000\004\046\u0111" +
    "\001\002\000\006\003\u010f\046\u0110\001\002\000\042\002" +
    "\ufffc\003\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015\ufffc" +
    "\020\ufffc\024\ufffc\025\ufffc\030\ufffc\031\ufffc\032\ufffc\041" +
    "\ufffc\042\ufffc\055\ufffc\001\002\000\042\002\000\003\000" +
    "\010\000\011\000\012\000\014\000\015\000\020\000\024" +
    "\000\025\000\030\000\031\000\032\000\041\000\042\000" +
    "\055\000\001\002\000\042\002\ufffd\003\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\014\ufffd\015\ufffd\020\ufffd\024\ufffd\025\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\041\ufffd\042\ufffd\055\ufffd\001" +
    "\002\000\006\003\011\044\013\001\002\000\006\003\011" +
    "\044\013\001\002\000\004\042\u0115\001\002\000\012\003" +
    "\030\005\027\006\026\007\031\001\002\000\004\026\u0117" +
    "\001\002\000\006\020\052\027\uffc9\001\002\000\004\027" +
    "\u0119\001\002\000\026\003\124\010\126\015\115\020\127" +
    "\025\006\031\131\032\121\041\122\042\ufff2\055\117\001" +
    "\002\000\004\042\u011b\001\002\000\006\003\u011c\020\u011d" +
    "\001\002\000\004\046\u012c\001\002\000\006\003\u011e\046" +
    "\u011f\001\002\000\004\030\u0129\001\002\000\006\003\u0120" +
    "\030\u0121\001\002\000\004\020\u0127\001\002\000\006\003" +
    "\u0122\020\u0123\001\002\000\004\046\u0126\001\002\000\006" +
    "\003\u0124\046\u0125\001\002\000\040\003\uff99\010\uff99\011" +
    "\uff99\012\uff99\014\uff99\015\uff99\020\uff99\024\uff99\025\uff99" +
    "\030\uff99\031\uff99\032\uff99\041\uff99\042\uff99\055\uff99\001" +
    "\002\000\040\003\uffa0\010\uffa0\011\uffa0\012\uffa0\014\uffa0" +
    "\015\uffa0\020\uffa0\024\uffa0\025\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\041\uffa0\042\uffa0\055\uffa0\001\002\000\040\003\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\014\uff9a\015\uff9a\020\uff9a\024" +
    "\uff9a\025\uff9a\030\uff9a\031\uff9a\032\uff9a\041\uff9a\042\uff9a" +
    "\055\uff9a\001\002\000\004\046\u0128\001\002\000\040\003" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b\020\uff9b" +
    "\024\uff9b\025\uff9b\030\uff9b\031\uff9b\032\uff9b\041\uff9b\042" +
    "\uff9b\055\uff9b\001\002\000\004\020\u012a\001\002\000\004" +
    "\046\u012b\001\002\000\040\003\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\015\uff9c\020\uff9c\024\uff9c\025\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\041\uff9c\042\uff9c\055\uff9c\001\002\000" +
    "\004\030\u012d\001\002\000\004\020\u012e\001\002\000\004" +
    "\046\u012f\001\002\000\040\003\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\014\uff9d\015\uff9d\020\uff9d\024\uff9d\025\uff9d\030\uff9d" +
    "\031\uff9d\032\uff9d\041\uff9d\042\uff9d\055\uff9d\001\002\000" +
    "\004\042\u0131\001\002\000\012\003\030\005\027\006\026" +
    "\007\031\001\002\000\004\026\u0133\001\002\000\006\020" +
    "\052\027\uffc9\001\002\000\004\027\u0135\001\002\000\026" +
    "\003\124\010\126\015\115\020\127\025\006\031\131\032" +
    "\121\041\122\042\ufff2\055\117\001\002\000\004\042\u0137" +
    "\001\002\000\004\020\u0138\001\002\000\004\046\u0139\001" +
    "\002\000\004\030\u013a\001\002\000\004\020\u013b\001\002" +
    "\000\004\046\u013c\001\002\000\040\003\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\014\uff9e\015\uff9e\020\uff9e\024\uff9e\025\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\041\uff9e\042\uff9e\055\uff9e\001" +
    "\002\000\004\020\u0148\001\002\000\006\003\u013f\020\u0140" +
    "\001\002\000\004\045\u0146\001\002\000\006\003\u0141\045" +
    "\u0142\001\002\000\004\046\u0145\001\002\000\006\003\u0143" +
    "\046\u0144\001\002\000\040\003\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\014\uffaa\015\uffaa\020\uffaa\024\uffaa\025\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\041\uffaa\042\uffaa\055\uffaa\001\002\000" +
    "\040\003\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf" +
    "\020\uffaf\024\uffaf\025\uffaf\030\uffaf\031\uffaf\032\uffaf\041" +
    "\uffaf\042\uffaf\055\uffaf\001\002\000\040\003\uffab\010\uffab" +
    "\011\uffab\012\uffab\014\uffab\015\uffab\020\uffab\024\uffab\025" +
    "\uffab\030\uffab\031\uffab\032\uffab\041\uffab\042\uffab\055\uffab" +
    "\001\002\000\004\046\u0147\001\002\000\040\003\uffac\010" +
    "\uffac\011\uffac\012\uffac\014\uffac\015\uffac\020\uffac\024\uffac" +
    "\025\uffac\030\uffac\031\uffac\032\uffac\041\uffac\042\uffac\055" +
    "\uffac\001\002\000\004\045\u0149\001\002\000\004\046\u014a" +
    "\001\002\000\040\003\uffad\010\uffad\011\uffad\012\uffad\014" +
    "\uffad\015\uffad\020\uffad\024\uffad\025\uffad\030\uffad\031\uffad" +
    "\032\uffad\041\uffad\042\uffad\055\uffad\001\002\000\016\011" +
    "\ufff9\012\ufff9\014\ufff9\024\ufff9\030\ufff9\042\ufff9\001\002" +
    "\000\004\034\u0169\001\002\000\004\034\u0163\001\002\000" +
    "\004\034\u014f\001\002\000\010\003\u0150\020\u0152\022\u0151" +
    "\001\002\000\004\013\u015f\001\002\000\006\003\u0158\013" +
    "\u0157\001\002\000\004\013\u0153\001\002\000\026\003\124" +
    "\010\126\014\ufff2\015\115\020\127\025\006\031\131\032" +
    "\121\041\122\055\117\001\002\000\004\014\u0155\001\002" +
    "\000\004\046\u0156\001\002\000\040\003\uff98\010\uff98\011" +
    "\uff98\012\uff98\014\uff98\015\uff98\020\uff98\024\uff98\025\uff98" +
    "\030\uff98\031\uff98\032\uff98\041\uff98\042\uff98\055\uff98\001" +
    "\002\000\026\003\124\010\126\014\ufff2\015\115\020\127" +
    "\025\006\031\131\032\121\041\122\055\117\001\002\000" +
    "\026\003\124\010\126\014\ufff2\015\115\020\127\025\006" +
    "\031\131\032\121\041\122\055\117\001\002\000\004\014" +
    "\u015a\001\002\000\004\046\u015b\001\002\000\040\003\uff92" +
    "\010\uff92\011\uff92\012\uff92\014\uff92\015\uff92\020\uff92\024" +
    "\uff92\025\uff92\030\uff92\031\uff92\032\uff92\041\uff92\042\uff92" +
    "\055\uff92\001\002\000\004\014\u015d\001\002\000\004\046" +
    "\u015e\001\002\000\040\003\uff96\010\uff96\011\uff96\012\uff96" +
    "\014\uff96\015\uff96\020\uff96\024\uff96\025\uff96\030\uff96\031" +
    "\uff96\032\uff96\041\uff96\042\uff96\055\uff96\001\002\000\026" +
    "\003\124\010\126\014\ufff2\015\115\020\127\025\006\031" +
    "\131\032\121\041\122\055\117\001\002\000\004\014\u0161" +
    "\001\002\000\004\046\u0162\001\002\000\040\003\uff93\010" +
    "\uff93\011\uff93\012\uff93\014\uff93\015\uff93\020\uff93\024\uff93" +
    "\025\uff93\030\uff93\031\uff93\032\uff93\041\uff93\042\uff93\055" +
    "\uff93\001\002\000\004\020\u0164\001\002\000\004\013\u0165" +
    "\001\002\000\026\003\124\010\126\014\ufff2\015\115\020" +
    "\127\025\006\031\131\032\121\041\122\055\117\001\002" +
    "\000\004\014\u0167\001\002\000\004\046\u0168\001\002\000" +
    "\040\003\uff97\010\uff97\011\uff97\012\uff97\014\uff97\015\uff97" +
    "\020\uff97\024\uff97\025\uff97\030\uff97\031\uff97\032\uff97\041" +
    "\uff97\042\uff97\055\uff97\001\002\000\004\022\u016a\001\002" +
    "\000\004\013\u016b\001\002\000\026\003\124\010\126\014" +
    "\ufff2\015\115\020\127\025\006\031\131\032\121\041\122" +
    "\055\117\001\002\000\004\014\u016d\001\002\000\004\046" +
    "\u016e\001\002\000\040\003\uff94\010\uff94\011\uff94\012\uff94" +
    "\014\uff94\015\uff94\020\uff94\024\uff94\025\uff94\030\uff94\031" +
    "\uff94\032\uff94\041\uff94\042\uff94\055\uff94\001\002\000\016" +
    "\011\ufff7\012\ufff7\014\ufff7\024\ufff7\030\ufff7\042\ufff7\001" +
    "\002\000\010\020\164\022\163\033\162\001\002\000\004" +
    "\045\u0172\001\002\000\004\013\u0173\001\002\000\026\003" +
    "\124\010\126\014\ufff2\015\115\020\127\025\006\031\131" +
    "\032\121\041\122\055\117\001\002\000\004\014\u0175\001" +
    "\002\000\004\046\u0176\001\002\000\040\003\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\014\uffd6\015\uffd6\020\uffd6\024\uffd6\025" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\041\uffd6\042\uffd6\055\uffd6" +
    "\001\002\000\016\011\ufff4\012\ufff4\014\ufff4\024\ufff4\030" +
    "\ufff4\042\ufff4\001\002\000\016\011\ufff5\012\ufff5\014\ufff5" +
    "\024\ufff5\030\ufff5\042\ufff5\001\002\000\016\011\ufffa\012" +
    "\ufffa\014\ufffa\024\ufffa\030\ufffa\042\ufffa\001\002\000\016" +
    "\011\ufffb\012\ufffb\014\ufffb\024\ufffb\030\ufffb\042\ufffb\001" +
    "\002\000\016\011\ufff8\012\ufff8\014\ufff8\024\ufff8\030\ufff8" +
    "\042\ufff8\001\002\000\006\020\052\027\uffc9\001\002\000" +
    "\004\027\uffca\001\002\000\006\026\uffe8\042\uffe8\001\002" +
    "\000\004\026\u0180\001\002\000\006\020\052\027\uffc9\001" +
    "\002\000\004\027\u0182\001\002\000\026\003\124\010\126" +
    "\015\115\020\127\025\006\030\ufff2\031\131\032\121\041" +
    "\122\055\117\001\002\000\004\030\u0184\001\002\000\004" +
    "\020\u0185\001\002\000\004\046\u0186\001\002\000\042\002" +
    "\ufffe\003\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe" +
    "\020\ufffe\024\ufffe\025\ufffe\030\ufffe\031\ufffe\032\ufffe\041" +
    "\ufffe\042\ufffe\055\ufffe\001\002\000\006\003\011\044\013" +
    "\001\002\000\004\026\351\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0187\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u017e\001\001" +
    "\000\004\011\011\001\001\000\004\012\u017d\001\001\000" +
    "\002\001\001\000\004\012\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\035\001" +
    "\001\000\004\024\020\001\001\000\004\025\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\034\001\001\000\002\001\001\000\004" +
    "\025\036\001\001\000\002\001\001\000\004\012\040\001" +
    "\001\000\002\001\001\000\004\024\042\001\001\000\004" +
    "\025\043\001\001\000\002\001\001\000\004\012\045\001" +
    "\001\000\002\001\001\000\006\013\050\015\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\105\015\104\001\001\000\004\014\061\001\001" +
    "\000\004\015\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\107\003\122\006\110\010\111\016" +
    "\115\017\127\020\117\021\112\022\113\023\124\001\001" +
    "\000\026\002\107\003\u017a\006\110\010\111\016\115\017" +
    "\127\020\117\021\112\022\113\023\124\001\001\000\026" +
    "\002\107\003\u0179\006\110\010\111\016\115\017\127\020" +
    "\117\021\112\022\113\023\124\001\001\000\026\002\107" +
    "\003\u0178\006\110\010\111\016\115\017\127\020\117\021" +
    "\112\022\113\023\124\001\001\000\026\002\107\003\u0177" +
    "\006\110\010\111\016\115\017\127\020\117\021\112\022" +
    "\113\023\124\001\001\000\026\002\107\003\u0176\006\110" +
    "\010\111\016\115\017\127\020\117\021\112\022\113\023" +
    "\124\001\001\000\002\001\001\000\026\002\107\003\u016e" +
    "\006\110\010\111\016\115\017\127\020\117\021\112\022" +
    "\113\023\124\001\001\000\002\001\001\000\026\002\107" +
    "\003\u014a\006\110\010\111\016\115\017\127\020\117\021" +
    "\112\022\113\023\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\107\003\335\006\110\010\111\016\115\017\127\020\117" +
    "\021\112\022\113\023\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\107\003\147\006\110\010\111" +
    "\016\115\017\127\020\117\021\112\022\113\023\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\164\005\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\107\003\166\006\110\010" +
    "\111\016\115\017\127\020\117\021\112\022\113\023\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\207\001\001\000" +
    "\004\005\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\224\005\160\001\001\000\006" +
    "\004\216\005\160\001\001\000\002\001\001\000\026\002" +
    "\107\003\220\006\110\010\111\016\115\017\127\020\117" +
    "\021\112\022\113\023\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\107\003\226\006\110\010\111\016" +
    "\115\017\127\020\117\021\112\022\113\023\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\236\005\160\001\001\000\002\001" +
    "\001\000\026\002\107\003\240\006\110\010\111\016\115" +
    "\017\127\020\117\021\112\022\113\023\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\246\005\160\001" +
    "\001\000\002\001\001\000\026\002\107\003\250\006\110" +
    "\010\111\016\115\017\127\020\117\021\112\022\113\023" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\304\005\160" +
    "\001\001\000\002\001\001\000\026\002\107\003\306\006" +
    "\110\010\111\016\115\017\127\020\117\021\112\022\113" +
    "\023\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\313\005\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\107\003\316\006\110\010\111\016\115\017\127\020\117" +
    "\021\112\022\113\023\124\001\001\000\004\007\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\107\003\323\006\110\010\111\016\115\017" +
    "\127\020\117\021\112\022\113\023\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\330\005\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\107\003\333\006\110\010" +
    "\111\016\115\017\127\020\117\021\112\022\113\023\124" +
    "\001\001\000\004\007\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\107\003\345\006\110\010\111" +
    "\016\115\017\127\020\117\021\112\022\113\023\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\365\015\047\001\001\000\004\025\352\001" +
    "\001\000\002\001\001\000\006\013\354\015\047\001\001" +
    "\000\002\001\001\000\026\002\107\003\356\006\110\010" +
    "\111\016\115\017\127\020\117\021\112\022\113\023\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\107\003" +
    "\367\006\110\010\111\016\115\017\127\020\117\021\112" +
    "\022\113\023\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u0105\005\160\001" +
    "\001\000\002\001\001\000\026\002\107\003\u0107\006\110" +
    "\010\111\016\115\017\127\020\117\021\112\022\113\023" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u012f\001\001\000\004\011" +
    "\u0113\001\001\000\002\001\001\000\004\025\u0115\001\001" +
    "\000\002\001\001\000\006\013\u0117\015\047\001\001\000" +
    "\002\001\001\000\026\002\107\003\u0119\006\110\010\111" +
    "\016\115\017\127\020\117\021\112\022\113\023\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0131\001\001\000\002\001\001\000" +
    "\006\013\u0133\015\047\001\001\000\002\001\001\000\026" +
    "\002\107\003\u0135\006\110\010\111\016\115\017\127\020" +
    "\117\021\112\022\113\023\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\107\003" +
    "\u0153\006\110\010\111\016\115\017\127\020\117\021\112" +
    "\022\113\023\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\107\003\u015b\006\110" +
    "\010\111\016\115\017\127\020\117\021\112\022\113\023" +
    "\124\001\001\000\026\002\107\003\u0158\006\110\010\111" +
    "\016\115\017\127\020\117\021\112\022\113\023\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\107\003\u015f\006\110\010\111\016\115\017\127" +
    "\020\117\021\112\022\113\023\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\107\003\u0165\006\110\010" +
    "\111\016\115\017\127\020\117\021\112\022\113\023\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\107" +
    "\003\u016b\006\110\010\111\016\115\017\127\020\117\021" +
    "\112\022\113\023\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u0170\005\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\107\003\u0173\006\110\010\111\016\115\017" +
    "\127\020\117\021\112\022\113\023\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u017c\015\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u0180\015\047\001\001\000\002\001\001\000\026\002" +
    "\107\003\u0182\006\110\010\111\016\115\017\127\020\117" +
    "\021\112\022\113\023\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0187\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   ArrayList errores = new ArrayList();

    public Nodo raiz;    
    public int cont = 0;

public void syntax_error (Symbol s){
    errores.add("Esta es Linea: " + (s.left) + " y Columna: " + (s.right));
}
public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido, por favor revise la linea: " + (s.left + 1) + " y columna: " + (s.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		     
                System.out.println("Esto es procedure");
                Nodo node = new Nodo("INICIO",parser.cont);
                parser.cont++;
                Nodo nodo = new Nodo("PROCEDURE",parser.cont);
                parser.cont++;
                nodo.addHijo(new Nodo (id.toString(), parser.cont));
                parser.cont++;
                nodo.addHijo(p);
                nodo.addHijo(d);
                nodo.addHijo(s);
                node.addHijo(nodo);
                parser.raiz = node;
    
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE ::= error TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"procedure\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE ::= TK_PROCEDURE error PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_PRIME ::= DECISION PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(d);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_PRIME ::= WHILE PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(w);
                    nodo.addHijo(s);
                    RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_PRIME ::= ASIGNACIONES PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(a);
                    nodo.addHijo(s);
                    RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_PRIME ::= PROCEDURE PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo proc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(proc);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_PRIME ::= PUT PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(p);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDURE_PRIME ::= GET PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(g);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROCEDURE_PRIME ::= LOOP PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(l);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROCEDURE_PRIME ::= FUNCTION PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(f);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROCEDURE_PRIME ::= FOR PROCEDURE_PRIME 
            {
              Nodo RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo fr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo("ESTRUCTURA",parser.cont);
                    parser.cont++;
                    nodo.addHijo(fr);
                    nodo.addHijo(s);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROCEDURE_PRIME ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_PRIME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_VARIABLES ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = ti;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = to;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;
		int tioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tio = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = tio;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOS_PARAMETROS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de parámetros permitidos son in, out e inout. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS ::= error PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo pm = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        Nodo node = new Nodo ("PARAMETROS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tp.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tv.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(pm);
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        Nodo node = new Nodo ("PARAMETROS",parser.cont);
                        parser.cont++;
                        node.addHijo(new Nodo(id.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tp.toString(), parser.cont));
                        parser.cont++;
                        node.addHijo(new Nodo(tv.toString(), parser.cont));
                        parser.cont++;
                        RESULT = node;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS_PRIME ::= error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS_PRIME ::= TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECISION ::= TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo dp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("DECISION",parser.cont);
                parser.cont++;
                Nodo c = new Nodo("EXPRESIONES",parser.cont);
                parser.cont++;
                c.addHijo(e);
                nodo.addHijo(c);
                nodo.addHijo(p);
                nodo.addHijo(dp);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECISION_PRIME ::= TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo pr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Nodo nodo = new Nodo("ELSE",parser.cont);
                parser.cont++;
                nodo.addHijo(pr);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo nodo = new Nodo("ASIGNACION",parser.cont);
                    parser.cont++;
                    Nodo igual = new Nodo(i.toString(),parser.cont);
                    parser.cont++;
                    igual.addHijo(new Nodo(id1.toString(),parser.cont));
                    parser.cont++;
                    igual.addHijo(new Nodo(id2.toString(),parser.cont));
                    nodo.addHijo(igual);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                   Nodo nodo = new Nodo(w.toString(),parser.cont);
                   parser.cont++;
                   nodo.addHijo(p);
                   RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES ::= EP 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES ::= EP TK_OR EP 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ep = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo(o.toString(),parser.cont);
                    parser.cont++;
                    nodo.addHijo(e);
                    nodo.addHijo(ep);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES ::= EP TK_AND EP 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ep = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo(a.toString(),parser.cont);
                    parser.cont++;
                    nodo.addHijo(e);
                    nodo.addHijo(ep);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EP ::= TK_ID TK_OPREL TK_ID 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id1.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(id2.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EP ::= TK_ID TK_OPREL TK_DIGITO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dI = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(dI.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EP ::= TK_ID TK_OPREL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(dF.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EP ::= TK_ID TK_OPREL TK_TRUE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(t.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EP ::= TK_ID TK_OPREL TK_FALSE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(f.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EP ::= TK_DIGITO TK_OPREL TK_ID 
            {
              Nodo RESULT =null;
		int dIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dI = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(dI.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EP ::= TK_DIGITOFLOAT TK_OPREL TK_ID 
            {
              Nodo RESULT =null;
		int dFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo(op.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(dF.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONES ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = id;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACIONES",parser.cont);
                    parser.cont++;
                    node.addHijo(id);
                    node.addHijo(d);
                    RESULT = node;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACIONES ::= 
            {
              Nodo RESULT =null;
		
                        Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ID ::= TK_ID TK_COMA ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("ID",parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        d.addHijo(nodo);
        RESULT = d;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ID ::= TK_ID error ID 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \",\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ID ::= TK_ID TK_COLON TIPOS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo("Variables",parser.cont);
        parser.cont++;
        nodo.addHijo(t);
        Nodo node = new Nodo("ID",parser.cont);
        parser.cont++;
        node.addHijo(new Nodo(id.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(node);
        RESULT = nodo;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ID ::= TK_ID error TIPOS 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOS ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(v.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(v.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOS ::= TK_BOOLEAN error TK_TRUE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOS ::= TK_BOOLEAN error TK_FALSE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= TK_BOOLEAN TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un true o false "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= TK_INTEGER 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;         
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(d.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= TK_INTEGER error TK_DIGITO 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= TK_INTEGER TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS ::= TK_FLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            nodo.addHijo(new Nodo(d.toString(),parser.cont));
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS ::= TK_FLOAT error TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS ::= TK_FLOAT TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero decimal "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo nodo = new Nodo (p.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(s.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PUT ::= error TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"put o un if\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PUT ::= TK_PUT error TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PUT ::= TK_PUT TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba una cadena "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un en el put \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Nodo nodo = new Nodo (g.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(d.toString(),parser.cont));
        parser.cont++;
        RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // GET ::= error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"get\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // GET ::= TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // GET ::= TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // GET ::= TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int exitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object exit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
            Nodo nodo = new Nodo("LOOP",parser.cont);
            parser.cont++;
            Nodo identificador = new Nodo(id1.toString(),parser.cont);
            parser.cont++;
            Nodo salida = new Nodo ("EXIT WHEN",parser.cont);
            parser.cont++;
            salida.addHijo(exp);
            identificador.addHijo(salida);  
            nodo.addHijo(identificador);
            nodo.addHijo(p);
            RESULT = nodo;
            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo proc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Nodo nodo = new Nodo("FUNCION",parser.cont);
                parser.cont++;
                nodo.addHijo(par);
                Nodo retorno = new Nodo("RETURN",parser.cont);
                parser.cont++;
                retorno.addHijo(new Nodo(tv.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(retorno);
                nodo.addHijo(dec);
                nodo.addHijo(proc);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCTION ::= error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"function\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCTION ::= TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador, begin o return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"end\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FOR ::= TK_FOR TK_ID TK_IN TK_ID TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo = new Nodo("FOR LOOP",parser.cont);
            parser.cont++;
            Nodo in = new Nodo("IN",parser.cont);
            parser.cont++;
            in.addHijo(new Nodo(id1.toString(),parser.cont));
            parser.cont++;
            in.addHijo(new Nodo(id2.toString(),parser.cont));
            parser.cont++;
            nodo.addHijo(in);
            nodo.addHijo(p);
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR ::= TK_FOR TK_DIGITO TK_IN TK_ID TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo = new Nodo("FOR LOOP",parser.cont);
            parser.cont++;
            Nodo in = new Nodo("IN",parser.cont);
            parser.cont++;
            in.addHijo(new Nodo(d1.toString(),parser.cont));
            parser.cont++;
            in.addHijo(new Nodo(id2.toString(),parser.cont));
            parser.cont++;
            nodo.addHijo(in);
            nodo.addHijo(p);
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FOR ::= TK_FOR TK_ID TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo = new Nodo("FOR LOOP",parser.cont);
            parser.cont++;
            Nodo in = new Nodo("IN",parser.cont);
            parser.cont++;
            in.addHijo(new Nodo(id1.toString(),parser.cont));
            parser.cont++;
            in.addHijo(new Nodo(d2.toString(),parser.cont));
            parser.cont++;
            nodo.addHijo(in);
            nodo.addHijo(p);
            RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR ::= error TK_ID TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"for\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FOR ::= TK_FOR error TK_IN TK_DIGITO TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"numero o un identificador\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FOR ::= TK_FOR TK_ID TK_IN error TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"numero o un identificador\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR ::= TK_FOR TK_ID TK_IN TK_DIGITO error PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
