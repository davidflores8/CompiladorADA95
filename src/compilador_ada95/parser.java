
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador_ada95;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\031\002\000\002\002" +
    "\015\000\002\021\014\000\002\021\014\000\002\021\014" +
    "\000\002\021\014\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\002\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\007\004\000\002\007\004\000\002" +
    "\010\010\000\002\010\007\000\002\010\003\000\002\010" +
    "\010\000\002\010\010\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\030\003\000" +
    "\002\030\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\004\011\000\002\005" +
    "\011\000\002\005\006\000\002\005\004\000\002\014\006" +
    "\000\002\014\010\000\002\014\010\000\002\014\010\000" +
    "\002\014\010\000\002\014\010\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\006\012\000\002\020" +
    "\003\000\002\020\005\000\002\032\002\000\002\020\005" +
    "\000\002\033\002\000\002\020\005\000\002\020\002\000" +
    "\002\034\002\000\002\022\006\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\011\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\007\000\002\012\007\000\002\012\007" +
    "\000\002\012\007\000\002\012\007\000\002\012\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\015" +
    "\016\000\002\015\016\000\002\015\016\000\002\015\016" +
    "\000\002\015\016\000\002\015\016\000\002\015\016\000" +
    "\002\015\016\000\002\015\016\000\002\016\021\000\002" +
    "\016\021\000\002\016\021\000\002\016\021\000\002\016" +
    "\021\000\002\016\021\000\002\016\021\000\002\016\021" +
    "\000\002\017\012\000\002\017\012\000\002\017\012\000" +
    "\002\017\012\000\002\017\012\000\002\017\012\000\002" +
    "\017\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\004\025\005\001\002\000\004\002\u0192\001" +
    "\002\000\004\020\006\001\002\000\006\003\007\044\011" +
    "\001\002\000\010\003\012\020\015\045\013\001\002\000" +
    "\004\026\000\001\002\000\010\003\012\020\015\045\013" +
    "\001\002\000\004\052\041\001\002\000\006\026\uffe6\042" +
    "\uffe6\001\002\000\006\026\uffea\042\uffea\001\002\000\006" +
    "\003\016\052\017\001\002\000\012\003\021\034\024\035" +
    "\023\036\022\001\002\000\012\003\021\034\024\035\023" +
    "\036\022\001\002\000\012\003\027\005\026\006\025\007" +
    "\031\001\002\000\012\003\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\001\002\000\012\003\uffec\005\uffec\006\uffec\007\uffec\001" +
    "\002\000\012\003\uffed\005\uffed\006\uffed\007\uffed\001\002" +
    "\000\012\003\uffee\005\uffee\006\uffee\007\uffee\001\002\000" +
    "\010\026\ufff0\045\ufff0\046\ufff0\001\002\000\010\026\ufff2" +
    "\045\ufff2\046\ufff2\001\002\000\010\026\uffef\045\uffef\046" +
    "\uffef\001\002\000\006\045\032\046\033\001\002\000\010" +
    "\026\ufff1\045\ufff1\046\ufff1\001\002\000\006\026\uffe7\042" +
    "\uffe7\001\002\000\010\003\012\020\015\045\013\001\002" +
    "\000\006\026\uffe8\042\uffe8\001\002\000\012\003\027\005" +
    "\026\006\025\007\031\001\002\000\004\046\037\001\002" +
    "\000\010\003\012\020\015\045\013\001\002\000\006\026" +
    "\uffe4\042\uffe4\001\002\000\012\003\021\034\024\035\023" +
    "\036\022\001\002\000\012\003\027\005\026\006\025\007" +
    "\031\001\002\000\004\046\044\001\002\000\010\003\012" +
    "\020\015\045\013\001\002\000\006\026\uffe5\042\uffe5\001" +
    "\002\000\004\026\047\001\002\000\014\003\052\020\056" +
    "\025\054\027\uffc5\041\055\001\002\000\004\027\u018c\001" +
    "\002\000\006\027\uffcb\046\u018a\001\002\000\004\020\u0175" +
    "\001\002\000\014\003\uffc7\020\uffc7\025\uffc7\027\uffc7\041" +
    "\uffc7\001\002\000\006\003\u015f\020\u0160\001\002\000\006" +
    "\003\117\020\120\001\002\000\010\003\063\047\uffc4\052" +
    "\064\001\002\000\014\003\uffc9\020\uffc9\025\uffc9\027\uffc9" +
    "\041\uffc9\001\002\000\014\003\052\020\056\025\054\027" +
    "\uffc5\041\055\001\002\000\004\027\uffc8\001\002\000\004" +
    "\047\115\001\002\000\014\003\067\005\066\006\065\007" +
    "\071\020\056\001\002\000\012\003\067\005\066\006\065" +
    "\007\071\001\002\000\012\003\104\004\105\027\uffbf\046" +
    "\uffbf\001\002\000\012\003\077\004\100\027\uffb9\046\uffb9" +
    "\001\002\000\006\027\uffb1\046\uffb1\001\002\000\006\027" +
    "\uffc1\046\uffc1\001\002\000\012\003\072\004\073\027\uffb5" +
    "\046\uffb5\001\002\000\004\033\076\001\002\000\006\003" +
    "\075\033\074\001\002\000\006\027\uffb4\046\uffb4\001\002" +
    "\000\006\027\uffb2\046\uffb2\001\002\000\006\027\uffb3\046" +
    "\uffb3\001\002\000\004\022\103\001\002\000\006\003\101" +
    "\022\102\001\002\000\006\027\uffb6\046\uffb6\001\002\000" +
    "\006\027\uffb8\046\uffb8\001\002\000\006\027\uffb7\046\uffb7" +
    "\001\002\000\006\050\111\051\112\001\002\000\010\003" +
    "\107\050\106\051\110\001\002\000\006\027\uffbd\046\uffbd" +
    "\001\002\000\006\027\uffba\046\uffba\001\002\000\006\027" +
    "\uffbe\046\uffbe\001\002\000\006\027\uffbc\046\uffbc\001\002" +
    "\000\006\027\uffbb\046\uffbb\001\002\000\006\027\uffc2\046" +
    "\uffc2\001\002\000\006\027\uffc0\046\uffc0\001\002\000\004" +
    "\020\056\001\002\000\006\027\uffc3\046\uffc3\001\002\000" +
    "\006\003\007\044\011\001\002\000\006\003\007\044\011" +
    "\001\002\000\004\042\122\001\002\000\012\003\027\005" +
    "\026\006\025\007\031\001\002\000\004\026\124\001\002" +
    "\000\014\003\052\020\056\025\054\027\uffc5\041\055\001" +
    "\002\000\004\027\126\001\002\000\022\003\140\010\133" +
    "\015\144\020\135\031\141\032\132\042\ufff3\055\137\001" +
    "\002\000\034\003\140\010\133\011\ufff3\012\ufff3\014\ufff3" +
    "\015\144\020\135\024\ufff3\030\ufff3\031\141\032\132\042" +
    "\ufff3\055\137\001\002\000\034\003\140\010\133\011\ufff3" +
    "\012\ufff3\014\ufff3\015\144\020\135\024\ufff3\030\ufff3\031" +
    "\141\032\132\042\ufff3\055\137\001\002\000\034\003\140" +
    "\010\133\011\ufff3\012\ufff3\014\ufff3\015\144\020\135\024" +
    "\ufff3\030\ufff3\031\141\032\132\042\ufff3\055\137\001\002" +
    "\000\006\003\u0141\044\u0142\001\002\000\004\044\u012e\001" +
    "\002\000\034\003\140\010\133\011\ufff3\012\ufff3\014\ufff3" +
    "\015\144\020\135\024\ufff3\030\ufff3\031\141\032\132\042" +
    "\ufff3\055\137\001\002\000\010\003\335\004\336\052\337" +
    "\001\002\000\034\003\140\010\133\011\ufff3\012\ufff3\014" +
    "\ufff3\015\144\020\135\024\ufff3\030\ufff3\031\141\032\132" +
    "\042\ufff3\055\137\001\002\000\010\003\271\020\273\022" +
    "\272\001\002\000\010\020\241\044\242\052\240\001\002" +
    "\000\006\003\222\044\223\001\002\000\034\003\140\010" +
    "\133\011\ufff3\012\ufff3\014\ufff3\015\144\020\135\024\ufff3" +
    "\030\ufff3\031\141\032\132\042\ufff3\055\137\001\002\000" +
    "\034\003\140\010\133\011\ufff3\012\ufff3\014\ufff3\015\144" +
    "\020\135\024\ufff3\030\ufff3\031\141\032\132\042\ufff3\055" +
    "\137\001\002\000\004\044\173\001\002\000\004\042\146" +
    "\001\002\000\006\003\147\020\150\001\002\000\004\046" +
    "\167\001\002\000\006\003\151\046\152\001\002\000\004" +
    "\030\164\001\002\000\006\003\153\030\154\001\002\000" +
    "\004\020\162\001\002\000\006\003\155\020\156\001\002" +
    "\000\004\046\161\001\002\000\006\003\157\046\160\001" +
    "\002\000\014\003\uff94\020\uff94\025\uff94\027\uff94\041\uff94" +
    "\001\002\000\014\003\uff9b\020\uff9b\025\uff9b\027\uff9b\041" +
    "\uff9b\001\002\000\014\003\uff95\020\uff95\025\uff95\027\uff95" +
    "\041\uff95\001\002\000\004\046\163\001\002\000\014\003" +
    "\uff96\020\uff96\025\uff96\027\uff96\041\uff96\001\002\000\004" +
    "\020\165\001\002\000\004\046\166\001\002\000\014\003" +
    "\uff97\020\uff97\025\uff97\027\uff97\041\uff97\001\002\000\004" +
    "\030\170\001\002\000\004\020\171\001\002\000\004\046" +
    "\172\001\002\000\014\003\uff98\020\uff98\025\uff98\027\uff98" +
    "\041\uff98\001\002\000\012\020\202\022\201\050\175\051" +
    "\200\001\002\000\012\045\uffe1\046\uffe1\053\215\054\214" +
    "\001\002\000\016\004\uffdc\021\uffdc\045\uffdc\046\uffdc\053" +
    "\uffdc\054\uffdc\001\002\000\004\045\207\001\002\000\006" +
    "\004\204\021\205\001\002\000\016\004\uffdb\021\uffdb\045" +
    "\uffdb\046\uffdb\053\uffdb\054\uffdb\001\002\000\016\004\uffdd" +
    "\021\uffdd\045\uffdd\046\uffdd\053\uffdd\054\uffdd\001\002\000" +
    "\016\004\uffda\021\uffda\045\uffda\046\uffda\053\uffda\054\uffda" +
    "\001\002\000\012\020\202\022\201\050\175\051\200\001" +
    "\002\000\012\020\uffde\022\uffde\050\uffde\051\uffde\001\002" +
    "\000\012\020\uffdf\022\uffdf\050\uffdf\051\uffdf\001\002\000" +
    "\012\045\uffe0\046\uffe0\053\uffe0\054\uffe0\001\002\000\004" +
    "\013\210\001\002\000\022\003\140\010\133\014\ufff3\015" +
    "\144\020\135\031\141\032\132\055\137\001\002\000\004" +
    "\014\212\001\002\000\004\046\213\001\002\000\034\003" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\015\uffcc\020\uffcc" +
    "\024\uffcc\030\uffcc\031\uffcc\032\uffcc\042\uffcc\055\uffcc\001" +
    "\002\000\012\020\202\022\201\050\175\051\200\001\002" +
    "\000\012\020\202\022\201\050\175\051\200\001\002\000" +
    "\006\045\uffe3\046\uffe3\001\002\000\006\045\uffe2\046\uffe2" +
    "\001\002\000\016\011\ufff6\012\ufff6\014\ufff6\024\ufff6\030" +
    "\ufff6\042\ufff6\001\002\000\016\011\ufff8\012\ufff8\014\ufff8" +
    "\024\ufff8\030\ufff8\042\ufff8\001\002\000\004\043\235\001" +
    "\002\000\006\003\224\043\225\001\002\000\004\045\233" +
    "\001\002\000\006\003\226\045\227\001\002\000\004\046" +
    "\232\001\002\000\006\003\230\046\231\001\002\000\034" +
    "\003\uffab\010\uffab\011\uffab\012\uffab\014\uffab\015\uffab\020" +
    "\uffab\024\uffab\030\uffab\031\uffab\032\uffab\042\uffab\055\uffab" +
    "\001\002\000\034\003\uffb0\010\uffb0\011\uffb0\012\uffb0\014" +
    "\uffb0\015\uffb0\020\uffb0\024\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\042\uffb0\055\uffb0\001\002\000\034\003\uffac\010\uffac\011" +
    "\uffac\012\uffac\014\uffac\015\uffac\020\uffac\024\uffac\030\uffac" +
    "\031\uffac\032\uffac\042\uffac\055\uffac\001\002\000\004\046" +
    "\234\001\002\000\034\003\uffad\010\uffad\011\uffad\012\uffad" +
    "\014\uffad\015\uffad\020\uffad\024\uffad\030\uffad\031\uffad\032" +
    "\uffad\042\uffad\055\uffad\001\002\000\004\045\236\001\002" +
    "\000\004\046\237\001\002\000\034\003\uffae\010\uffae\011" +
    "\uffae\012\uffae\014\uffae\015\uffae\020\uffae\024\uffae\030\uffae" +
    "\031\uffae\032\uffae\042\uffae\055\uffae\001\002\000\004\013" +
    "\257\001\002\000\004\034\251\001\002\000\006\020\244" +
    "\043\243\001\002\000\004\045\247\001\002\000\004\045" +
    "\245\001\002\000\004\046\246\001\002\000\034\003\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\020\uffa9\024" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\042\uffa9\055\uffa9\001\002" +
    "\000\004\046\250\001\002\000\034\003\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\014\uffaf\015\uffaf\020\uffaf\024\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\042\uffaf\055\uffaf\001\002\000\004\022" +
    "\252\001\002\000\004\013\253\001\002\000\022\003\140" +
    "\010\133\014\ufff3\015\144\020\135\031\141\032\132\055" +
    "\137\001\002\000\004\014\255\001\002\000\004\046\256" +
    "\001\002\000\034\003\uff90\010\uff90\011\uff90\012\uff90\014" +
    "\uff90\015\uff90\020\uff90\024\uff90\030\uff90\031\uff90\032\uff90" +
    "\042\uff90\055\uff90\001\002\000\004\037\260\001\002\000" +
    "\004\020\261\001\002\000\004\040\262\001\002\000\012" +
    "\020\202\022\201\050\175\051\200\001\002\000\004\046" +
    "\264\001\002\000\022\003\140\010\133\014\ufff3\015\144" +
    "\020\135\031\141\032\132\055\137\001\002\000\004\014" +
    "\266\001\002\000\004\020\267\001\002\000\004\046\270" +
    "\001\002\000\034\003\uffa3\010\uffa3\011\uffa3\012\uffa3\014" +
    "\uffa3\015\uffa3\020\uffa3\024\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\042\uffa3\055\uffa3\001\002\000\004\034\326\001\002\000" +
    "\004\034\320\001\002\000\004\034\274\001\002\000\010" +
    "\003\275\020\277\022\276\001\002\000\004\013\314\001" +
    "\002\000\006\003\305\013\304\001\002\000\004\013\300" +
    "\001\002\000\022\003\140\010\133\014\ufff3\015\144\020" +
    "\135\031\141\032\132\055\137\001\002\000\004\014\302" +
    "\001\002\000\004\046\303\001\002\000\034\003\uff93\010" +
    "\uff93\011\uff93\012\uff93\014\uff93\015\uff93\020\uff93\024\uff93" +
    "\030\uff93\031\uff93\032\uff93\042\uff93\055\uff93\001\002\000" +
    "\022\003\140\010\133\014\ufff3\015\144\020\135\031\141" +
    "\032\132\055\137\001\002\000\022\003\140\010\133\014" +
    "\ufff3\015\144\020\135\031\141\032\132\055\137\001\002" +
    "\000\004\014\307\001\002\000\004\046\310\001\002\000" +
    "\034\003\uff8d\010\uff8d\011\uff8d\012\uff8d\014\uff8d\015\uff8d" +
    "\020\uff8d\024\uff8d\030\uff8d\031\uff8d\032\uff8d\042\uff8d\055" +
    "\uff8d\001\002\000\004\014\312\001\002\000\004\046\313" +
    "\001\002\000\034\003\uff91\010\uff91\011\uff91\012\uff91\014" +
    "\uff91\015\uff91\020\uff91\024\uff91\030\uff91\031\uff91\032\uff91" +
    "\042\uff91\055\uff91\001\002\000\022\003\140\010\133\014" +
    "\ufff3\015\144\020\135\031\141\032\132\055\137\001\002" +
    "\000\004\014\316\001\002\000\004\046\317\001\002\000" +
    "\034\003\uff8e\010\uff8e\011\uff8e\012\uff8e\014\uff8e\015\uff8e" +
    "\020\uff8e\024\uff8e\030\uff8e\031\uff8e\032\uff8e\042\uff8e\055" +
    "\uff8e\001\002\000\004\020\321\001\002\000\004\013\322" +
    "\001\002\000\022\003\140\010\133\014\ufff3\015\144\020" +
    "\135\031\141\032\132\055\137\001\002\000\004\014\324" +
    "\001\002\000\004\046\325\001\002\000\034\003\uff92\010" +
    "\uff92\011\uff92\012\uff92\014\uff92\015\uff92\020\uff92\024\uff92" +
    "\030\uff92\031\uff92\032\uff92\042\uff92\055\uff92\001\002\000" +
    "\004\022\327\001\002\000\004\013\330\001\002\000\022" +
    "\003\140\010\133\014\ufff3\015\144\020\135\031\141\032" +
    "\132\055\137\001\002\000\004\014\332\001\002\000\004" +
    "\046\333\001\002\000\034\003\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\014\uff8f\015\uff8f\020\uff8f\024\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\042\uff8f\055\uff8f\001\002\000\016\011\ufffa\012" +
    "\ufffa\014\ufffa\024\ufffa\030\ufffa\042\ufffa\001\002\000\004" +
    "\013\u0123\001\002\000\012\020\u0112\022\u0111\050\u010f\051" +
    "\u0110\001\002\000\006\003\341\013\340\001\002\000\006" +
    "\003\353\037\354\001\002\000\004\037\342\001\002\000" +
    "\004\020\343\001\002\000\004\040\344\001\002\000\012" +
    "\020\202\022\201\050\175\051\200\001\002\000\004\046" +
    "\346\001\002\000\022\003\140\010\133\014\ufff3\015\144" +
    "\020\135\031\141\032\132\055\137\001\002\000\004\014" +
    "\350\001\002\000\004\020\351\001\002\000\004\046\352" +
    "\001\002\000\034\003\uffa1\010\uffa1\011\uffa1\012\uffa1\014" +
    "\uffa1\015\uffa1\020\uffa1\024\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\042\uffa1\055\uffa1\001\002\000\004\020\u0107\001\002\000" +
    "\006\003\355\020\356\001\002\000\004\040\u0100\001\002" +
    "\000\006\003\360\040\357\001\002\000\012\020\202\022" +
    "\201\050\175\051\200\001\002\000\012\020\202\022\201" +
    "\050\175\051\200\001\002\000\004\046\362\001\002\000" +
    "\022\003\140\010\133\014\ufff3\015\144\020\135\031\141" +
    "\032\132\055\137\001\002\000\004\014\364\001\002\000" +
    "\004\020\365\001\002\000\004\046\366\001\002\000\034" +
    "\003\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e\015\uff9e\020" +
    "\uff9e\024\uff9e\030\uff9e\031\uff9e\032\uff9e\042\uff9e\055\uff9e" +
    "\001\002\000\004\046\370\001\002\000\022\003\140\010" +
    "\133\014\ufff3\015\144\020\135\031\141\032\132\055\137" +
    "\001\002\000\004\014\372\001\002\000\006\003\373\020" +
    "\374\001\002\000\004\046\377\001\002\000\006\003\375" +
    "\046\376\001\002\000\034\003\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\014\uff9c\015\uff9c\020\uff9c\024\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\042\uff9c\055\uff9c\001\002\000\034\003\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\014\uffa4\015\uffa4\020\uffa4\024\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\042\uffa4\055\uffa4\001\002\000" +
    "\034\003\uff9d\010\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d" +
    "\020\uff9d\024\uff9d\030\uff9d\031\uff9d\032\uff9d\042\uff9d\055" +
    "\uff9d\001\002\000\012\020\202\022\201\050\175\051\200" +
    "\001\002\000\004\046\u0102\001\002\000\022\003\140\010" +
    "\133\014\ufff3\015\144\020\135\031\141\032\132\055\137" +
    "\001\002\000\004\014\u0104\001\002\000\004\020\u0105\001" +
    "\002\000\004\046\u0106\001\002\000\034\003\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\014\uff9f\015\uff9f\020\uff9f\024\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\042\uff9f\055\uff9f\001\002\000\004" +
    "\040\u0108\001\002\000\012\020\202\022\201\050\175\051" +
    "\200\001\002\000\004\046\u010a\001\002\000\022\003\140" +
    "\010\133\014\ufff3\015\144\020\135\031\141\032\132\055" +
    "\137\001\002\000\004\014\u010c\001\002\000\004\020\u010d" +
    "\001\002\000\004\046\u010e\001\002\000\034\003\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\020\uffa0\024\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\042\uffa0\055\uffa0\001\002\000" +
    "\004\046\u0122\001\002\000\004\046\u0121\001\002\000\004" +
    "\046\u0120\001\002\000\010\016\u0113\017\u0114\046\u0115\001" +
    "\002\000\010\020\u011c\022\u011b\033\u011a\001\002\000\006" +
    "\020\u0117\022\u0116\001\002\000\034\003\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\014\uffd5\015\uffd5\020\uffd5\024\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\042\uffd5\055\uffd5\001\002\000\004\046" +
    "\u0119\001\002\000\004\046\u0118\001\002\000\034\003\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\014\uffd1\015\uffd1\020\uffd1\024" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\042\uffd1\055\uffd1\001\002" +
    "\000\034\003\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\015" +
    "\uffd0\020\uffd0\024\uffd0\030\uffd0\031\uffd0\032\uffd0\042\uffd0" +
    "\055\uffd0\001\002\000\004\046\u011f\001\002\000\004\046" +
    "\u011e\001\002\000\004\046\u011d\001\002\000\034\003\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\020\uffd4\024" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\042\uffd4\055\uffd4\001\002" +
    "\000\034\003\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\015" +
    "\uffd3\020\uffd3\024\uffd3\030\uffd3\031\uffd3\032\uffd3\042\uffd3" +
    "\055\uffd3\001\002\000\034\003\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\014\uffd2\015\uffd2\020\uffd2\024\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\042\uffd2\055\uffd2\001\002\000\034\003\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\020\uffcf\024\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\042\uffcf\055\uffcf\001\002\000" +
    "\034\003\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd" +
    "\020\uffcd\024\uffcd\030\uffcd\031\uffcd\032\uffcd\042\uffcd\055" +
    "\uffcd\001\002\000\034\003\uffce\010\uffce\011\uffce\012\uffce" +
    "\014\uffce\015\uffce\020\uffce\024\uffce\030\uffce\031\uffce\032" +
    "\uffce\042\uffce\055\uffce\001\002\000\004\037\u0124\001\002" +
    "\000\004\020\u0125\001\002\000\004\040\u0126\001\002\000" +
    "\012\020\202\022\201\050\175\051\200\001\002\000\004" +
    "\046\u0128\001\002\000\022\003\140\010\133\014\ufff3\015" +
    "\144\020\135\031\141\032\132\055\137\001\002\000\004" +
    "\014\u012a\001\002\000\004\020\u012b\001\002\000\004\046" +
    "\u012c\001\002\000\034\003\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\014\uffa2\015\uffa2\020\uffa2\024\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\042\uffa2\055\uffa2\001\002\000\016\011\ufff5\012\ufff5" +
    "\014\ufff5\024\ufff5\030\ufff5\042\ufff5\001\002\000\012\020" +
    "\202\022\201\050\175\051\200\001\002\000\004\045\u0130" +
    "\001\002\000\004\023\u0131\001\002\000\026\003\140\010" +
    "\133\011\ufff3\012\ufff3\015\144\020\135\024\ufff3\031\141" +
    "\032\132\055\137\001\002\000\010\011\u0136\012\u0133\024" +
    "\u0135\001\002\000\004\044\u013b\001\002\000\034\003\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\020\uffd9\024" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\042\uffd9\055\uffd9\001\002" +
    "\000\004\046\u013a\001\002\000\022\003\140\010\133\015" +
    "\144\020\135\024\ufff3\031\141\032\132\055\137\001\002" +
    "\000\004\024\u0138\001\002\000\004\046\u0139\001\002\000" +
    "\034\003\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\015\uffd7" +
    "\020\uffd7\024\uffd7\030\uffd7\031\uffd7\032\uffd7\042\uffd7\055" +
    "\uffd7\001\002\000\034\003\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\014\uffd6\015\uffd6\020\uffd6\024\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\042\uffd6\055\uffd6\001\002\000\012\020\202\022\201" +
    "\050\175\051\200\001\002\000\004\045\u013d\001\002\000" +
    "\004\023\u013e\001\002\000\026\003\140\010\133\011\ufff3" +
    "\012\ufff3\015\144\020\135\024\ufff3\031\141\032\132\055" +
    "\137\001\002\000\010\011\u0136\012\u0133\024\u0135\001\002" +
    "\000\034\003\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\020\uffd8\024\uffd8\030\uffd8\031\uffd8\032\uffd8\042\uffd8" +
    "\055\uffd8\001\002\000\004\020\u014c\001\002\000\006\003" +
    "\u0143\020\u0144\001\002\000\004\045\u014a\001\002\000\006" +
    "\003\u0145\045\u0146\001\002\000\004\046\u0149\001\002\000" +
    "\006\003\u0147\046\u0148\001\002\000\034\003\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\014\uffa5\015\uffa5\020\uffa5\024\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\042\uffa5\055\uffa5\001\002\000\034" +
    "\003\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\020" +
    "\uffaa\024\uffaa\030\uffaa\031\uffaa\032\uffaa\042\uffaa\055\uffaa" +
    "\001\002\000\034\003\uffa6\010\uffa6\011\uffa6\012\uffa6\014" +
    "\uffa6\015\uffa6\020\uffa6\024\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\042\uffa6\055\uffa6\001\002\000\004\046\u014b\001\002\000" +
    "\034\003\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7" +
    "\020\uffa7\024\uffa7\030\uffa7\031\uffa7\032\uffa7\042\uffa7\055" +
    "\uffa7\001\002\000\004\045\u014d\001\002\000\004\046\u014e" +
    "\001\002\000\034\003\uffa8\010\uffa8\011\uffa8\012\uffa8\014" +
    "\uffa8\015\uffa8\020\uffa8\024\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\042\uffa8\055\uffa8\001\002\000\016\011\ufff7\012\ufff7\014" +
    "\ufff7\024\ufff7\030\ufff7\042\ufff7\001\002\000\016\011\ufff4" +
    "\012\ufff4\014\ufff4\024\ufff4\030\ufff4\042\ufff4\001\002\000" +
    "\016\011\ufff9\012\ufff9\014\ufff9\024\ufff9\030\ufff9\042\ufff9" +
    "\001\002\000\004\042\u0153\001\002\000\012\003\027\005" +
    "\026\006\025\007\031\001\002\000\004\026\u0155\001\002" +
    "\000\014\003\052\020\056\025\054\027\uffc5\041\055\001" +
    "\002\000\004\027\u0157\001\002\000\022\003\140\010\133" +
    "\015\144\020\135\031\141\032\132\042\ufff3\055\137\001" +
    "\002\000\004\042\u0159\001\002\000\004\020\u015a\001\002" +
    "\000\004\046\u015b\001\002\000\004\030\u015c\001\002\000" +
    "\004\020\u015d\001\002\000\004\046\u015e\001\002\000\014" +
    "\003\uff99\020\uff99\025\uff99\027\uff99\041\uff99\001\002\000" +
    "\006\003\007\044\011\001\002\000\006\003\007\044\011" +
    "\001\002\000\004\026\u0162\001\002\000\014\003\052\020" +
    "\056\025\054\027\uffc5\041\055\001\002\000\004\027\u0164" +
    "\001\002\000\022\003\140\010\133\015\144\020\135\030" +
    "\ufff3\031\141\032\132\055\137\001\002\000\004\030\u0166" +
    "\001\002\000\006\003\u0167\020\u0168\001\002\000\004\046" +
    "\u016a\001\002\000\004\046\u0169\001\002\000\014\003\ufffe" +
    "\020\ufffe\025\ufffe\027\ufffe\041\ufffe\001\002\000\014\003" +
    "\ufffb\020\ufffb\025\ufffb\027\ufffb\041\ufffb\001\002\000\004" +
    "\026\u016c\001\002\000\014\003\052\020\056\025\054\027" +
    "\uffc5\041\055\001\002\000\004\027\u016e\001\002\000\022" +
    "\003\140\010\133\015\144\020\135\030\ufff3\031\141\032" +
    "\132\055\137\001\002\000\004\030\u0170\001\002\000\004" +
    "\020\u0171\001\002\000\004\046\u0172\001\002\000\014\003" +
    "\ufffc\020\ufffc\025\ufffc\027\ufffc\041\ufffc\001\002\000\014" +
    "\003\052\020\056\025\054\027\uffc5\041\055\001\002\000" +
    "\004\027\uffc6\001\002\000\006\003\007\044\011\001\002" +
    "\000\006\026\u0177\042\u0178\001\002\000\014\003\052\020" +
    "\056\025\054\027\uffc5\041\055\001\002\000\012\003\027" +
    "\005\026\006\025\007\031\001\002\000\004\026\u017a\001" +
    "\002\000\014\003\052\020\056\025\054\027\uffc5\041\055" +
    "\001\002\000\004\027\u017c\001\002\000\022\003\140\010" +
    "\133\015\144\020\135\031\141\032\132\042\ufff3\055\137" +
    "\001\002\000\004\042\u017e\001\002\000\004\020\u017f\001" +
    "\002\000\004\046\u0180\001\002\000\004\030\u0181\001\002" +
    "\000\004\020\u0182\001\002\000\004\046\u0183\001\002\000" +
    "\014\003\uff9a\020\uff9a\025\uff9a\027\uff9a\041\uff9a\001\002" +
    "\000\004\027\u0185\001\002\000\022\003\140\010\133\015" +
    "\144\020\135\030\ufff3\031\141\032\132\055\137\001\002" +
    "\000\004\030\u0187\001\002\000\004\020\u0188\001\002\000" +
    "\004\046\u0189\001\002\000\014\003\ufffd\020\ufffd\025\ufffd" +
    "\027\ufffd\041\ufffd\001\002\000\014\003\052\020\056\025" +
    "\054\027\uffc5\041\055\001\002\000\004\027\uffca\001\002" +
    "\000\022\003\140\010\133\015\144\020\135\030\ufff3\031" +
    "\141\032\132\055\137\001\002\000\004\030\u018e\001\002" +
    "\000\004\020\u018f\001\002\000\004\046\u0190\001\002\000" +
    "\004\002\uffff\001\002\000\006\026\uffe9\042\uffe9\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0190\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\007\001\001\000\004\010\u0190" +
    "\001\001\000\004\031\045\001\001\000\004\010\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\034\001\001\000\004\023" +
    "\017\001\001\000\004\024\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\033\001\001\000\002\001\001\000\004\024\035\001\001" +
    "\000\002\001\001\000\004\010\037\001\001\000\002\001" +
    "\001\000\004\023\041\001\001\000\004\024\042\001\001" +
    "\000\002\001\001\000\004\010\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\056\020\047\021\052" +
    "\022\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\061\001\001\000\004\032" +
    "\057\001\001\000\012\016\056\020\060\021\052\022\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\113\022\112\001\001\000\004\011\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\115\001\001\000\002\001\001" +
    "\000\004\007\u0151\001\001\000\004\007\120\001\001\000" +
    "\002\001\001\000\004\024\122\001\001\000\002\001\001" +
    "\000\012\016\056\020\124\021\052\022\050\001\001\000" +
    "\002\001\001\000\022\003\144\004\135\006\126\012\130" +
    "\013\142\014\141\015\133\017\127\001\001\000\022\003" +
    "\u0150\004\135\006\126\012\130\013\142\014\141\015\133" +
    "\017\127\001\001\000\022\003\u014f\004\135\006\126\012" +
    "\130\013\142\014\141\015\133\017\127\001\001\000\022" +
    "\003\u014e\004\135\006\126\012\130\013\142\014\141\015" +
    "\133\017\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\u012c\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\002\001\001\000\022" +
    "\003\333\004\135\006\126\012\130\013\142\014\141\015" +
    "\133\017\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\220\004\135\006\126\012" +
    "\130\013\142\014\141\015\133\017\127\001\001\000\022" +
    "\003\217\004\135\006\126\012\130\013\142\014\141\015" +
    "\133\017\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\175\026\173\027" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\210\004\135\006\126\012\130" +
    "\013\142\014\141\015\133\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\216" +
    "\026\173\027\176\001\001\000\010\025\215\026\173\027" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\253\004\135\006\126\012\130\013" +
    "\142\014\141\015\133\017\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\262\026\173" +
    "\027\176\001\001\000\002\001\001\000\022\003\264\004" +
    "\135\006\126\012\130\013\142\014\141\015\133\017\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\300\004\135" +
    "\006\126\012\130\013\142\014\141\015\133\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\310\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\022\003\305\004\135" +
    "\006\126\012\130\013\142\014\141\015\133\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\314\004\135\006\126\012\130\013\142\014\141" +
    "\015\133\017\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\322\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\330\004\135\006\126\012\130\013\142" +
    "\014\141\015\133\017\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\344\026\173\027\176\001\001\000\002\001" +
    "\001\000\022\003\346\004\135\006\126\012\130\013\142" +
    "\014\141\015\133\017\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\366\026\173\027\176\001\001\000\010" +
    "\025\360\026\173\027\176\001\001\000\002\001\001\000" +
    "\022\003\362\004\135\006\126\012\130\013\142\014\141" +
    "\015\133\017\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\370\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\u0100" +
    "\026\173\027\176\001\001\000\002\001\001\000\022\003" +
    "\u0102\004\135\006\126\012\130\013\142\014\141\015\133" +
    "\017\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\u0108\026\173\027\176\001\001\000\002\001\001\000" +
    "\022\003\u010a\004\135\006\126\012\130\013\142\014\141" +
    "\015\133\017\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\u0126\026\173\027\176\001\001\000\002\001\001\000\022" +
    "\003\u0128\004\135\006\126\012\130\013\142\014\141\015" +
    "\133\017\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\u012e\026\173\027\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\u0131\004\135\006\126\012" +
    "\130\013\142\014\141\015\133\017\127\001\001\000\004" +
    "\005\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\u0136\004\135\006\126\012\130" +
    "\013\142\014\141\015\133\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\u013b\026\173\027\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\u013e\004\135\006\126" +
    "\012\130\013\142\014\141\015\133\017\127\001\001\000" +
    "\004\005\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0153\001\001\000\002\001\001" +
    "\000\012\016\056\020\u0155\021\052\022\050\001\001\000" +
    "\002\001\001\000\022\003\u0157\004\135\006\126\012\130" +
    "\013\142\014\141\015\133\017\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u016a\001\001\000\004\007\u0160\001\001\000\002" +
    "\001\001\000\012\016\056\020\u0162\021\052\022\050\001" +
    "\001\000\002\001\001\000\022\003\u0164\004\135\006\126" +
    "\012\130\013\142\014\141\015\133\017\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\056\020\u016c\021\052\022\050\001\001" +
    "\000\002\001\001\000\022\003\u016e\004\135\006\126\012" +
    "\130\013\142\014\141\015\133\017\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\056\020\u0173\021\052\022\050\001\001" +
    "\000\002\001\001\000\004\007\u0175\001\001\000\002\001" +
    "\001\000\012\016\056\020\u0183\021\052\022\050\001\001" +
    "\000\004\024\u0178\001\001\000\002\001\001\000\012\016" +
    "\056\020\u017a\021\052\022\050\001\001\000\002\001\001" +
    "\000\022\003\u017c\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\u0185\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\056\020\u018a\021\052\022\050\001\001\000\002\001\001" +
    "\000\022\003\u018c\004\135\006\126\012\130\013\142\014" +
    "\141\015\133\017\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




// AST
    ArrayList errores = new ArrayList();
    public Nodo raiz;    
    public int cont = 0;
    String tipoActual = " ";
    int offsetActual = 0;
    ArrayList <String> identificadores = new ArrayList();
    String tipoPrincipal=" ";
    

public void syntax_error (Symbol s){
    errores.add("Esta es Linea: " + (s.left) + " y Columna: " + (s.right));
}
public void unrecovered_syntax_error(Symbol s){
        errores.add("Error desconocido, por favor revise la linea: " + (s.left + 1) + " y columna: " + (s.right + 1));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROCEDURE EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 tipoPrincipal = tipoActual + " -> void"; tipoActual =" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROCEDURE ::= TK_PROCEDURE TK_ID PARAMETROS NT$0 TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  
  
                Nodo nodo = new Nodo(id.toString(),0, tipoPrincipal,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.setHijos(d.getHijos());
                parser.raiz = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  
                tipoActual = tipoActual + " -> void"; 
                d.setEtiqueta(id.toString());
                Nodo nodo = new Nodo(id.toString(),parser.cont, tipoActual,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.addHijo(d);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROCEDURE_P ::= error TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"procedure\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROCEDURE_P ::= TK_PROCEDURE error PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_P ::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_P",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENTS ::= DECISION STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENTS ::= ASIGNACIONES STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENTS ::= PUT STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENTS ::= GET STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENTS ::= LOOP STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENTS ::= FOR STATEMENTS 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENTS ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOS_VARIABLES ::= TK_INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = i.toString();
                    }
                    else 
                    {
                        tipoActual = tipoActual + " x " + i.toString();
                    }
                    RESULT = i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOS_VARIABLES ::= TK_FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(tipoActual.equalsIgnoreCase(" "))
                    {

                        tipoActual = f.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + f.toString();
                    }
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOS_VARIABLES ::= TK_BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if(tipoActual.equalsIgnoreCase(" "))
                    {
                        tipoActual = b.toString();
                    }
                else 
                    {
                        tipoActual = tipoActual + " x " + b.toString();
                    }
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_VARIABLES ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_VARIABLES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_PARAMETROS ::= TK_IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_PARAMETROS ::= TK_OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOS_PARAMETROS ::= TK_INOUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOS_PARAMETROS ::= error 
            {
              Object RESULT =null;
		 errores.add("Los tipos de parámetros permitidos son in, out e inout. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= TK_PARENTESISI PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= error PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS_PRIME ::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS_PRIME ::= TK_PARENTESISD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS_PRIME ::= error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS_PRIME ::= TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_PRIME",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICION ::= CONDICIONP TK_AND CONDICION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= CONDICIONP TK_OR CONDICION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= CONDICIONP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICIONP ::= VALOR OPCONDICION VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPCONDICION ::= TK_OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCONDICION ::= TK_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDICION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOR ::= TK_DIGITO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOR ::= TK_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOR ::= TK_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOR ::= TK_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECISION ::= TK_IF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN STATEMENTS DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI CONDICION TK_PARENTESISD TK_THEN STATEMENTS DECISION_PRIME 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECISION_PRIME ::= TK_ELSE STATEMENTS TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECISION_PRIME ::= TK_ENDIF TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECISION_PRIME",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACIONES ::= TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= TK_WHILE TK_PARENTESISI CONDICION TK_PARENTESISD TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONES ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Nodo nodo = new Nodo();
                   nodo.setHijos(id);
                   RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACIONES ::= ID TK_PUNTOCOMA DECLARACIONES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo node = new Nodo("DECLARACION",parser.cont);
                    node.setHijos(id);
                    for(int i=0; i<d.getHijos().size();i++){
                        node.addHijo(d.getHijos().get(i));
                    }
                    RESULT = node;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Nodo nodoActual = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACIONES ::= FUNCTION NT$1 DECLARACIONES 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    
                    Nodo hijos = d;
                    for(int i=0; i<hijos.getHijos().size();i++)
                    {
                          f.addHijo(hijos.getHijos().get(i));
                    }
                    RESULT = f;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$2 ::= 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Nodo nodoActual = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACIONES ::= PROCEDURE_P NT$2 DECLARACIONES 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo hijos = d;
                    for(int i=0; i<hijos.getHijos().size();i++)
                    {
                          p.addHijo(hijos.getHijos().get(i));
                    }
                    RESULT = p;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 identificadores.add(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ID ::= TK_ID NT$3 TK_COMA ID 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = d;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ID ::= TK_ID error ID 
            {
              ArrayList<Nodo> RESULT =null;
		 errores.add("Se esperaba un \",\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ID ::= TK_ID TK_COLON TIPOS 
            {
              ArrayList<Nodo> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("Variables",parser.cont);
            parser.cont++;
            identificadores.add(id.toString());
            for(int i =0; i<identificadores.size();i++)
            {
                nodo.getHijos().add(new Nodo(identificadores.get(i),parser.cont++,t.getEtiqueta(),offsetActual));
                parser.cont++;
            }
            identificadores.clear();
            RESULT = nodo.getHijos();

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ID ::= TK_ID error TIPOS 
            {
              ArrayList<Nodo> RESULT =null;
		 errores.add("Se esperaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= TK_BOOLEAN 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_FALSE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= TK_BOOLEAN TK_IGUAL TK_TRUE 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= TK_BOOLEAN error TK_TRUE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= TK_BOOLEAN error TK_FALSE 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS ::= TK_BOOLEAN TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un true o false "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS ::= TK_INTEGER 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;         
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS ::= TK_INTEGER TK_IGUAL TK_DIGITO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS ::= TK_INTEGER error TK_DIGITO 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS ::= TK_INTEGER TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS ::= TK_FLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo;          
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOS ::= TK_FLOAT TK_IGUAL TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Nodo nodo= new Nodo (t.toString(),parser.cont);
            parser.cont++;
            RESULT = nodo; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOS ::= TK_FLOAT error TK_DIGITOFLOAT 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \":=\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOS ::= TK_FLOAT TK_IGUAL error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un numero decimal "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOS ::= error 
            {
              Nodo RESULT =null;
		 errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PUT ::= error TK_PARENTESISI TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"put o un if\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PUT ::= TK_PUT error TK_STRING TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PUT ::= TK_PUT TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba una cadena "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un en el put \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PUT ::= TK_PUT TK_PARENTESISI TK_STRING TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // GET ::= error TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"get\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // GET ::= TK_GET error TK_ID TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \"(\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // GET ::= TK_GET TK_PARENTESISI error TK_PARENTESISD TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // GET ::= TK_GET TK_PARENTESISI TK_ID error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \")\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // GET ::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD error 
            {
              Nodo RESULT =null;
		 errores.add("Se esperaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int exitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object exit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOOP ::= error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOOP ::= TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \":\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOOP ::= TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOOP ::= TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"exit\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"when\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN CONDICION TK_PUNTOCOMA STATEMENTS TK_ENDLOOP TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOP",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo proc = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                tipoActual = tipoActual + " -> "+r.toString(); 
                d.setEtiqueta(tipoActual);
                Nodo nodo = new Nodo(id.toString(),parser.cont, tipoActual,offsetActual);
                tipoActual = " ";
                offsetActual = offsetActual +4;
                parser.cont++;
                nodo.addHijo(d);
                RESULT = nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCTION ::= error TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"function\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCTION ::= TK_FUNCTION error PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador, begin o return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN error TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID error TK_END TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA error TK_ID TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"end\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END error TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un identificador "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS_VARIABLES TK_IS DECLARACIONES TK_BEGIN STATEMENTS TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID error 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \";\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FOR ::= TK_FOR TK_ID TK_IN TK_ID TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR ::= TK_FOR TK_DIGITO TK_IN TK_ID TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FOR ::= TK_FOR TK_ID TK_IN TK_DIGITO TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR ::= error TK_ID TK_IN TK_DIGITO TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"for\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FOR ::= TK_FOR error TK_IN TK_DIGITO TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"numero o un identificador\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FOR ::= TK_FOR TK_ID TK_IN error TK_LOOP STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"numero o un identificador\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR ::= TK_FOR TK_ID TK_IN TK_DIGITO error STATEMENTS TK_ENDLOOP TK_PUNTOCOMA 
            {
              Nodo RESULT =null;
		 errores.add("Se esparaba un \"loop\" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
