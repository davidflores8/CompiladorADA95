package compilador_ada95;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import java.util.ArrayList;

%%

%unicode
%line
%column
%public
%cup
%state COMENTARIOS

%{
    String comentario="";
    ArrayList erroresLexicos = new ArrayList();
    
%}

LETRA = [a-zA-Z]
DIGITO = [+-]?[0-9]+
ESPACIO = [" "]
DIGITOFLOAT = [+-]?([0-9]*[.])?[0-9]+
ID = {LETRA}({LETRA}|{DIGITO}|_)*|_{LETRA}({LETRA}|{DIGITO}|_)*
COMA = ,
IGUAL = :=
PUNTOCOMA = ;
PARENTESISI = "("
PARENTESISD = ")"
SALTOLINEA = \n|\r|\n\r|{ESPACIO}
AND = &
OR = "|"
OPREL = <|>|<=|>=|=
COLON = :
OPADICION = [+-]
OPMULTI = [*/]
IF = if
ELSE = else
ELSEIF = elseif
ENDIF = end[{ESPACIO}]+if
THEN = then
INTEGER = INTEGER
FLOAT = FLOAT
BOOLEAN = BOOLEAN
LOOP = loop
ENDLOOP = end[{ESPACIO}]+loop
WHILE = while
PROCEDURE = procedure
BEGIN = begin
END = end
IS = is
TRUE = true
FALSE = false
COMENTARIO = --
PUT = put
GET = get
IN = in
OUT = out 
INOUT = inout
%%

<YYINITIAL>{
{PROCEDURE} {return new Symbol (sym.TK_PROCEDURE, yyline + 1, yycolumn +1 , yytext() ) ; }
{IS} {return new Symbol (sym.TK_IS, yyline + 1, yycolumn +1 , yytext() ) ; }
{BEGIN} {return new Symbol (sym.TK_BEGIN, yyline + 1, yycolumn +1 , yytext() ) ; }
{END} {return new Symbol (sym.TK_END, yyline + 1, yycolumn +1 , yytext() ) ; }
{IF} {System.out.println("Encontro un if - "+yytext());return new Symbol (sym.TK_IF, yyline + 1, yycolumn +1 , yytext() ) ; }
{ELSE} {return new Symbol (sym.TK_ELSE, yyline + 1, yycolumn +1 , yytext() ) ; }
{ELSEIF} {return new Symbol (sym.TK_ELSEIF, yyline + 1, yycolumn +1 , yytext() ) ; }
{PARENTESISI} {return new Symbol (sym.TK_PARENTESISI, yyline + 1, yycolumn +1 , yytext() ) ; }
{OPREL} {return new Symbol (sym.TK_OPREL, yyline + 1, yycolumn +1 , yytext() ) ; }
{LETRA} {return new Symbol (sym.TK_LETRA, yyline + 1, yycolumn +1 , yytext() ) ; }
{DIGITO} {System.out.println("Encontro un digito "+yytext());return new Symbol (sym.TK_DIGITO, yyline + 1, yycolumn +1 , yytext() ) ; }
{DIGITOFLOAT} {System.out.println("Encontro un digito float "+yytext());return new Symbol (sym.TK_DIGITOFLOAT, yyline + 1, yycolumn +1 , yytext() ) ; }
{COLON} {return new Symbol (sym.TK_COLON, yyline + 1, yycolumn +1 , yytext() ) ; }
{AND} {return new Symbol (sym.TK_AND, yyline + 1, yycolumn +1 , yytext() ) ; }
{OR} {return new Symbol (sym.TK_OR, yyline + 1, yycolumn +1 , yytext() ) ; }
{TRUE} {return new Symbol (sym.TK_TRUE, yyline + 1, yycolumn +1 , yytext() ) ; }
{FALSE} {return new Symbol (sym.TK_FALSE, yyline + 1, yycolumn +1 , yytext() ) ; }
{PARENTESISD} {return new Symbol (sym.TK_PARENTESISD, yyline + 1, yycolumn +1 , yytext() ) ; }
{THEN} {System.out.println("Encontro un then - "+yytext());return new Symbol (sym.TK_THEN, yyline + 1, yycolumn +1 , yytext() ) ; }
{ENDIF} {return new Symbol (sym.TK_ENDIF, yyline + 1, yycolumn +1 , yytext() ) ; }
{PUNTOCOMA} {return new Symbol (sym.TK_PUNTOCOMA, yyline + 1, yycolumn +1 , yytext() ) ; }
{IGUAL} {System.out.println("Encontro un igual");return new Symbol (sym.TK_IGUAL, yyline + 1, yycolumn +1 , yytext() ) ; }
{BOOLEAN} {System.out.println("Encontro un Boolean");return new Symbol (sym.TK_BOOLEAN, yyline + 1, yycolumn +1 , yytext() ) ; }
{INTEGER} {return new Symbol (sym.TK_INTEGER, yyline + 1, yycolumn +1 , yytext() ) ; }
{FLOAT} {System.out.println("Encontro un float");return new Symbol (sym.TK_FLOAT, yyline + 1, yycolumn +1 , yytext() ) ; }
{COMA} {return new Symbol (sym.TK_COMA, yyline + 1, yycolumn +1 , yytext() ) ; }
{PUT} {return new Symbol (sym.TK_PUT, yyline + 1, yycolumn +1 , yytext() ) ; }
{GET} {return new Symbol (sym.TK_GET, yyline + 1, yycolumn +1 , yytext() ) ; }
{IN} {return new Symbol (sym.TK_IN, yyline + 1, yycolumn +1 , yytext() ) ; }
{OUT} {return new Symbol (sym.TK_OUT, yyline + 1, yycolumn +1 , yytext() ) ; }
{INOUT} {return new Symbol (sym.TK_INOUT, yyline + 1, yycolumn +1 , yytext() ) ; }
{LOOP} {return new Symbol (sym.TK_LOOP, yyline + 1, yycolumn +1 , yytext() ) ; }
{ENDLOOP} {return new Symbol (sym.TK_ENDLOOP, yyline + 1, yycolumn +1 , yytext() ) ; }
{WHILE} {return new Symbol (sym.TK_WHILE, yyline + 1, yycolumn +1 , yytext() ) ; }
{OPADICION} {return new Symbol (sym.TK_OPADICION, yyline + 1, yycolumn +1 , yytext() ) ; }
{OPMULTI} {return new Symbol (sym.TK_MULTI, yyline + 1, yycolumn +1 , yytext() ) ; }
{COMENTARIO} {yybegin(COMENTARIOS);}
{ID} {System.out.println("Encontro un id - "+yytext());return new Symbol (sym.TK_ID, yyline + 1, yycolumn +1 , yytext() ) ; }
{SALTOLINEA} {  }

.  {erroresLexicos.add("Error lexico en linea "+yyline+" y columna "+yycolumn+" y en el texto: "+yytext());}
}


<COMENTARIOS>{
    
    . {comentario = comentario+yytext();}

    {SALTOLINEA} {System.out.println("Este es un comentario: "+comentario); comentario =" ";yybegin(YYINITIAL);}

}

