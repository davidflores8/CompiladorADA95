package compilador_ada95;

import java_cup.runtime.Symbol;

parser code {:


public void syntax_error (Symbol s){

    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);

}

:} ;

//terminal String TK_ID;
//terminal String TK_COMA;
//non terminal DOC;
//non terminal LISTA ;

terminal String TK_IF;
terminal String TK_PARENTESISI;
terminal String TK_PARENTESISD;
terminal String TK_ID;
terminal String TK_OPREL;
terminal String TK_DIGITO;
terminal String TK_THEN;
terminal String TK_ENDIF;
terminal String TK_PUNTOCOMA;
terminal String TK_IGUAL;
terminal String TK_INTEGER;
terminal String TK_BOOLEAN;
terminal String TK_CHAR;
terminal String TK_COMA;
//terminal String TK_ESPACIO;

non terminal DECISION;
non terminal ASIGNACIONES;
non terminal CREACION;
//non terminal DECLARACION;



//DOC ::= LISTA {: System.out.println("doc ok"); :};

//al asignar la variable al token, es decir TK_ID : id, se crean automaticamente las variable
//idleft y idright , lo mismo sucede con cualquier nombre que usemos para la variable
//por ejemplo TK_ID:palabra, crearia las palabras palabraleft y palabraright


//LISTA ::= LISTA TK_COMA TK_ID:id {: System.out.println("ID en linea "+idleft + " Columna " +idright+ " lexema "+id); :}
//        | TK_ID:id {:System.out.println("Id en linea "+idleft+" Columna "+idright+ " Lexema "+id); :}
//;

DECISION ::= TK_IF TK_PARENTESISI TK_ID TK_OPREL TK_DIGITO TK_PARENTESISD TK_THEN ASIGNACIONES TK_ENDIF TK_PUNTOCOMA ;
ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID ;

CREACION ::=  TK_ID TK_COMA CREACION 
            | TK_ID           
;

//DECLARACION ::= CREACION TK_IGUAL TK_INTEGER TK_PUNTOCOMA 
//            | CREACION TK_IGUAL TK_BOOLEAN TK_PUNTOCOMA 
//            | CREACION TK_IGUAL TK_CHAR TK_PUNTOCOMA 
//;



