package compilador_ada95;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

parser code {:

   ArrayList errores = new ArrayList();

public void syntax_error (Symbol s){
    System.out.println("-----------------------");
    System.out.println("Error de sintaxis");
    System.out.println("Linea " +s.left);
    System.out.println("Columna " +s.right);
    errores.add("Syntax error: " +  s.value + " Linea: " + (s.left) + " Columna: " + (s.right));
}

:} ;


terminal String TK_IF, TK_ELSE, TK_ELSEIF, TK_PARENTESISI, TK_PARENTESISD, TK_ID, TK_OPREL, TK_DIGITO, TK_LETRA, TK_THEN, TK_ENDIF, TK_PUNTOCOMA;
terminal String TK_IGUAL, TK_INTEGER, TK_BOOLEAN, TK_FLOAT, TK_COMA, TK_LOOP, TK_ENDLOOP, TK_WHILE, TK_OPADICION, TK_MULTI;
terminal String TK_PROCEDURE, TK_IS, TK_BEGIN, TK_END, TK_TRUE, TK_FALSE, TK_COLON, TK_AND, TK_OR, TK_PUT, TK_GET;
terminal String TK_DIGITOFLOAT, TK_IN, TK_OUT, TK_INOUT, TK_COMILLA, TK_EXIT, TK_WHEN, TK_FUNCTION, TK_RETURN;

non terminal PROCEDURE, PROCEDURE_PRIME, WHILE, DECISION, DECISION_PRIME, ASIGNACIONES, LOOP;
non terminal DECLARACIONES, ID, EXPRESIONES, EP, TIPOS, PUT, GET, PARAMETROS, TIPOS_PARAMETROS, TIPOS_VARIABLES, PARAMETROS_PRIME;
non terminal FUNCTION;

start with PROCEDURE;


PROCEDURE::= TK_PROCEDURE TK_ID PARAMETROS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_END TK_ID TK_PUNTOCOMA; 

PROCEDURE_PRIME::= DECISION PROCEDURE_PRIME
                | WHILE PROCEDURE_PRIME
                | ASIGNACIONES PROCEDURE_PRIME
                | PROCEDURE PROCEDURE_PRIME
                | PUT PROCEDURE_PRIME
                | GET PROCEDURE_PRIME
                | LOOP PROCEDURE_PRIME
                | FUNCTION PROCEDURE_PRIME
                | 
;


DECISION ::=  TK_IF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME;

DECISION_PRIME ::= TK_ELSEIF TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_THEN PROCEDURE_PRIME DECISION_PRIME
            | TK_ELSE PROCEDURE_PRIME TK_ENDIF TK_PUNTOCOMA 
            | TK_ENDIF TK_PUNTOCOMA 
;

  
ASIGNACIONES ::= TK_ID TK_IGUAL TK_ID TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_ID TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITO TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_OPADICION TK_DIGITOFLOAT TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_MULTI TK_ID TK_PUNTOCOMA 
               |TK_ID TK_IGUAL TK_ID TK_MULTI TK_DIGITO TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_DIGITO TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_TRUE TK_PUNTOCOMA
               |TK_ID TK_IGUAL TK_FALSE TK_PUNTOCOMA
;

//Ciclo while

WHILE ::= TK_WHILE TK_PARENTESISI EXPRESIONES TK_PARENTESISD TK_LOOP PROCEDURE_PRIME TK_ENDLOOP TK_PUNTOCOMA;

EXPRESIONES ::= EP
              | EP TK_OR EP
              | EP TK_AND EP
;

EP::= TK_ID TK_OPREL TK_ID 
    | TK_ID TK_OPREL TK_DIGITO 
    | TK_ID TK_OPREL TK_DIGITOFLOAT 
    | TK_ID TK_OPREL TK_TRUE 
    | TK_ID TK_OPREL TK_FALSE 
    | TK_DIGITO TK_OPREL TK_ID
    | TK_DIGITOFLOAT TK_OPREL TK_ID
;

//Declaraciones de variables

DECLARACIONES::= ID 
                | ID TK_PUNTOCOMA DECLARACIONES
                | 
;

ID::= TK_ID TK_COMA ID
    | TK_ID TK_COLON TIPOS
;

TIPOS::= TK_BOOLEAN 
        |TK_BOOLEAN TK_IGUAL TK_FALSE 
        |TK_BOOLEAN TK_IGUAL TK_TRUE 
        |TK_INTEGER
        |TK_INTEGER TK_IGUAL TK_DIGITO
        |TK_FLOAT
        |TK_FLOAT TK_IGUAL TK_DIGITOFLOAT
;
                
//Get y Put

PUT::= TK_PUT TK_PARENTESISI TK_COMILLA TK_ID TK_COMILLA TK_PARENTESISD  TK_PUNTOCOMA;
GET::= TK_GET TK_PARENTESISI TK_ID TK_PARENTESISD TK_PUNTOCOMA;


//Parametros

TIPOS_VARIABLES::= TK_INTEGER 
                | TK_FLOAT
                | TK_BOOLEAN
                | error {: errores.add("Los tipos de datos permitidos son INTEGER, FLOAT y BOOLEAN. "); :}
;

TIPOS_PARAMETROS::= TK_IN
                | TK_OUT
                | TK_INOUT
                | error {: errores.add("Los tipos de par√°metros permitidos son in, out e inout. "); :}
;

PARAMETROS::= TK_PARENTESISI PARAMETROS_PRIME
             | error PARAMETROS_PRIME {: errores.add("Se esparaba un \"(\" "); :}
;

PARAMETROS_PRIME::= TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME
                    | TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PARENTESISD 
                    | error TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME {: errores.add("Se esparaba un identificador "); :}
                    | TK_ID error TIPOS_PARAMETROS TIPOS_VARIABLES TK_PUNTOCOMA PARAMETROS_PRIME {: errores.add("Se esparaba un \":\" "); :}
                    | TK_ID TK_COLON TIPOS_PARAMETROS TIPOS_VARIABLES error PARAMETROS_PRIME{: errores.add("Se esparaba un \";\" "); :}
                    
       
;

//Loop

LOOP ::= TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA
        |error TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID error TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \":\" "); :}
        |TK_ID TK_COLON error TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"loop\" "); :}
        |TK_ID TK_COLON TK_LOOP error TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"exit\" "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT error TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID error EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"when\" "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP error TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
        |TK_ID TK_COLON TK_LOOP TK_EXIT TK_ID TK_WHEN EXPRESIONES TK_PUNTOCOMA PROCEDURE_PRIME TK_ENDLOOP TK_ID error {: errores.add("Se esparaba un \";\" "); :}
;

//FUNCTIONS

FUNCTION ::= TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA
            | error TK_ID PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"function\" "); :}
            | TK_FUNCTION error PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un identificador "); :}
            | TK_FUNCTION TK_ID PARAMETROS error TIPOS TK_IS DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"return\" "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS error DECLARACIONES TK_BEGIN PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"is\" "); :}
            | TK_FUNCTION TK_ID PARAMETROS TK_RETURN TIPOS TK_IS DECLARACIONES error PROCEDURE_PRIME TK_RETURN TK_ID TK_PUNTOCOMA TK_END TK_ID TK_PUNTOCOMA {: errores.add("Se esparaba un \"begin\" "); :}
;